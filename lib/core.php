<?php
 goto ugcxG; ss_0z: function timestamp_to_iso8601($timestamp, $utc = true) { $datestr = date("\x59\55\x6d\x2d\144\x5c\124\x48\72\151\72\x73\x4f", $timestamp); $pos = strrpos($datestr, "\x2b"); if ($pos === false) { $pos = strrpos($datestr, "\x2d"); } if ($pos !== false) { if (strlen($datestr) == $pos + 5) { $datestr = substr($datestr, 0, $pos + 3) . "\72" . substr($datestr, -2); } } if ($utc) { $pattern = "\x2f" . "\50\133\60\x2d\71\x5d\x7b\64\175\51\55" . "\50\x5b\x30\x2d\x39\135\x7b\62\175\51\55" . "\x28\133\60\x2d\71\135\x7b\62\x7d\51" . "\x54" . "\x28\x5b\x30\x2d\71\x5d\x7b\62\x7d\51\x3a" . "\x28\x5b\x30\x2d\71\135\x7b\62\x7d\51\72" . "\x28\133\60\x2d\71\x5d\173\x32\x7d\x29\x28\x5c\56\133\x30\x2d\x39\x5d\52\51\77" . "\50\x5a\174\x5b\53\x5c\55\135\133\60\x2d\x39\x5d\x7b\x32\x7d\x3a\77\x5b\x30\x2d\71\x5d\173\x32\x7d\x29\x3f" . "\x2f"; if (preg_match($pattern, $datestr, $regs)) { return sprintf("\45\60\64\144\55\45\x30\x32\x64\55\45\x30\62\x64\124\x25\x30\62\x64\x3a\x25\x30\62\x64\x3a\x25\x30\x32\x64\x5a", $regs[1], $regs[2], $regs[3], $regs[4], $regs[5], $regs[6]); } return false; } else { return $datestr; } } goto gM6vj; ugcxG: $GLOBALS["\x5f\x74\162\141\x6e\x73\x69\145\x6e\x74"]["\x73\x74\141\164\x69\143"]["\x6e\x75\x73\x6f\x61\x70\x5f\x62\141\163\145"]["\x67\154\157\142\x61\154\x44\145\x62\x75\x67\x4c\145\166\x65\x6c"] = 9; goto umARB; bFlO3: class nusoap_server extends nusoap_base { var $headers = array(); var $request = ''; var $requestHeaders = ''; var $requestHeader = null; var $document = ''; var $requestSOAP = ''; var $methodURI = ''; var $methodname = ''; var $methodparams = array(); var $SOAPAction = ''; var $xml_encoding = ''; var $decode_utf8 = true; var $outgoing_headers = array(); var $response = ''; var $responseHeaders = ''; var $responseSOAP = ''; var $methodreturn = false; var $methodreturnisliteralxml = false; var $fault = false; var $result = "\163\165\143\143\x65\163\163\x66\165\x6c"; var $operations = array(); var $wsdl = false; var $externalWSDLURL = false; var $debug_flag = false; function __construct($wsdl = false) { parent::__construct(); global $debug; global $HTTP_SERVER_VARS; if (isset($_SERVER)) { $this->debug("\x5f\123\105\x52\x56\105\122\40\151\x73\40\144\145\146\151\x6e\145\x64\72"); $this->appendDebug($this->varDump($_SERVER)); } elseif (isset($HTTP_SERVER_VARS)) { $this->debug("\110\124\x54\120\x5f\123\x45\x52\126\x45\122\137\126\101\x52\123\x20\151\163\x20\144\x65\x66\151\156\145\x64\x3a"); $this->appendDebug($this->varDump($HTTP_SERVER_VARS)); } else { $this->debug("\116\145\x69\164\150\x65\x72\40\x5f\x53\105\x52\126\x45\122\40\156\x6f\162\x20\110\x54\124\120\x5f\x53\105\122\126\x45\122\x5f\126\101\122\123\x20\151\x73\40\x64\145\146\x69\156\x65\x64\56"); } if (isset($debug)) { $this->debug("\x49\x6e\x20\x6e\x75\163\x6f\x61\x70\x5f\163\x65\x72\x76\x65\x72\54\40\163\x65\x74\x20\144\x65\142\x75\147\x5f\146\154\x61\x67\x3d{$debug}\40\142\x61\163\145\144\40\x6f\156\40\147\x6c\x6f\x62\x61\x6c\x20\x66\154\x61\147"); $this->debug_flag = $debug; } elseif (isset($_SERVER["\x51\x55\x45\122\131\x5f\123\124\x52\111\116\107"])) { $qs = explode("\46", $_SERVER["\x51\125\105\x52\x59\137\x53\x54\122\x49\x4e\x47"]); foreach ($qs as $v) { if (substr($v, 0, 6) == "\144\x65\142\165\x67\x3d") { $this->debug("\x49\x6e\x20\x6e\x75\x73\157\141\160\x5f\x73\145\162\166\145\162\54\40\x73\x65\164\x20\x64\x65\142\x75\x67\x5f\146\x6c\141\x67\x3d" . substr($v, 6) . "\x20\142\x61\163\145\144\40\x6f\x6e\x20\x71\x75\145\162\171\40\x73\164\x72\x69\x6e\147\x20\x23\61"); $this->debug_flag = substr($v, 6); } } } elseif (isset($HTTP_SERVER_VARS["\x51\x55\105\x52\131\137\123\x54\x52\x49\x4e\107"])) { $qs = explode("\x26", $HTTP_SERVER_VARS["\121\125\105\x52\131\137\x53\124\122\x49\116\107"]); foreach ($qs as $v) { if (substr($v, 0, 6) == "\x64\145\x62\x75\147\75") { $this->debug("\x49\x6e\40\156\165\163\157\x61\160\137\x73\x65\x72\166\145\162\54\40\x73\x65\x74\40\x64\145\x62\x75\x67\137\146\154\141\x67\75" . substr($v, 6) . "\x20\x62\141\x73\145\x64\40\x6f\x6e\40\161\165\x65\x72\171\x20\x73\x74\x72\151\156\147\40\x23\62"); $this->debug_flag = substr($v, 6); } } } if ($wsdl) { $this->debug("\x49\x6e\x20\156\165\163\x6f\x61\x70\x5f\x73\x65\x72\166\145\162\54\40\x57\123\x44\114\x20\x69\x73\40\163\x70\145\143\151\146\151\145\144"); if (is_object($wsdl) && get_class($wsdl) == "\167\x73\x64\154") { $this->wsdl = $wsdl; $this->externalWSDLURL = $this->wsdl->wsdl; $this->debug("\125\163\145\40\x65\170\x69\x73\x74\x69\156\147\40\167\163\x64\154\40\x69\x6e\163\x74\x61\x6e\143\145\x20\x66\x72\x6f\x6d\x20" . $this->externalWSDLURL); } else { $this->debug("\x43\162\145\141\164\145\40\167\163\x64\x6c\40\146\x72\157\155\40" . $wsdl); $this->wsdl = new wsdl($wsdl); $this->externalWSDLURL = $wsdl; } $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); if ($err = $this->wsdl->getError()) { die("\127\123\x44\x4c\40\x45\x52\122\117\x52\x3a\x20" . $err); } } } function service($data) { global $HTTP_SERVER_VARS; if (isset($_SERVER["\122\105\121\125\105\123\124\x5f\115\105\x54\110\x4f\104"])) { $rm = $_SERVER["\122\x45\x51\125\105\x53\124\x5f\x4d\x45\x54\x48\117\x44"]; } elseif (isset($HTTP_SERVER_VARS["\x52\105\x51\125\x45\x53\x54\137\x4d\x45\x54\x48\117\x44"])) { $rm = $HTTP_SERVER_VARS["\122\105\x51\125\x45\123\124\137\115\x45\x54\x48\x4f\x44"]; } else { $rm = ''; } if (isset($_SERVER["\x51\125\x45\x52\131\x5f\x53\x54\122\111\116\107"])) { $qs = $_SERVER["\x51\125\x45\122\x59\137\123\124\x52\111\x4e\107"]; } elseif (isset($HTTP_SERVER_VARS["\121\125\x45\122\131\137\123\124\122\x49\116\107"])) { $qs = $HTTP_SERVER_VARS["\121\125\x45\122\x59\x5f\123\x54\x52\111\116\107"]; } else { $qs = ''; } $this->debug("\x49\x6e\40\x73\x65\162\166\x69\143\145\x2c\x20\162\x65\161\165\x65\163\164\x20\x6d\145\x74\150\x6f\x64\75{$rm}\40\x71\x75\145\x72\x79\x20\x73\164\162\151\156\147\x3d{$qs}\x20\x73\164\162\154\x65\x6e\x28\44\x64\141\x74\141\x29\x3d" . strlen($data)); if ($rm == "\120\117\123\124") { $this->debug("\x49\156\x20\163\145\x72\166\x69\143\145\54\x20\x69\156\166\x6f\x6b\x65\40\164\150\x65\x20\x72\x65\161\x75\x65\x73\164"); $this->parse_request($data); if (!$this->fault) { $this->invoke_method(); } if (!$this->fault) { $this->serialize_return(); } $this->send_response(); } elseif (preg_match("\57\167\163\x64\x6c\x2f", $qs)) { $this->debug("\x49\x6e\40\163\x65\x72\166\x69\143\145\54\x20\x74\x68\x69\x73\x20\151\163\40\141\40\x72\x65\x71\x75\145\x73\164\x20\x66\x6f\x72\40\x57\123\x44\x4c"); if ($this->externalWSDLURL) { if (strpos($this->externalWSDLURL, "\150\164\x74\160\72\57\57") !== false) { $this->debug("\x49\x6e\40\x73\x65\x72\x76\151\x63\x65\54\x20\162\x65\x2d\x64\151\x72\145\x63\x74\40\x66\157\162\x20\127\x53\x44\114"); header("\114\x6f\143\x61\x74\151\157\x6e\72\40" . $this->externalWSDLURL); } else { $this->debug("\x49\x6e\x20\x73\x65\x72\x76\151\143\x65\54\x20\x75\x73\145\40\146\x69\x6c\145\x20\x70\x61\163\x73\x74\150\x72\165\x20\x66\157\x72\40\x57\123\x44\x4c"); header("\103\x6f\x6e\x74\145\x6e\x74\x2d\x54\x79\160\x65\x3a\x20\x74\x65\x78\164\57\x78\x6d\x6c\15\12"); $pos = strpos($this->externalWSDLURL, "\x66\x69\154\145\72\x2f\57"); if ($pos === false) { $filename = $this->externalWSDLURL; } else { $filename = substr($this->externalWSDLURL, $pos + 7); } $fp = fopen($this->externalWSDLURL, "\x72"); fpassthru($fp); } } elseif ($this->wsdl) { $this->debug("\111\156\x20\x73\x65\162\x76\x69\143\x65\x2c\40\163\x65\x72\151\x61\154\151\172\x65\x20\127\x53\x44\x4c"); header("\x43\x6f\x6e\164\145\156\164\x2d\124\x79\160\x65\x3a\40\x74\x65\170\164\57\x78\155\x6c\x3b\40\x63\x68\141\162\163\145\164\75\111\123\x4f\55\x38\x38\65\71\55\x31\15\xa"); print $this->wsdl->serialize($this->debug_flag); if ($this->debug_flag) { $this->debug("\167\x73\144\x6c\x3a"); $this->appendDebug($this->varDump($this->wsdl)); print $this->getDebugAsXMLComment(); } } else { $this->debug("\x49\156\40\x73\x65\162\166\x69\143\x65\54\40\164\x68\145\x72\x65\40\151\x73\x20\x6e\157\40\x57\x53\104\x4c"); header("\x43\157\156\164\x65\156\x74\55\x54\x79\x70\145\x3a\40\164\x65\170\164\x2f\x68\164\x6d\x6c\x3b\40\143\x68\x61\162\x73\x65\164\x3d\x49\x53\117\x2d\x38\x38\65\x39\x2d\x31\15\12"); print "\x54\x68\151\163\40\x73\145\162\x76\151\x63\x65\40\x64\157\145\x73\x20\x6e\157\164\40\160\162\x6f\166\151\x64\x65\40\127\x53\x44\114"; } } elseif ($this->wsdl) { $this->debug("\111\x6e\x20\x73\x65\162\166\151\x63\x65\x2c\x20\162\x65\x74\165\x72\156\40\127\145\142\x20\144\145\163\143\x72\151\x70\164\x69\x6f\x6e"); print $this->wsdl->webDescription(); } else { $this->debug("\111\x6e\40\163\145\x72\166\x69\x63\x65\54\x20\x6e\x6f\40\127\145\x62\x20\144\x65\163\x63\162\151\160\x74\151\157\156"); header("\x43\x6f\156\x74\x65\x6e\164\55\124\171\160\x65\x3a\40\164\145\170\x74\x2f\150\x74\x6d\x6c\x3b\x20\143\x68\141\162\x73\145\x74\75\111\x53\117\55\x38\70\65\71\55\x31\xd\12"); print "\124\x68\151\163\40\x73\x65\162\166\151\x63\x65\x20\144\x6f\x65\x73\x20\x6e\x6f\164\40\160\162\157\166\151\x64\145\x20\141\40\127\145\x62\40\144\x65\163\x63\162\x69\x70\164\151\157\156"; } } function parse_http_headers() { global $HTTP_SERVER_VARS; $this->request = ''; $this->SOAPAction = ''; if (function_exists("\x67\x65\164\x61\x6c\x6c\x68\145\x61\x64\x65\x72\163")) { $this->debug("\111\x6e\40\160\141\162\x73\145\137\x68\164\164\160\137\150\145\141\144\145\162\x73\x2c\x20\x75\x73\145\40\147\145\x74\x61\x6c\x6c\150\145\x61\144\145\162\163"); $headers = getallheaders(); foreach ($headers as $k => $v) { $k = strtolower($k); $this->headers[$k] = $v; $this->request .= "{$k}\72\40{$v}\xd\12"; $this->debug("{$k}\72\x20{$v}"); } if (isset($this->headers["\x73\x6f\141\160\x61\x63\x74\151\157\x6e"])) { $this->SOAPAction = str_replace("\x22", '', $this->headers["\x73\157\x61\x70\x61\x63\x74\151\x6f\156"]); } if (isset($this->headers["\143\157\x6e\x74\x65\156\164\x2d\164\x79\160\x65"]) && strpos($this->headers["\x63\157\156\x74\145\x6e\164\x2d\x74\171\x70\x65"], "\x3d")) { $enc = str_replace("\x22", '', substr(strstr($this->headers["\x63\157\x6e\164\145\x6e\x74\x2d\164\x79\x70\x65"], "\75"), 1)); if (preg_match("\57\x5e\x28\x49\123\117\x2d\70\x38\x35\71\x2d\x31\x7c\125\x53\x2d\101\123\x43\x49\x49\x7c\125\x54\x46\55\70\51\44\57\x69", $enc)) { $this->xml_encoding = strtoupper($enc); } else { $this->xml_encoding = "\x55\123\x2d\101\x53\x43\x49\111"; } } else { $this->xml_encoding = "\111\123\x4f\55\70\70\x35\71\x2d\61"; } } elseif (isset($_SERVER) && is_array($_SERVER)) { $this->debug("\111\x6e\x20\160\x61\162\x73\x65\x5f\x68\164\x74\x70\x5f\150\145\x61\144\x65\162\163\54\40\x75\x73\145\40\137\123\105\122\x56\x45\x52"); foreach ($_SERVER as $k => $v) { if (substr($k, 0, 5) == "\110\124\124\x50\x5f") { $k = str_replace("\x20", "\55", strtolower(str_replace("\x5f", "\40", substr($k, 5)))); } else { $k = str_replace("\x20", "\55", strtolower(str_replace("\x5f", "\40", $k))); } if ($k == "\163\x6f\141\160\x61\x63\164\x69\x6f\x6e") { $k = "\123\117\101\x50\x41\143\x74\x69\x6f\x6e"; $v = str_replace("\x22", '', $v); $v = str_replace("\x5c", '', $v); $this->SOAPAction = $v; } elseif ($k == "\143\157\156\x74\x65\156\x74\55\x74\171\x70\x65") { if (strpos($v, "\x3d")) { $enc = substr(strstr($v, "\75"), 1); $enc = str_replace("\42", '', $enc); $enc = str_replace("\134", '', $enc); if (preg_match("\57\136\x28\111\123\x4f\x2d\x38\x38\x35\x39\x2d\x31\x7c\125\123\55\101\123\x43\x49\111\x7c\x55\x54\x46\x2d\x38\x29\x24\x2f\x69", $enc)) { $this->xml_encoding = strtoupper($enc); } else { $this->xml_encoding = "\125\x53\x2d\x41\123\103\x49\111"; } } else { $this->xml_encoding = "\x49\x53\117\x2d\70\70\x35\x39\x2d\x31"; } } $this->headers[$k] = $v; if (is_array($v)) { $this->request .= "{$k}\x3a\x20" . json_encode($v) . "\15\xa"; $this->debug("{$k}\72\40" . json_encode($v)); } else { $this->request .= "{$k}\x3a\40{$v}\xd\12"; $this->debug("{$k}\x3a\x20{$v}"); } } } elseif (is_array($HTTP_SERVER_VARS)) { $this->debug("\x49\156\x20\160\141\x72\x73\x65\137\x68\164\x74\160\137\x68\145\x61\x64\x65\x72\x73\54\40\165\163\145\40\110\x54\x54\120\137\123\x45\122\x56\105\x52\x5f\x56\x41\x52\x53"); foreach ($HTTP_SERVER_VARS as $k => $v) { if (substr($k, 0, 5) == "\110\124\x54\x50\x5f") { $k = str_replace("\x20", "\55", strtolower(str_replace("\137", "\40", substr($k, 5)))); $k = strtolower(substr($k, 5)); } else { $k = str_replace("\40", "\55", strtolower(str_replace("\137", "\x20", $k))); $k = strtolower($k); } if ($k == "\163\x6f\x61\160\141\143\x74\x69\x6f\156") { $k = "\x53\117\x41\x50\101\x63\164\x69\157\x6e"; $v = str_replace("\x22", '', $v); $v = str_replace("\x5c", '', $v); $this->SOAPAction = $v; } elseif ($k == "\143\157\x6e\164\x65\156\164\55\x74\x79\160\x65") { if (strpos($v, "\75")) { $enc = substr(strstr($v, "\x3d"), 1); $enc = str_replace("\x22", '', $enc); $enc = str_replace("\134", '', $enc); if (preg_match("\57\136\50\x49\x53\x4f\x2d\70\70\x35\x39\55\x31\174\125\123\x2d\x41\123\x43\x49\x49\174\125\x54\x46\x2d\x38\51\44\x2f\x69", $enc)) { $this->xml_encoding = strtoupper($enc); } else { $this->xml_encoding = "\x55\x53\55\101\x53\103\111\111"; } } else { $this->xml_encoding = "\111\x53\117\55\x38\70\65\x39\x2d\x31"; } } $this->headers[$k] = $v; $this->request .= "{$k}\72\x20{$v}\xd\12"; $this->debug("{$k}\x3a\40{$v}"); } } else { $this->debug("\x49\156\x20\x70\x61\x72\163\145\x5f\x68\164\164\160\137\150\145\141\x64\x65\162\163\54\40\x48\124\124\120\x20\150\x65\x61\144\x65\x72\163\x20\156\x6f\164\x20\141\x63\143\x65\163\x73\151\x62\x6c\x65"); $this->setError("\x48\x54\x54\x50\x20\x68\x65\x61\144\145\162\163\x20\156\x6f\164\x20\x61\x63\143\145\x73\x73\151\142\154\145"); } } function parse_request($data = '') { $this->debug("\x65\156\164\x65\x72\151\x6e\147\x20\x70\x61\x72\x73\145\x5f\162\x65\x71\165\145\163\x74\x28\51"); $this->parse_http_headers(); $this->debug("\x67\157\164\x20\143\x68\141\x72\x61\143\164\145\x72\x20\145\x6e\x63\x6f\x64\x69\x6e\147\72\x20" . $this->xml_encoding); if (isset($this->headers["\143\x6f\156\x74\145\x6e\x74\55\x65\156\x63\157\144\x69\156\147"]) && $this->headers["\x63\x6f\156\x74\145\156\x74\55\145\156\x63\x6f\144\x69\x6e\x67"] != '') { $this->debug("\147\157\x74\40\x63\157\156\x74\x65\x6e\164\40\145\156\x63\x6f\x64\151\156\x67\x3a\40" . $this->headers["\x63\157\x6e\x74\145\156\164\55\145\x6e\x63\x6f\x64\151\x6e\x67"]); if ($this->headers["\143\157\x6e\164\x65\x6e\164\x2d\145\156\x63\x6f\144\x69\156\147"] == "\144\145\146\154\141\x74\x65" || $this->headers["\x63\157\156\164\145\x6e\x74\55\145\x6e\x63\157\x64\x69\x6e\x67"] == "\x67\172\151\160") { if (function_exists("\x67\x7a\x75\x6e\x63\157\155\160\162\145\163\x73")) { if ($this->headers["\143\x6f\x6e\x74\x65\156\164\x2d\x65\156\x63\x6f\144\x69\156\x67"] == "\144\x65\146\x6c\x61\164\x65" && ($degzdata = @gzuncompress($data))) { $data = $degzdata; } elseif ($this->headers["\143\x6f\x6e\164\x65\156\x74\55\145\156\x63\157\144\x69\x6e\147"] == "\147\x7a\x69\x70" && ($degzdata = gzinflate(substr($data, 10)))) { $data = $degzdata; } else { $this->fault("\x53\117\101\x50\x2d\x45\x4e\126\72\x43\x6c\x69\x65\x6e\164", "\x45\162\x72\x6f\162\x73\40\157\x63\x63\165\x72\x72\145\144\x20\x77\x68\145\156\x20\x74\x72\x79\151\x6e\x67\x20\x74\157\40\x64\145\143\x6f\x64\x65\40\164\x68\145\x20\144\x61\164\141"); return; } } else { $this->fault("\123\x4f\x41\120\x2d\105\x4e\126\x3a\x43\154\x69\145\x6e\x74", "\124\150\x69\163\40\x53\145\x72\166\x65\162\x20\x64\157\x65\163\40\x6e\x6f\x74\x20\x73\x75\160\x70\157\x72\164\40\x63\x6f\155\160\162\x65\x73\x73\145\144\x20\x64\141\164\x61"); return; } } } $this->request .= "\xd\12" . $data; $data = $this->parseRequest($this->headers, $data); $this->requestSOAP = $data; $this->debug("\x6c\x65\x61\x76\x69\x6e\147\40\160\141\162\x73\145\x5f\x72\145\x71\165\x65\x73\x74"); } function invoke_method() { $this->debug("\x69\x6e\x20\151\x6e\166\x6f\153\145\137\155\145\164\150\x6f\144\x2c\x20\x6d\x65\164\x68\x6f\x64\156\141\x6d\145\75" . $this->methodname . "\x20\x6d\145\164\150\x6f\x64\x55\x52\x49\x3d" . $this->methodURI . "\x20\123\117\x41\120\101\143\x74\x69\157\156\x3d" . $this->SOAPAction); $orig_methodname = $this->methodname; if ($this->wsdl) { if ($this->opData = $this->wsdl->getOperationData($this->methodname)) { $this->debug("\x69\156\x20\x69\x6e\166\157\x6b\x65\137\155\x65\164\x68\x6f\144\x2c\40\146\157\x75\x6e\x64\40\127\x53\104\x4c\x20\157\160\145\x72\141\164\x69\157\x6e\x3d" . $this->methodname); $this->appendDebug("\157\160\x44\x61\164\141\75" . $this->varDump($this->opData)); } elseif ($this->opData = $this->wsdl->getOperationDataForSoapAction($this->SOAPAction)) { $this->debug("\x69\x6e\40\151\x6e\x76\157\x6b\x65\137\155\x65\164\150\157\x64\x2c\x20\146\x6f\x75\156\x64\40\127\123\104\x4c\40\163\157\x61\160\101\143\x74\x69\157\x6e\75" . $this->SOAPAction . "\x20\146\x6f\x72\x20\x6f\x70\145\x72\141\x74\151\x6f\x6e\75" . $this->opData["\x6e\x61\x6d\x65"]); $this->appendDebug("\157\x70\x44\141\164\141\x3d" . $this->varDump($this->opData)); $this->methodname = $this->opData["\156\141\155\145"]; } else { $this->debug("\x69\x6e\x20\x69\x6e\166\x6f\153\x65\137\155\x65\164\150\157\144\x2c\40\156\157\40\x57\x53\x44\x4c\40\146\x6f\162\40\x6f\160\x65\162\141\x74\151\x6f\156\75" . $this->methodname); $this->fault("\123\x4f\101\120\55\105\116\126\x3a\103\154\151\x65\x6e\x74", "\x4f\x70\145\x72\x61\x74\x69\x6f\156\40\47" . $this->methodname . "\47\40\x69\x73\40\156\x6f\164\x20\144\x65\146\x69\x6e\x65\x64\x20\x69\156\40\164\150\x65\x20\127\123\x44\x4c\40\146\157\162\x20\x74\150\151\163\40\163\145\162\x76\x69\x63\x65"); return; } } else { $this->debug("\x69\x6e\x20\151\x6e\x76\x6f\x6b\145\137\x6d\145\164\150\157\x64\x2c\x20\x6e\157\x20\x57\x53\104\114\x20\164\157\x20\x76\141\x6c\x69\144\141\164\x65\x20\155\145\164\x68\157\x64"); } if (strpos($this->methodname, "\56\56") > 0) { $delim = "\56\56"; } elseif (strpos($this->methodname, "\56") > 0) { $delim = "\56"; } else { $delim = ''; } $this->debug("\x69\156\40\151\x6e\166\157\x6b\145\137\155\145\x74\150\x6f\x64\54\40\144\145\154\x69\155\75{$delim}"); $class = ''; $method = ''; if (strlen($delim) > 0 && substr_count($this->methodname, $delim) == 1) { $try_class = substr($this->methodname, 0, strpos($this->methodname, $delim)); if (class_exists($try_class)) { $class = $try_class; $method = substr($this->methodname, strpos($this->methodname, $delim) + strlen($delim)); $this->debug("\x69\156\40\x69\x6e\x76\157\153\x65\x5f\x6d\145\164\x68\157\144\54\40\x63\x6c\x61\x73\x73\x3d{$class}\x20\x6d\145\x74\150\157\144\x3d{$method}\40\144\x65\154\x69\155\x3d{$delim}"); } else { $this->debug("\x69\156\40\x69\x6e\166\x6f\153\x65\137\155\145\x74\150\x6f\144\x2c\40\143\x6c\141\163\x73\75{$try_class}\x20\156\157\164\x20\x66\x6f\x75\156\x64"); } } elseif (strlen($delim) > 0 && substr_count($this->methodname, $delim) > 1) { $split = explode($delim, $this->methodname); $method = array_pop($split); $class = implode("\x5c", $split); } else { $try_class = ''; $this->debug("\151\x6e\40\x69\156\166\x6f\153\145\137\x6d\x65\x74\x68\157\x64\54\x20\156\x6f\x20\143\x6c\x61\163\x73\x20\x74\157\40\x74\x72\171"); } if ($class == '') { if (!function_exists($this->methodname)) { $this->debug("\x69\156\x20\x69\x6e\166\x6f\x6b\x65\137\155\x65\x74\150\157\x64\x2c\x20\146\x75\x6e\143\164\x69\157\156\40\x27{$this->methodname}\47\40\x6e\x6f\164\x20\x66\x6f\165\156\x64\x21"); $this->result = "\x66\141\165\154\164\x3a\40\x6d\145\164\150\x6f\144\40\156\x6f\x74\x20\x66\157\165\156\144"; $this->fault("\x53\x4f\x41\120\x2d\105\116\126\x3a\x43\154\x69\x65\x6e\x74", "\x6d\x65\x74\150\x6f\x64\x20\47{$this->methodname}\47\50\47{$orig_methodname}\x27\51\40\x6e\x6f\x74\40\x64\x65\x66\x69\156\145\144\40\x69\x6e\x20\x73\x65\162\166\x69\143\x65\x28\x27{$try_class}\x27\40\47{$delim}\x27\x29"); return; } } else { $method_to_compare = substr(phpversion(), 0, 2) == "\x34\56" ? strtolower($method) : $method; if (!in_array($method_to_compare, get_class_methods($class))) { $this->debug("\x69\x6e\40\x69\156\x76\157\153\x65\137\155\x65\x74\x68\x6f\x64\54\x20\x6d\x65\x74\x68\157\x64\40\x27{$this->methodname}\47\x20\x6e\x6f\164\x20\146\x6f\x75\x6e\x64\40\151\156\40\x63\154\141\163\x73\x20\x27{$class}\x27\x21"); $this->result = "\146\x61\165\x6c\x74\72\40\155\145\x74\150\x6f\x64\40\x6e\157\164\40\146\157\165\156\x64"; $this->fault("\x53\117\x41\120\55\x45\x4e\126\72\103\x6c\x69\x65\x6e\x74", "\x6d\145\164\x68\x6f\x64\x20\x27{$this->methodname}\x27\x2f\x27{$method_to_compare}\x27\x28\x27{$orig_methodname}\x27\x29\40\156\x6f\164\40\144\145\x66\151\x6e\145\x64\x20\x69\x6e\x20\163\x65\x72\166\151\x63\145\57\x27{$class}\x27\50\x27{$try_class}\x27\x20\x27{$delim}\47\x29"); return; } } if (!$this->verify_method($this->methodname, $this->methodparams)) { $this->debug("\105\122\x52\117\122\x3a\x20\162\145\x71\x75\x65\x73\x74\40\x6e\x6f\x74\40\166\145\x72\x69\146\151\145\x64\40\x61\x67\x61\x69\156\163\x74\x20\155\x65\164\x68\x6f\x64\40\163\x69\x67\156\x61\164\x75\162\145"); $this->result = "\x66\141\x75\x6c\164\72\x20\x72\145\x71\x75\145\x73\x74\40\x66\141\151\x6c\x65\x64\x20\x76\141\154\x69\x64\x61\x74\151\157\156\40\x61\147\141\151\x6e\x73\x74\40\x6d\145\164\150\157\x64\x20\163\151\x67\156\141\164\165\x72\145"; $this->fault("\x53\x4f\101\120\55\x45\116\126\72\x43\154\151\x65\x6e\164", "\117\160\x65\x72\141\164\x69\x6f\x6e\x20\x27{$this->methodname}\47\40\x6e\157\x74\x20\144\x65\146\151\156\x65\144\40\x69\x6e\40\163\x65\162\x76\x69\x63\145\56"); return; } $this->debug("\x69\x6e\x20\151\156\166\x6f\x6b\145\137\155\x65\164\150\157\x64\x2c\x20\x70\141\162\141\x6d\x73\x3a"); $this->appendDebug($this->varDump($this->methodparams)); $this->debug("\151\x6e\x20\151\156\166\x6f\x6b\145\x5f\155\x65\164\150\157\x64\54\40\143\141\x6c\x6c\x69\x6e\147\40\47{$this->methodname}\x27"); if (!function_exists("\143\x61\x6c\x6c\x5f\x75\163\145\x72\137\x66\165\156\x63\137\141\x72\x72\141\171")) { if ($class == '') { $this->debug("\151\x6e\x20\151\156\x76\157\x6b\x65\137\x6d\145\x74\x68\x6f\x64\x2c\x20\143\x61\x6c\x6c\x69\x6e\147\40\x66\x75\156\143\x74\151\x6f\156\x20\165\x73\151\x6e\x67\40\x65\166\x61\x6c\50\x29"); $funcCall = "\x24\x74\150\151\163\55\76\x6d\x65\164\x68\x6f\144\162\x65\164\x75\162\156\40\x3d\x20{$this->methodname}\50"; } else { if ($delim == "\56\x2e") { $this->debug("\x69\x6e\x20\151\x6e\x76\x6f\153\145\137\155\x65\x74\150\157\144\x2c\x20\143\x61\x6c\x6c\x69\x6e\x67\40\x63\154\x61\x73\x73\x20\155\145\164\150\157\144\40\165\163\x69\x6e\x67\40\x65\166\141\x6c\x28\x29"); $funcCall = "\44\164\150\x69\163\x2d\76\155\x65\x74\150\x6f\x64\162\145\x74\165\x72\156\40\75\x20" . $class . "\72\72" . $method . "\50"; } else { $this->debug("\151\x6e\x20\x69\156\x76\157\153\145\137\155\x65\164\x68\x6f\144\x2c\40\143\141\x6c\154\x69\x6e\147\40\151\156\163\164\141\156\x63\x65\x20\x6d\145\164\150\157\x64\x20\165\x73\x69\156\x67\x20\145\166\x61\154\x28\51"); $instname = "\x24\151\156\163\164\x5f" . time(); $funcCall = $instname . "\40\x3d\x20\x6e\x65\167\x20" . $class . "\x28\x29\x3b\x20"; $funcCall .= "\44\164\x68\151\163\55\x3e\155\x65\x74\150\x6f\x64\x72\145\x74\x75\x72\156\40\75\40" . $instname . "\x2d\x3e" . $method . "\50"; } } if ($this->methodparams) { foreach ($this->methodparams as $param) { if (is_array($param) || is_object($param)) { $this->fault("\x53\x4f\101\120\x2d\x45\x4e\x56\72\103\x6c\151\x65\156\x74", "\116\x75\x53\x4f\101\120\40\144\x6f\x65\163\40\156\157\x74\x20\x68\141\x6e\x64\154\x65\40\143\157\x6d\x70\154\x65\x78\124\x79\160\x65\40\x70\x61\162\x61\155\x65\164\x65\162\163\x20\143\x6f\x72\x72\x65\x63\164\x6c\x79\40\167\150\x65\156\x20\x75\x73\x69\156\x67\x20\x65\x76\x61\154\x3b\40\143\141\154\154\x5f\x75\163\145\x72\137\146\x75\156\x63\137\141\162\162\141\x79\x20\155\x75\x73\164\40\142\145\40\x61\166\x61\x69\x6c\x61\142\x6c\x65"); return; } $funcCall .= "\42{$param}\x22\x2c"; } $funcCall = substr($funcCall, 0, -1); } $funcCall .= "\x29\73"; $this->debug("\151\x6e\40\x69\x6e\x76\157\x6b\x65\x5f\x6d\x65\x74\150\x6f\x64\x2c\40\146\x75\x6e\x63\x74\x69\157\156\40\143\141\x6c\154\72\40" . $funcCall); @eval($funcCall); } else { if ($class == '') { $this->debug("\x69\x6e\x20\x69\x6e\166\157\x6b\145\137\x6d\145\164\150\x6f\144\54\x20\x63\x61\154\x6c\151\156\147\x20\146\x75\x6e\143\164\151\157\156\x20\165\x73\151\156\x67\40\143\141\154\154\137\x75\x73\x65\x72\x5f\146\x75\156\x63\137\x61\162\x72\x61\x79\x28\x29"); $call_arg = "{$this->methodname}"; } elseif ($delim == "\56\x2e") { $this->debug("\151\x6e\x20\x69\x6e\x76\x6f\x6b\145\137\x6d\145\x74\150\x6f\144\x2c\x20\x63\141\x6c\x6c\151\156\x67\x20\143\154\x61\x73\x73\40\x6d\x65\164\x68\157\x64\40\x75\163\x69\156\147\x20\143\x61\x6c\154\137\165\x73\145\162\137\x66\x75\156\143\137\x61\162\162\x61\x79\50\51"); $call_arg = array($class, $method); } else { $this->debug("\151\156\40\151\x6e\x76\157\x6b\x65\x5f\155\x65\x74\x68\157\144\x2c\40\x63\141\154\154\x69\156\147\40\x69\156\x73\x74\x61\156\143\x65\x20\155\145\164\150\x6f\144\x20\x75\x73\x69\156\147\x20\x63\x61\x6c\154\137\165\163\x65\162\137\146\165\156\143\137\x61\x72\x72\x61\171\x28\51"); $instance = new $class(); $call_arg = array(&$instance, $method); } if (is_array($this->methodparams)) { $this->methodreturn = call_user_func_array($call_arg, array_values($this->methodparams)); } else { $this->methodreturn = call_user_func_array($call_arg, array()); } } $this->debug("\x69\156\40\151\x6e\166\157\x6b\145\x5f\x6d\x65\164\x68\157\x64\54\x20\x6d\145\x74\x68\157\x64\162\145\164\x75\x72\x6e\x3a"); $this->appendDebug($this->varDump($this->methodreturn)); $this->debug("\151\x6e\40\151\x6e\166\157\153\145\137\155\x65\164\x68\157\144\54\x20\143\141\154\154\x65\x64\x20\x6d\x65\164\150\x6f\144\40{$this->methodname}\x2c\40\162\x65\143\145\151\x76\145\144\x20\x64\x61\x74\141\40\157\x66\x20\164\x79\x70\x65\40" . gettype($this->methodreturn)); } function serialize_return() { $this->debug("\x45\x6e\x74\145\162\x69\x6e\x67\40\163\145\162\151\141\154\151\172\145\137\x72\145\164\x75\x72\156\40\x6d\x65\164\150\x6f\144\156\141\155\145\x3a\40" . $this->methodname . "\40\x6d\145\164\x68\157\144\x55\122\111\72\40" . $this->methodURI); if (isset($this->methodreturn) && is_object($this->methodreturn) && (get_class($this->methodreturn) == "\163\x6f\141\160\x5f\x66\x61\165\154\164" || get_class($this->methodreturn) == "\x6e\165\163\157\141\x70\x5f\x66\x61\165\154\x74")) { $this->debug("\x67\x6f\164\x20\141\40\x66\141\x75\154\164\x20\x6f\142\x6a\145\x63\164\40\146\x72\x6f\x6d\40\155\145\164\150\x6f\x64"); $this->fault = $this->methodreturn; return; } elseif ($this->methodreturnisliteralxml) { $return_val = $this->methodreturn; } else { $this->debug("\x67\157\164\x20\141\50\156\51\40" . gettype($this->methodreturn) . "\40\x66\x72\157\155\40\155\x65\x74\150\x6f\x64"); $this->debug("\163\145\162\151\141\x6c\x69\x7a\x69\x6e\147\40\162\145\x74\165\x72\x6e\40\x76\141\x6c\x75\145"); if ($this->wsdl) { if (sizeof($this->opData["\157\x75\164\x70\165\164"]["\160\141\x72\x74\x73"]) > 1) { $this->debug("\155\157\x72\145\x20\x74\x68\141\156\x20\x6f\x6e\x65\x20\157\x75\x74\160\165\x74\40\x70\x61\162\x74\54\40\x73\x6f\x20\x75\163\x65\x20\x74\150\145\40\x6d\145\x74\150\x6f\144\x20\162\x65\x74\165\x72\x6e\40\x75\156\x63\150\141\x6e\147\145\x64"); $opParams = $this->methodreturn; } elseif (sizeof($this->opData["\157\165\164\x70\x75\164"]["\x70\141\162\164\x73"]) == 1) { $this->debug("\x65\x78\x61\x63\x74\154\x79\40\x6f\156\145\x20\x6f\x75\x74\x70\165\164\x20\160\x61\x72\164\54\40\x73\x6f\x20\x77\x72\x61\x70\x20\164\x68\x65\x20\x6d\145\x74\x68\x6f\x64\40\x72\145\x74\x75\162\156\x20\x69\x6e\40\x61\40\x73\x69\x6d\160\x6c\x65\40\141\x72\162\141\x79"); $opParams = array($this->methodreturn); } $opParams = isset($opParams) ? $opParams : array(); $return_val = $this->wsdl->serializeRPCParameters($this->methodname, "\157\165\164\160\165\x74", $opParams); $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); if ($errstr = $this->wsdl->getError()) { $this->debug("\147\157\164\x20\167\163\x64\x6c\40\x65\162\x72\157\x72\72\x20" . $errstr); $this->fault("\x53\x4f\x41\120\55\105\116\x56\72\123\x65\x72\166\145\162", "\x75\x6e\141\x62\154\x65\40\x74\157\x20\x73\145\x72\151\x61\154\151\172\145\x20\x72\x65\163\x75\154\x74"); return; } } else { if (isset($this->methodreturn)) { $return_val = $this->serialize_val($this->methodreturn, "\162\x65\164\165\x72\x6e"); } else { $return_val = ''; $this->debug("\x69\156\x20\141\142\x73\145\x6e\143\145\40\x6f\x66\40\127\123\104\114\54\x20\141\x73\x73\x75\155\145\40\x76\157\151\144\40\x72\145\x74\x75\162\x6e\x20\x66\x6f\162\x20\142\141\x63\153\x77\141\x72\x64\40\x63\157\155\160\141\x74\151\142\x69\x6c\x69\x74\171"); } } } $this->debug("\x72\145\x74\x75\162\156\x20\x76\x61\154\165\x65\72"); $this->appendDebug($this->varDump($return_val)); $this->debug("\x73\x65\162\151\141\154\x69\172\151\156\147\x20\x72\145\x73\160\157\x6e\x73\x65"); if ($this->wsdl) { $this->debug("\x68\x61\x76\145\40\127\x53\104\x4c\x20\146\x6f\162\40\163\x65\162\151\x61\x6c\151\x7a\x61\x74\151\157\156\72\x20\163\x74\x79\x6c\x65\x20\151\163\40" . $this->opData["\163\164\171\154\x65"]); if ($this->opData["\163\164\171\x6c\145"] == "\x72\x70\143") { $this->debug("\x73\x74\171\x6c\145\40\151\x73\x20\x72\160\143\40\146\x6f\x72\x20\163\x65\x72\151\141\x6c\x69\x7a\x61\x74\151\x6f\156\72\40\165\x73\x65\40\151\163\40" . $this->opData["\157\x75\x74\x70\x75\164"]["\165\163\x65"]); if ($this->opData["\157\165\164\160\x75\x74"]["\x75\x73\x65"] == "\154\x69\x74\x65\162\x61\154") { if ($this->methodURI) { $payload = "\74\156\163\61\x3a" . $this->methodname . "\x52\145\163\160\x6f\156\x73\x65\x20\170\155\154\156\x73\72\x6e\x73\61\75\42" . $this->methodURI . "\42\x3e" . $return_val . "\74\57\x6e\x73\x31\x3a" . $this->methodname . "\x52\x65\x73\160\x6f\x6e\163\145\x3e"; } else { $payload = "\x3c" . $this->methodname . "\x52\145\163\x70\157\x6e\x73\145\x3e" . $return_val . "\x3c\57" . $this->methodname . "\x52\145\x73\x70\x6f\x6e\x73\145\76"; } } else { if ($this->methodURI) { $payload = "\74\156\x73\x31\72" . $this->methodname . "\x52\145\163\x70\157\x6e\163\145\x20\x78\155\x6c\x6e\163\x3a\156\x73\x31\75\42" . $this->methodURI . "\42\76" . $return_val . "\x3c\57\156\163\x31\72" . $this->methodname . "\x52\145\163\x70\157\156\x73\x65\76"; } else { $payload = "\74" . $this->methodname . "\x52\145\x73\x70\157\156\163\145\x3e" . $return_val . "\74\57" . $this->methodname . "\122\x65\163\160\157\x6e\x73\x65\x3e"; } } } else { $this->debug("\x73\164\x79\x6c\145\40\151\x73\x20\156\157\164\40\x72\160\x63\40\x66\157\x72\40\163\x65\x72\x69\141\x6c\151\x7a\141\x74\151\157\x6e\72\x20\141\163\x73\165\155\145\x20\144\x6f\x63\165\155\145\x6e\164"); $payload = $return_val; } } else { $this->debug("\144\x6f\x20\x6e\x6f\164\x20\150\141\166\145\40\x57\123\104\x4c\40\x66\x6f\162\x20\x73\145\162\x69\x61\154\151\x7a\141\164\151\157\x6e\72\40\141\163\x73\165\155\145\x20\162\x70\143\57\145\156\x63\x6f\x64\145\x64"); $payload = "\74\x6e\163\x31\72" . $this->methodname . "\x52\145\163\160\157\156\163\x65\40\170\x6d\x6c\x6e\163\72\156\x73\61\75\42" . $this->methodURI . "\42\76" . $return_val . "\x3c\57\156\163\x31\72" . $this->methodname . "\122\145\163\160\x6f\156\163\x65\x3e"; } $this->result = "\163\165\x63\143\145\x73\x73\146\165\154"; if ($this->wsdl) { $this->appendDebug($this->wsdl->getDebug()); if (isset($this->opData["\x6f\165\164\x70\165\164"]["\145\156\x63\x6f\x64\x69\x6e\147\123\164\x79\154\145"])) { $encodingStyle = $this->opData["\157\165\164\x70\165\164"]["\x65\x6e\x63\x6f\144\151\156\x67\123\164\x79\154\x65"]; } else { $encodingStyle = ''; } $this->responseSOAP = $this->serializeEnvelope($payload, $this->responseHeaders, $this->wsdl->usedNamespaces, $this->opData["\x73\164\x79\x6c\x65"], $this->opData["\x6f\x75\x74\160\165\164"]["\165\163\145"], $encodingStyle); } else { $this->responseSOAP = $this->serializeEnvelope($payload, $this->responseHeaders); } $this->debug("\114\145\x61\166\151\156\x67\40\x73\x65\x72\x69\x61\154\151\x7a\145\137\x72\145\164\165\162\156"); } function send_response() { $this->debug("\x45\156\164\145\x72\40\163\x65\x6e\x64\137\162\145\x73\x70\x6f\x6e\163\145"); if ($this->fault) { $payload = $this->fault->serialize(); $this->outgoing_headers[] = "\110\124\124\120\57\x31\56\x30\x20\x35\60\x30\x20\x49\156\x74\145\x72\156\x61\154\x20\123\145\162\166\x65\162\x20\105\162\x72\157\162"; $this->outgoing_headers[] = "\123\x74\x61\164\165\x73\72\40\x35\x30\60\x20\x49\156\164\145\162\156\x61\154\x20\x53\x65\x72\x76\x65\162\x20\105\162\x72\x6f\162"; } else { $payload = $this->responseSOAP; } if (isset($this->debug_flag) && $this->debug_flag) { $payload .= $this->getDebugAsXMLComment(); } $this->outgoing_headers[] = "\x53\145\x72\166\145\162\x3a\x20{$this->title}\x20\123\x65\162\166\145\x72\40\166{$this->version}"; preg_match("\57\x5c\44\122\145\166\x69\163\151\157" . "\156\72\40\x28\133\x5e\40\135\53\51\57", $this->revision, $rev); $this->outgoing_headers[] = "\130\x2d\x53\117\101\120\x2d\123\x65\162\166\x65\162\72\40{$this->title}\57{$this->version}\40\x28" . $rev[1] . "\x29"; $payload = $this->getHTTPBody($payload); $type = $this->getHTTPContentType(); $charset = $this->getHTTPContentTypeCharset(); $this->outgoing_headers[] = "\x43\x6f\x6e\164\145\156\164\55\x54\x79\160\x65\x3a\40{$type}" . ($charset ? "\x3b\x20\143\x68\x61\162\163\145\164\75" . $charset : ''); if (strlen($payload) > 1024 && isset($this->headers) && isset($this->headers["\x61\x63\143\145\160\164\x2d\x65\x6e\x63\157\144\x69\x6e\x67"])) { if (strstr($this->headers["\141\143\x63\x65\x70\164\x2d\145\156\x63\x6f\x64\151\x6e\147"], "\x67\x7a\151\160")) { if (function_exists("\x67\172\x65\x6e\x63\157\x64\145")) { if (isset($this->debug_flag) && $this->debug_flag) { $payload .= "\74\x21\x2d\x2d\40\103\157\x6e\164\145\x6e\x74\x20\x62\145\151\156\x67\40\x67\x7a\151\160\x70\x65\144\x20\55\55\76"; } $this->outgoing_headers[] = "\x43\157\156\164\145\x6e\x74\55\105\156\x63\x6f\x64\151\156\147\x3a\40\x67\172\x69\x70"; $payload = gzencode($payload); } else { if (isset($this->debug_flag) && $this->debug_flag) { $payload .= "\74\x21\55\x2d\x20\x43\157\x6e\x74\145\156\164\x20\x77\x69\x6c\154\x20\156\157\164\40\x62\x65\40\147\x7a\x69\x70\x70\x65\x64\x3a\40\156\x6f\x20\147\x7a\145\x6e\143\x6f\x64\145\x20\x2d\x2d\x3e"; } } } elseif (strstr($this->headers["\141\143\143\x65\x70\164\x2d\x65\x6e\143\157\x64\x69\x6e\x67"], "\144\145\x66\x6c\x61\x74\x65")) { if (function_exists("\147\172\144\x65\x66\x6c\141\164\145")) { if (isset($this->debug_flag) && $this->debug_flag) { $payload .= "\74\41\55\x2d\40\103\x6f\156\x74\145\156\x74\x20\142\x65\x69\x6e\147\40\144\x65\x66\154\141\164\x65\144\40\x2d\x2d\x3e"; } $this->outgoing_headers[] = "\x43\157\156\164\x65\156\x74\x2d\x45\x6e\x63\157\144\x69\156\147\72\40\x64\145\146\154\141\x74\x65"; $payload = gzdeflate($payload); } else { if (isset($this->debug_flag) && $this->debug_flag) { $payload .= "\74\41\55\55\40\103\157\156\164\x65\156\164\x20\x77\x69\x6c\x6c\x20\156\x6f\164\x20\x62\x65\x20\x64\145\x66\x6c\x61\x74\x65\x64\72\40\x6e\x6f\40\147\172\x63\x6f\155\x70\162\x65\163\163\x20\x2d\55\x3e"; } } } } $this->outgoing_headers[] = "\103\157\156\x74\145\156\164\x2d\x4c\145\x6e\147\x74\x68\x3a\40" . strlen($payload); reset($this->outgoing_headers); foreach ($this->outgoing_headers as $hdr) { header($hdr, false); } print $payload; $this->response = join("\xd\12", $this->outgoing_headers) . "\15\12\15\xa" . $payload; } function verify_method($operation, $request) { if (isset($this->wsdl) && is_object($this->wsdl)) { if ($this->wsdl->getOperationData($operation)) { return true; } } elseif (isset($this->operations[$operation])) { return true; } return false; } function parseRequest($headers, $data) { $this->debug("\x45\156\164\145\x72\x69\x6e\147\x20\x70\141\162\x73\145\122\x65\x71\x75\145\163\x74\50\x29\40\x66\x6f\162\x20\x64\141\x74\141\40\157\146\40\154\145\x6e\x67\164\x68\x20" . strlen($data) . "\40\150\145\x61\144\145\x72\163\72"); $this->appendDebug($this->varDump($headers)); if (!isset($headers["\x63\157\156\x74\x65\x6e\x74\x2d\164\171\x70\145"])) { $this->setError("\x52\145\x71\x75\145\x73\x74\x20\x6e\157\164\40\157\146\x20\164\171\x70\145\40" . $this->contentType . "\x20\x28\x6e\x6f\40\143\x6f\156\x74\145\156\164\55\x74\171\x70\145\x20\x68\145\141\144\x65\x72\51"); return false; } if (!strstr($headers["\143\x6f\x6e\x74\x65\x6e\164\x2d\164\171\160\x65"], $this->contentType)) { $this->setError("\122\x65\161\x75\145\x73\x74\x20\156\x6f\164\40\157\x66\x20\164\x79\x70\145\40" . $this->contentType . "\72\x20" . $headers["\143\157\x6e\164\x65\x6e\164\55\x74\x79\160\145"]); return false; } if (strpos($headers["\143\x6f\x6e\x74\145\156\x74\x2d\x74\171\x70\145"], "\75")) { $enc = str_replace("\42", '', substr(strstr($headers["\x63\157\156\x74\x65\x6e\x74\x2d\x74\x79\160\x65"], "\x3d"), 1)); $this->debug("\107\x6f\164\x20\x72\145\x73\x70\157\156\163\145\x20\x65\156\143\x6f\x64\x69\156\x67\x3a\x20" . $enc); if (preg_match("\57\136\50\111\x53\117\55\x38\x38\65\71\x2d\x31\x7c\x55\x53\x2d\x41\123\103\x49\111\174\125\x54\106\55\70\51\x24\x2f\x69", $enc)) { $this->xml_encoding = strtoupper($enc); } else { $this->xml_encoding = "\x55\x53\55\101\123\103\x49\x49"; } } else { $this->xml_encoding = "\x49\123\117\55\70\70\65\71\x2d\61"; } $this->debug("\x55\163\145\x20\145\156\143\x6f\x64\x69\x6e\147\x3a\x20" . $this->xml_encoding . "\40\167\x68\x65\x6e\40\143\162\x65\141\x74\151\156\x67\x20\x6e\165\163\x6f\141\160\137\160\x61\162\x73\145\162"); $parser = new nusoap_parser($data, $this->xml_encoding, '', $this->decode_utf8); $this->debug("\x70\141\162\163\145\162\x20\144\145\x62\x75\147\72\40\xa" . $parser->getDebug()); if ($err = $parser->getError()) { $this->result = "\146\x61\x75\x6c\164\72\40\x65\x72\162\x6f\162\x20\x69\156\x20\155\x73\x67\x20\x70\x61\162\163\x69\x6e\x67\72\x20" . $err; $this->fault("\x53\x4f\x41\x50\x2d\105\116\126\x3a\103\x6c\x69\145\x6e\x74", "\x65\x72\x72\157\162\x20\151\156\x20\155\163\147\x20\x70\141\162\163\151\156\x67\x3a\12" . $err); } else { $this->methodURI = $parser->root_struct_namespace; $this->methodname = $parser->root_struct_name; $this->debug("\155\x65\164\150\157\x64\156\141\x6d\x65\72\x20" . $this->methodname . "\x20\155\145\x74\150\x6f\144\x55\122\111\x3a\40" . $this->methodURI); $this->debug("\x63\141\154\154\151\x6e\147\x20\x70\x61\162\163\145\162\55\76\x67\145\164\x5f\163\157\x61\160\x62\157\144\171\50\51"); $this->methodparams = $parser->get_soapbody(); $this->requestHeaders = $parser->getHeaders(); $this->requestHeader = $parser->get_soapheader(); $this->document = $parser->document; } } function getHTTPBody($soapmsg) { return $soapmsg; } function getHTTPContentType() { return "\164\145\x78\164\57\x78\x6d\154"; } function getHTTPContentTypeCharset() { return $this->soap_defencoding; } function add_to_map($methodname, $in, $out) { $this->operations[$methodname] = array("\156\x61\155\x65" => $methodname, "\x69\x6e" => $in, "\157\165\164" => $out); } function register($name, $in = array(), $out = array(), $namespace = false, $soapaction = false, $style = false, $use = false, $documentation = '', $encodingStyle = '') { global $HTTP_SERVER_VARS; if ($this->externalWSDLURL) { die("\x59\157\165\x20\143\x61\x6e\x6e\157\x74\40\x62\x69\x6e\x64\x20\x74\x6f\x20\x61\x6e\x20\145\x78\164\x65\x72\156\x61\x6c\40\x57\123\x44\114\40\x66\x69\x6c\145\x2c\40\141\156\144\40\x72\x65\147\151\163\164\x65\x72\40\155\145\x74\x68\x6f\144\x73\40\x6f\x75\164\163\151\x64\145\x20\157\146\x20\x69\x74\x21\x20\120\154\145\141\163\145\40\x63\150\x6f\x6f\163\145\x20\145\151\x74\150\x65\x72\40\127\123\104\114\40\157\x72\40\x6e\157\40\127\123\104\x4c\56"); } if (!$name) { die("\x59\157\x75\40\x6d\x75\163\x74\x20\163\x70\145\143\151\146\x79\x20\x61\40\x6e\141\x6d\x65\40\x77\x68\145\156\40\171\157\165\40\x72\x65\x67\151\x73\164\x65\x72\40\141\156\40\x6f\x70\145\162\141\164\151\157\156"); } if (!is_array($in)) { die("\131\x6f\x75\x20\x6d\x75\x73\164\x20\x70\x72\x6f\x76\x69\144\x65\x20\141\156\x20\141\x72\162\141\171\x20\146\x6f\x72\40\x6f\x70\145\x72\x61\x74\x69\x6f\156\x20\x69\156\160\x75\x74\163"); } if (!is_array($out)) { die("\131\157\165\40\x6d\165\163\x74\x20\x70\162\157\x76\x69\144\145\40\141\x6e\40\141\x72\162\141\171\x20\x66\157\162\x20\x6f\x70\x65\162\x61\164\x69\157\156\x20\x6f\165\164\160\x75\x74\x73"); } if (false == $namespace) { } if (false == $soapaction) { if (isset($_SERVER)) { $SERVER_NAME = $_SERVER["\x53\x45\x52\126\105\x52\x5f\116\101\x4d\x45"]; $SCRIPT_NAME = isset($_SERVER["\120\110\x50\x5f\123\105\114\x46"]) ? $_SERVER["\x50\110\x50\x5f\123\105\114\106"] : $_SERVER["\x53\103\122\111\120\x54\137\116\101\115\105"]; $HTTPS = isset($_SERVER["\x48\x54\x54\x50\x53"]) ? $_SERVER["\x48\124\x54\x50\123"] : (isset($HTTP_SERVER_VARS["\x48\124\x54\120\x53"]) ? $HTTP_SERVER_VARS["\x48\x54\124\x50\123"] : "\x6f\x66\146"); } elseif (isset($HTTP_SERVER_VARS)) { $SERVER_NAME = $HTTP_SERVER_VARS["\x53\105\122\126\x45\x52\137\116\x41\115\x45"]; $SCRIPT_NAME = isset($HTTP_SERVER_VARS["\x50\x48\x50\x5f\x53\105\114\106"]) ? $HTTP_SERVER_VARS["\120\x48\120\137\x53\x45\x4c\x46"] : $HTTP_SERVER_VARS["\x53\x43\x52\x49\120\x54\x5f\x4e\x41\115\x45"]; $HTTPS = isset($HTTP_SERVER_VARS["\110\124\x54\x50\x53"]) ? $HTTP_SERVER_VARS["\110\x54\124\x50\123"] : "\x6f\x66\146"; } else { $this->setError("\116\145\151\x74\150\145\x72\40\137\123\105\122\126\x45\122\40\x6e\157\x72\40\110\x54\124\x50\137\123\x45\x52\x56\x45\x52\137\x56\x41\x52\123\40\x69\x73\x20\141\166\141\x69\154\x61\x62\154\x65"); } if ($HTTPS == "\61" || $HTTPS == "\x6f\156") { $SCHEME = "\150\x74\x74\160\x73"; } else { $SCHEME = "\x68\164\x74\x70"; } $soapaction = "{$SCHEME}\72\57\x2f{$SERVER_NAME}{$SCRIPT_NAME}\57{$name}"; } if (false == $style) { $style = "\x72\160\143"; } if (false == $use) { $use = "\x65\x6e\143\x6f\144\145\x64"; } if ($use == "\x65\x6e\x63\x6f\144\x65\x64" && $encodingStyle == '') { $encodingStyle = "\150\164\164\x70\72\x2f\57\163\x63\150\x65\155\141\163\x2e\170\155\x6c\163\x6f\141\x70\x2e\x6f\x72\147\57\x73\x6f\x61\160\57\x65\x6e\x63\157\x64\x69\156\147\57"; } $this->operations[$name] = array("\x6e\141\155\145" => $name, "\x69\156" => $in, "\x6f\x75\x74" => $out, "\x6e\x61\155\145\163\160\141\143\145" => $namespace, "\x73\157\x61\160\141\x63\164\x69\x6f\156" => $soapaction, "\163\x74\171\154\x65" => $style); if ($this->wsdl) { $this->wsdl->addOperation($name, $in, $out, $namespace, $soapaction, $style, $use, $documentation, $encodingStyle); } return true; } function fault($faultcode, $faultstring, $faultactor = '', $faultdetail = '') { if ($faultdetail == '' && $this->debug_flag) { $faultdetail = $this->getDebug(); } $this->fault = new nusoap_fault($faultcode, $faultactor, $faultstring, $faultdetail); $this->fault->soap_defencoding = $this->soap_defencoding; } function configureWSDL($serviceName, $namespace = false, $endpoint = false, $style = "\x72\160\143", $transport = "\x68\164\x74\x70\x3a\57\x2f\x73\x63\150\x65\155\141\x73\x2e\x78\155\154\163\157\141\160\x2e\x6f\162\x67\57\163\x6f\x61\160\57\150\164\x74\160", $schemaTargetNamespace = false) { global $HTTP_SERVER_VARS; if (isset($_SERVER)) { $SERVER_NAME = $_SERVER["\x53\x45\122\126\105\122\x5f\x4e\x41\x4d\105"]; $SERVER_PORT = $_SERVER["\123\x45\x52\x56\x45\122\137\x50\117\x52\x54"]; $SCRIPT_NAME = isset($_SERVER["\x50\110\x50\x5f\123\x45\114\x46"]) ? $_SERVER["\x50\x48\120\137\123\x45\114\x46"] : $_SERVER["\123\x43\122\x49\120\x54\x5f\x4e\101\x4d\x45"]; $HTTPS = isset($_SERVER["\110\124\x54\x50\x53"]) ? $_SERVER["\110\x54\124\120\123"] : (isset($HTTP_SERVER_VARS["\110\x54\124\x50\123"]) ? $HTTP_SERVER_VARS["\110\124\124\x50\123"] : "\x6f\x66\x66"); } elseif (isset($HTTP_SERVER_VARS)) { $SERVER_NAME = $HTTP_SERVER_VARS["\123\x45\122\126\x45\x52\137\116\x41\x4d\x45"]; $SERVER_PORT = $HTTP_SERVER_VARS["\x53\105\122\126\x45\122\x5f\x50\117\122\124"]; $SCRIPT_NAME = isset($HTTP_SERVER_VARS["\120\x48\x50\x5f\123\x45\114\106"]) ? $HTTP_SERVER_VARS["\x50\110\x50\x5f\x53\x45\x4c\106"] : $HTTP_SERVER_VARS["\x53\103\x52\x49\120\124\x5f\x4e\x41\x4d\x45"]; $HTTPS = isset($HTTP_SERVER_VARS["\x48\124\124\120\x53"]) ? $HTTP_SERVER_VARS["\110\124\x54\120\123"] : "\157\x66\x66"; } else { $this->setError("\x4e\145\151\x74\x68\x65\162\40\137\x53\105\122\x56\105\x52\x20\x6e\157\x72\40\110\124\x54\x50\x5f\123\x45\x52\126\105\122\x5f\x56\x41\122\x53\x20\x69\x73\x20\141\x76\141\x69\x6c\141\x62\154\x65"); } $colon = strpos($SERVER_NAME, "\72"); if ($colon) { $SERVER_NAME = substr($SERVER_NAME, 0, $colon); } if ($SERVER_PORT == 80) { $SERVER_PORT = ''; } else { $SERVER_PORT = "\x3a" . $SERVER_PORT; } if (false == $namespace) { $namespace = "\150\164\x74\160\x3a\57\x2f{$SERVER_NAME}\57\x73\x6f\141\160\57{$serviceName}"; } if (false == $endpoint) { if ($HTTPS == "\x31" || $HTTPS == "\157\x6e") { $SCHEME = "\150\164\x74\x70\163"; } else { $SCHEME = "\150\164\x74\160"; } $endpoint = "{$SCHEME}\72\57\x2f{$SERVER_NAME}{$SERVER_PORT}{$SCRIPT_NAME}"; } if (false == $schemaTargetNamespace) { $schemaTargetNamespace = $namespace; } $this->wsdl = new wsdl(); $this->wsdl->serviceName = $serviceName; $this->wsdl->endpoint = $endpoint; $this->wsdl->namespaces["\x74\156\163"] = $namespace; $this->wsdl->namespaces["\163\157\141\160"] = "\x68\164\x74\x70\x3a\x2f\x2f\163\x63\x68\145\155\x61\x73\x2e\x78\155\154\x73\157\141\x70\56\x6f\x72\147\57\x77\163\x64\154\x2f\163\x6f\141\x70\57"; $this->wsdl->namespaces["\167\x73\x64\x6c"] = "\150\164\x74\160\x3a\57\x2f\x73\x63\150\145\155\141\163\56\170\155\154\163\x6f\141\x70\x2e\157\162\x67\x2f\167\x73\x64\x6c\57"; if ($schemaTargetNamespace != $namespace) { $this->wsdl->namespaces["\x74\171\160\x65\x73"] = $schemaTargetNamespace; } $this->wsdl->schemas[$schemaTargetNamespace][0] = new nusoap_xmlschema('', '', $this->wsdl->namespaces); if ($style == "\x64\157\x63\165\155\x65\156\x74") { $this->wsdl->schemas[$schemaTargetNamespace][0]->schemaInfo["\x65\154\145\155\x65\156\x74\x46\157\162\x6d\104\x65\146\x61\x75\x6c\164"] = "\x71\x75\141\x6c\151\146\x69\145\x64"; } $this->wsdl->schemas[$schemaTargetNamespace][0]->schemaTargetNamespace = $schemaTargetNamespace; $this->wsdl->schemas[$schemaTargetNamespace][0]->imports["\x68\164\164\x70\72\57\57\163\143\150\145\155\141\x73\56\170\x6d\154\x73\x6f\x61\x70\56\157\162\147\x2f\163\x6f\x61\x70\57\145\x6e\143\x6f\144\x69\156\x67\57"][0] = array("\154\x6f\143\141\164\x69\x6f\156" => '', "\x6c\157\141\x64\x65\x64" => true); $this->wsdl->schemas[$schemaTargetNamespace][0]->imports["\150\x74\x74\160\x3a\57\57\x73\x63\150\145\155\x61\x73\56\x78\x6d\154\x73\157\141\x70\x2e\157\x72\147\x2f\x77\163\144\154\x2f"][0] = array("\x6c\157\x63\141\x74\x69\157\156" => '', "\x6c\157\x61\144\145\x64" => true); $this->wsdl->bindings[$serviceName . "\x42\151\x6e\x64\151\x6e\x67"] = array("\156\x61\155\145" => $serviceName . "\x42\151\156\144\151\x6e\x67", "\x73\164\171\x6c\x65" => $style, "\164\162\x61\x6e\x73\x70\x6f\x72\x74" => $transport, "\160\x6f\162\164\124\x79\x70\x65" => $serviceName . "\x50\x6f\x72\164\x54\171\x70\x65"); $this->wsdl->ports[$serviceName . "\120\x6f\x72\x74"] = array("\x62\151\156\144\151\x6e\147" => $serviceName . "\102\151\156\144\151\156\x67", "\154\x6f\143\x61\164\151\x6f\x6e" => $endpoint, "\x62\x69\x6e\144\x69\x6e\147\124\171\160\x65" => "\150\164\164\x70\x3a\57\57\x73\x63\x68\145\155\141\x73\x2e\170\155\x6c\163\x6f\x61\x70\x2e\157\162\147\57\167\163\144\x6c\57\163\157\141\160\57"); } } goto Tk5CC; FtQQM: class soap_parser extends nusoap_parser { } goto ymb00; gM6vj: function iso8601_to_timestamp($datestr) { $pattern = "\57" . "\x28\x5b\x30\x2d\71\135\x7b\64\175\x29\55" . "\50\133\x30\x2d\x39\135\173\x32\x7d\x29\55" . "\50\133\60\55\x39\x5d\173\62\x7d\51" . "\124" . "\50\133\60\x2d\x39\x5d\173\62\175\x29\x3a" . "\x28\133\x30\55\x39\x5d\x7b\x32\x7d\51\x3a" . "\50\133\60\x2d\71\x5d\173\x32\175\51\50\x5c\x2e\133\x30\55\x39\135\x2b\51\77" . "\x28\x5a\174\133\53\134\x2d\x5d\x5b\60\55\71\x5d\x7b\62\175\x3a\x3f\133\60\55\x39\135\x7b\x32\x7d\51\x3f" . "\57"; if (preg_match($pattern, $datestr, $regs)) { if ($regs[8] != "\x5a") { $op = substr($regs[8], 0, 1); $h = substr($regs[8], 1, 2); $m = substr($regs[8], strlen($regs[8]) - 2, 2); if ($op == "\x2d") { $regs[4] = $regs[4] + $h; $regs[5] = $regs[5] + $m; } elseif ($op == "\x2b") { $regs[4] = $regs[4] - $h; $regs[5] = $regs[5] - $m; } } return gmmktime($regs[4], $regs[5], $regs[6], $regs[2], $regs[3], $regs[1]); } else { return false; } } goto q810M; q810M: function usleepWindows($usec) { $start = gettimeofday(); do { $stop = gettimeofday(); $timePassed = 1000000 * ($stop["\163\145\x63"] - $start["\x73\145\x63"]) + $stop["\165\x73\x65\143"] - $start["\x75\x73\145\143"]; } while ($timePassed < $usec); } goto wj8up; gxvWz: if (!extension_loaded("\x73\x6f\x61\x70")) { class soapclient extends EndPointClient { } } goto ojYRB; EX9BA: class wsdl extends nusoap_base { var $wsdl; var $schemas = array(); var $currentSchema; var $message = array(); var $complexTypes = array(); var $messages = array(); var $currentMessage; var $currentOperation; var $portTypes = array(); var $currentPortType; var $bindings = array(); var $currentBinding; var $ports = array(); var $currentPort; var $opData = array(); var $status = ''; var $documentation = false; var $endpoint = ''; var $import = array(); var $parser; var $position = 0; var $depth = 0; var $depth_array = array(); var $proxyhost = ''; var $proxyport = ''; var $proxyusername = ''; var $proxypassword = ''; var $timeout = 0; var $response_timeout = 30; var $curl_options = array(); var $use_curl = false; var $username = ''; var $password = ''; var $authtype = ''; var $certRequest = array(); function __construct($wsdl = '', $proxyhost = false, $proxyport = false, $proxyusername = false, $proxypassword = false, $timeout = 0, $response_timeout = 30, $curl_options = null, $use_curl = false) { parent::__construct(); $this->debug("\143\164\157\162\40\x77\x73\144\154\75{$wsdl}\40\x74\151\x6d\x65\x6f\165\x74\x3d{$timeout}\x20\162\145\x73\x70\x6f\156\163\145\137\164\151\155\145\157\x75\x74\75{$response_timeout}"); $this->proxyhost = $proxyhost; $this->proxyport = $proxyport; $this->proxyusername = $proxyusername; $this->proxypassword = $proxypassword; $this->timeout = $timeout; $this->response_timeout = $response_timeout; if (is_array($curl_options)) { $this->curl_options = $curl_options; } $this->use_curl = $use_curl; $this->fetchWSDL($wsdl); } function fetchWSDL($wsdl) { $this->debug("\x70\141\x72\163\145\x20\141\156\144\40\x70\x72\157\x63\x65\163\x73\x20\127\x53\x44\x4c\40\x70\141\x74\x68\x3d{$wsdl}"); $this->wsdl = $wsdl; if ($this->wsdl != '') { $this->parseWSDL($this->wsdl); } $imported_urls = array(); $imported = 1; while ($imported > 0) { $imported = 0; foreach ($this->schemas as $ns => $list) { foreach ($list as $xs) { $wsdlparts = parse_url($this->wsdl); foreach ($xs->imports as $ns2 => $list2) { for ($ii = 0; $ii < count($list2); $ii++) { if (array_key_exists($ii, $list2) && !isset($list2[$ii]["\154\x6f\x61\x64\145\144"])) { $this->schemas[$ns][$ns2]->imports[$ns2][$ii]["\x6c\157\x61\144\145\x64"] = true; $url = $list2[$ii]["\x6c\157\x63\x61\164\x69\157\156"]; if ($url != '') { $urlparts = parse_url($url); if (!isset($urlparts["\150\x6f\163\x74"])) { $url = $wsdlparts["\163\143\x68\145\155\145"] . "\72\x2f\x2f" . $wsdlparts["\x68\157\163\x74"] . (isset($wsdlparts["\x70\157\x72\164"]) ? "\x3a" . $wsdlparts["\x70\x6f\x72\x74"] : '') . substr($wsdlparts["\160\141\x74\150"], 0, strrpos($wsdlparts["\160\x61\164\150"], "\x2f") + 1) . $urlparts["\x70\x61\x74\x68"]; } if (!in_array($url, $imported_urls)) { $this->parseWSDL($url); $imported++; $imported_urls[] = $url; } } else { $this->debug("\125\x6e\145\170\x70\x65\x63\x74\145\144\x20\x73\x63\145\x6e\x61\x72\151\157\x3a\x20\x65\155\160\x74\x79\x20\x55\x52\114\40\x66\x6f\162\40\165\156\x6c\157\x61\144\x65\144\40\x69\x6d\x70\x6f\x72\164"); } } } } } } $wsdlparts = parse_url($this->wsdl); foreach ($this->import as $ns => $list) { for ($ii = 0; $ii < count($list); $ii++) { if (!$list[$ii]["\x6c\x6f\x61\x64\145\x64"]) { $this->import[$ns][$ii]["\154\x6f\141\x64\x65\x64"] = true; $url = $list[$ii]["\154\x6f\x63\x61\x74\x69\157\156"]; if ($url != '') { $urlparts = parse_url($url); if (!isset($urlparts["\150\x6f\x73\164"])) { $url = $wsdlparts["\163\143\150\145\155\x65"] . "\72\57\57" . $wsdlparts["\150\x6f\x73\164"] . (isset($wsdlparts["\160\157\162\x74"]) ? "\x3a" . $wsdlparts["\x70\x6f\162\164"] : '') . substr($wsdlparts["\x70\x61\x74\x68"], 0, strrpos($wsdlparts["\x70\141\164\150"], "\57") + 1) . $urlparts["\x70\141\x74\150"]; } if (!in_array($url, $imported_urls)) { $this->parseWSDL($url); $imported++; $imported_urls[] = $url; } } else { $this->debug("\x55\156\145\170\160\x65\x63\x74\x65\x64\x20\x73\143\x65\x6e\x61\162\x69\157\x3a\x20\x65\155\x70\x74\171\x20\125\122\114\40\x66\157\162\40\165\x6e\154\x6f\x61\x64\145\x64\x20\x69\x6d\x70\x6f\162\x74"); } } } } } foreach ($this->bindings as $binding => $bindingData) { if (isset($bindingData["\157\x70\145\162\141\164\151\x6f\x6e\163"]) && is_array($bindingData["\157\x70\145\162\141\164\x69\x6f\156\163"])) { foreach ($bindingData["\x6f\x70\x65\x72\x61\x74\x69\x6f\156\163"] as $operation => $data) { $this->debug("\x70\157\163\x74\x2d\160\x61\x72\163\145\40\144\x61\x74\141\x20\147\x61\x74\150\x65\x72\151\x6e\x67\40\x66\157\x72\x20" . $operation); $this->bindings[$binding]["\157\160\145\x72\141\x74\151\x6f\156\x73"][$operation]["\151\x6e\160\165\164"] = isset($this->bindings[$binding]["\x6f\160\145\162\141\164\151\157\x6e\x73"][$operation]["\x69\156\x70\165\x74"]) ? array_merge($this->bindings[$binding]["\x6f\160\145\x72\x61\164\x69\x6f\x6e\163"][$operation]["\151\x6e\x70\x75\164"], $this->portTypes[$bindingData["\160\157\x72\x74\124\171\x70\x65"]][$operation]["\151\x6e\160\x75\x74"]) : $this->portTypes[$bindingData["\x70\x6f\162\164\124\171\160\145"]][$operation]["\x69\x6e\160\x75\164"]; $this->bindings[$binding]["\x6f\160\x65\x72\141\164\151\157\156\x73"][$operation]["\x6f\165\x74\160\x75\x74"] = isset($this->bindings[$binding]["\157\x70\145\162\x61\x74\151\157\156\x73"][$operation]["\x6f\x75\164\160\165\x74"]) ? array_merge($this->bindings[$binding]["\x6f\x70\145\x72\141\164\x69\x6f\156\163"][$operation]["\x6f\x75\x74\160\165\164"], $this->portTypes[$bindingData["\160\x6f\x72\x74\124\171\x70\145"]][$operation]["\x6f\x75\x74\160\165\x74"]) : $this->portTypes[$bindingData["\160\x6f\162\164\124\171\x70\x65"]][$operation]["\157\165\164\x70\165\x74"]; if (isset($this->messages[$this->bindings[$binding]["\157\160\145\162\141\x74\x69\157\x6e\163"][$operation]["\151\x6e\x70\165\x74"]["\155\145\163\x73\141\147\x65"]])) { $this->bindings[$binding]["\x6f\160\145\162\141\164\151\x6f\156\163"][$operation]["\x69\156\160\x75\x74"]["\x70\141\x72\164\x73"] = $this->messages[$this->bindings[$binding]["\157\160\x65\x72\141\164\151\x6f\156\x73"][$operation]["\151\156\x70\x75\164"]["\155\x65\163\163\141\147\145"]]; } if (isset($this->messages[$this->bindings[$binding]["\x6f\x70\145\162\x61\x74\x69\x6f\156\163"][$operation]["\157\x75\x74\160\165\164"]["\155\145\x73\163\x61\147\145"]])) { $this->bindings[$binding]["\x6f\x70\x65\x72\141\x74\x69\x6f\156\x73"][$operation]["\x6f\165\164\x70\165\x74"]["\x70\x61\162\164\163"] = $this->messages[$this->bindings[$binding]["\157\160\x65\x72\141\x74\151\157\156\163"][$operation]["\x6f\x75\164\x70\x75\164"]["\x6d\145\163\163\141\147\x65"]]; } if (isset($bindingData["\163\164\x79\154\145"]) && !isset($this->bindings[$binding]["\157\160\x65\162\x61\164\x69\x6f\x6e\163"][$operation]["\x73\x74\x79\x6c\145"])) { $this->bindings[$binding]["\x6f\x70\145\162\x61\x74\151\x6f\x6e\163"][$operation]["\x73\x74\x79\x6c\x65"] = $bindingData["\163\164\171\154\x65"]; } $this->bindings[$binding]["\x6f\160\x65\162\141\164\x69\x6f\x6e\x73"][$operation]["\x74\162\141\x6e\x73\x70\157\162\x74"] = isset($bindingData["\164\x72\141\x6e\x73\160\x6f\162\164"]) ? $bindingData["\x74\162\x61\156\x73\160\x6f\162\164"] : ''; $this->bindings[$binding]["\x6f\160\x65\162\141\164\x69\x6f\x6e\x73"][$operation]["\144\x6f\x63\x75\155\145\156\x74\141\x74\x69\x6f\x6e"] = isset($this->portTypes[$bindingData["\x70\157\x72\164\x54\171\160\x65"]][$operation]["\x64\x6f\143\165\x6d\x65\156\x74\x61\x74\x69\157\156"]) ? $this->portTypes[$bindingData["\x70\x6f\162\x74\124\x79\160\145"]][$operation]["\144\157\143\x75\x6d\145\156\x74\x61\164\151\157\x6e"] : ''; $this->bindings[$binding]["\157\x70\x65\162\x61\x74\151\x6f\156\163"][$operation]["\x65\156\x64\160\157\x69\156\x74"] = isset($bindingData["\x65\156\x64\x70\157\151\156\164"]) ? $bindingData["\145\156\144\160\x6f\x69\x6e\x74"] : ''; } } } } function parseWSDL($wsdl = '') { $this->debug("\x70\x61\x72\163\145\40\127\x53\x44\x4c\x20\x61\164\x20\x70\141\164\150\75{$wsdl}"); if ($wsdl == '') { $this->debug("\156\157\40\167\x73\144\154\x20\x70\x61\x73\x73\x65\x64\x20\x74\157\x20\x70\x61\162\163\145\x57\x53\104\114\50\x29\x21\41"); $this->setError("\x6e\x6f\40\167\x73\144\x6c\40\x70\x61\x73\x73\145\x64\40\164\x6f\40\160\141\x72\x73\x65\127\123\104\x4c\x28\x29\x21\41"); return false; } $wsdl_props = parse_url($wsdl); if (isset($wsdl_props["\x73\x63\150\x65\155\x65"]) && ($wsdl_props["\x73\143\150\145\155\x65"] == "\x68\164\164\160" || $wsdl_props["\163\x63\150\145\x6d\145"] == "\150\x74\x74\x70\163")) { $this->debug("\x67\x65\164\164\x69\x6e\147\40\x57\x53\104\114\x20\x68\x74\164\160\x28\163\x29\40\125\122\114\x20" . $wsdl); $tr = new soap_transport_http($wsdl, $this->curl_options, $this->use_curl); $tr->request_method = "\x47\x45\124"; $tr->useSOAPAction = false; if ($this->proxyhost && $this->proxyport) { $tr->setProxy($this->proxyhost, $this->proxyport, $this->proxyusername, $this->proxypassword); } if ($this->authtype != '') { $tr->setCredentials($this->username, $this->password, $this->authtype, array(), $this->certRequest); } $tr->setEncoding("\147\x7a\151\x70\54\x20\144\x65\146\x6c\141\x74\145"); $wsdl_string = $tr->send('', $this->timeout, $this->response_timeout); $this->appendDebug($tr->getDebug()); if ($err = $tr->getError()) { $errstr = "\x47\x65\164\x74\x69\x6e\x67\x20" . $wsdl . "\40\x2d\x20\x48\x54\124\x50\40\105\122\122\x4f\x52\x3a\x20" . $err; $this->debug($errstr); $this->setError($errstr); unset($tr); return false; } unset($tr); $this->debug("\x67\x6f\164\x20\x57\123\104\x4c\40\125\122\x4c"); } else { if (isset($wsdl_props["\163\x63\x68\145\155\145"]) && $wsdl_props["\x73\x63\x68\145\155\145"] == "\x66\151\x6c\145" && isset($wsdl_props["\x70\x61\x74\150"])) { $path = isset($wsdl_props["\150\157\163\x74"]) ? $wsdl_props["\150\157\163\164"] . "\72" . $wsdl_props["\160\141\164\x68"] : $wsdl_props["\x70\x61\164\x68"]; } else { $path = $wsdl; } $this->debug("\147\x65\164\x74\x69\156\x67\x20\127\123\x44\x4c\40\x66\151\x6c\x65\40" . $path); if ($fp = @fopen($path, "\162")) { $wsdl_string = ''; while ($data = fread($fp, 32768)) { $wsdl_string .= $data; } fclose($fp); } else { $errstr = "\x42\x61\144\40\x70\x61\164\150\40\x74\x6f\40\127\x53\104\114\40\146\x69\x6c\x65\x20{$path}"; $this->debug($errstr); $this->setError($errstr); return false; } } $this->debug("\x50\141\x72\163\x65\40\x57\x53\104\x4c"); $this->parser = xml_parser_create(); xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, 0); xml_set_object($this->parser, $this); xml_set_element_handler($this->parser, "\x73\x74\141\162\x74\x5f\145\154\145\x6d\145\x6e\x74", "\145\156\x64\x5f\x65\154\x65\155\145\156\164"); xml_set_character_data_handler($this->parser, "\143\x68\x61\162\x61\143\164\x65\162\137\x64\x61\164\x61"); if (!xml_parse($this->parser, $wsdl_string, true)) { $errstr = sprintf("\130\115\114\40\x65\x72\x72\x6f\162\40\160\141\x72\163\151\x6e\147\40\127\123\x44\114\40\x66\x72\157\155\40\45\x73\40\x6f\x6e\x20\154\151\156\145\x20\x25\144\x3a\40\45\163", $wsdl, xml_get_current_line_number($this->parser), xml_error_string(xml_get_error_code($this->parser))); $this->debug($errstr); $this->debug("\130\115\x4c\x20\160\141\171\154\x6f\x61\x64\x3a\xa" . $wsdl_string); $this->setError($errstr); xml_parser_free($this->parser); unset($this->parser); return false; } xml_parser_free($this->parser); unset($this->parser); $this->debug("\x50\141\162\163\x69\x6e\147\40\x57\123\x44\x4c\x20\x64\157\156\145"); if ($this->getError()) { return false; } return true; } function start_element($parser, $name, $attrs) { if ($this->status == "\x73\x63\x68\145\155\141") { $this->currentSchema->schemaStartElement($parser, $name, $attrs); $this->appendDebug($this->currentSchema->getDebug()); $this->currentSchema->clearDebug(); } elseif (preg_match("\x2f\163\x63\150\x65\155\x61\x24\x2f", $name)) { $this->debug("\x50\141\x72\x73\x69\156\x67\x20\x57\123\x44\114\40\x73\x63\x68\145\x6d\x61"); $this->status = "\163\143\x68\x65\155\141"; $this->currentSchema = new nusoap_xmlschema('', '', $this->namespaces); $this->currentSchema->schemaStartElement($parser, $name, $attrs); $this->appendDebug($this->currentSchema->getDebug()); $this->currentSchema->clearDebug(); } else { $pos = $this->position++; $depth = $this->depth++; $this->depth_array[$depth] = $pos; $this->message[$pos] = array("\143\x64\141\x74\141" => ''); if (count($attrs) > 0) { foreach ($attrs as $k => $v) { if (preg_match("\57\x5e\170\155\x6c\156\163\x2f", $k)) { if ($ns_prefix = substr(strrchr($k, "\72"), 1)) { $this->namespaces[$ns_prefix] = $v; } else { $this->namespaces["\156\x73" . (count($this->namespaces) + 1)] = $v; } if ($v == "\x68\x74\x74\x70\72\57\57\167\x77\167\56\x77\x33\56\x6f\162\x67\x2f\x32\x30\x30\61\57\x58\115\x4c\x53\143\x68\145\x6d\x61" || $v == "\150\x74\x74\x70\72\57\x2f\167\x77\167\x2e\x77\x33\56\x6f\162\147\57\61\x39\71\x39\57\x58\115\114\123\143\x68\x65\155\141" || $v == "\150\164\x74\160\72\57\57\167\x77\167\x2e\167\63\x2e\x6f\x72\147\x2f\x32\60\x30\x30\x2f\x31\60\57\x58\x4d\114\x53\143\x68\x65\155\x61") { $this->XMLSchemaVersion = $v; $this->namespaces["\170\x73\151"] = $v . "\x2d\151\156\x73\x74\141\x6e\143\x65"; } } } foreach ($attrs as $k => $v) { $k = strpos($k, "\72") ? $this->expandQname($k) : $k; if ($k != "\154\x6f\x63\141\164\151\157\156" && $k != "\163\157\x61\x70\x41\x63\x74\x69\x6f\156" && $k != "\156\141\155\145\x73\x70\x61\x63\145") { $v = strpos($v, "\x3a") ? $this->expandQname($v) : $v; } $eAttrs[$k] = $v; } $attrs = $eAttrs; } else { $attrs = array(); } $prefix = ''; $namespace = ''; if (preg_match("\57\72\x2f", $name)) { $prefix = substr($name, 0, strpos($name, "\x3a")); $namespace = isset($this->namespaces[$prefix]) ? $this->namespaces[$prefix] : ''; $name = substr(strstr($name, "\x3a"), 1); } switch ($this->status) { case "\x6d\145\x73\163\141\147\x65": if ($name == "\x70\x61\x72\x74") { if (isset($attrs["\x74\171\160\145"])) { $this->debug("\x6d\163\147\40" . $this->currentMessage . "\x3a\40\146\157\x75\156\x64\40\x70\x61\162\x74\x20\50\x77\x69\164\150\40\x74\x79\160\145\51\40{$attrs["\156\x61\x6d\x65"]}\72\x20" . implode("\54", $attrs)); $this->messages[$this->currentMessage][$attrs["\x6e\x61\x6d\145"]] = $attrs["\164\171\x70\145"]; } if (isset($attrs["\145\154\x65\155\x65\x6e\164"])) { $this->debug("\155\x73\147\40" . $this->currentMessage . "\x3a\40\x66\x6f\165\x6e\x64\40\x70\141\162\164\40\x28\167\151\164\x68\x20\145\x6c\x65\155\x65\x6e\x74\x29\40{$attrs["\x6e\141\155\145"]}\x3a\x20" . implode("\x2c", $attrs)); $this->messages[$this->currentMessage][$attrs["\156\x61\155\145"]] = $attrs["\x65\154\x65\155\145\156\164"] . "\136"; } } break; case "\x70\157\x72\x74\x54\x79\x70\145": switch ($name) { case "\157\160\x65\x72\141\x74\151\x6f\156": $this->currentPortOperation = $attrs["\156\141\155\x65"]; $this->debug("\x70\157\162\x74\124\x79\160\x65\40{$this->currentPortType}\40\x6f\160\x65\x72\141\164\x69\157\x6e\72\40{$this->currentPortOperation}"); if (isset($attrs["\x70\x61\x72\141\155\145\164\145\x72\x4f\x72\144\145\162"])) { $this->portTypes[$this->currentPortType][$attrs["\156\141\155\145"]]["\160\141\x72\141\x6d\145\x74\x65\x72\117\162\x64\145\162"] = $attrs["\160\x61\162\x61\x6d\145\164\145\162\117\x72\x64\145\162"]; } break; case "\x64\157\143\x75\155\x65\x6e\x74\141\x74\151\x6f\156": $this->documentation = true; break; default: $m = isset($attrs["\155\145\163\163\x61\x67\x65"]) ? $this->getLocalPart($attrs["\155\145\163\163\x61\x67\x65"]) : ''; $this->portTypes[$this->currentPortType][$this->currentPortOperation][$name]["\155\145\163\x73\x61\147\x65"] = $m; break; } break; case "\x62\151\x6e\x64\x69\x6e\147": switch ($name) { case "\x62\151\x6e\144\x69\156\147": if (isset($attrs["\x73\164\171\154\x65"])) { $this->bindings[$this->currentBinding]["\x70\x72\x65\146\151\x78"] = $prefix; } $this->bindings[$this->currentBinding] = array_merge($this->bindings[$this->currentBinding], $attrs); break; case "\x68\145\x61\x64\x65\162": $this->bindings[$this->currentBinding]["\157\160\x65\162\141\x74\151\x6f\156\x73"][$this->currentOperation][$this->opStatus]["\x68\x65\141\x64\x65\162\163"][] = $attrs; break; case "\157\160\145\x72\x61\164\151\x6f\x6e": if (isset($attrs["\163\x6f\x61\x70\x41\x63\x74\x69\x6f\156"])) { $this->bindings[$this->currentBinding]["\x6f\x70\145\x72\141\164\x69\x6f\156\163"][$this->currentOperation]["\x73\157\x61\x70\x41\x63\164\151\157\156"] = $attrs["\x73\x6f\141\160\101\143\164\151\x6f\156"]; } if (isset($attrs["\163\164\171\x6c\x65"])) { $this->bindings[$this->currentBinding]["\157\160\x65\x72\x61\x74\151\157\156\x73"][$this->currentOperation]["\163\164\171\x6c\x65"] = $attrs["\x73\x74\171\x6c\x65"]; } if (isset($attrs["\156\x61\x6d\145"])) { $this->currentOperation = $attrs["\x6e\141\x6d\x65"]; $this->debug("\x63\x75\x72\x72\x65\156\x74\40\x62\151\x6e\x64\x69\x6e\x67\40\x6f\160\145\162\x61\x74\x69\157\156\72\x20{$this->currentOperation}"); $this->bindings[$this->currentBinding]["\x6f\160\x65\162\x61\x74\x69\157\156\x73"][$this->currentOperation]["\156\x61\x6d\145"] = $attrs["\156\141\155\x65"]; $this->bindings[$this->currentBinding]["\157\160\145\162\x61\x74\151\157\156\163"][$this->currentOperation]["\x62\151\156\144\151\x6e\x67"] = $this->currentBinding; $this->bindings[$this->currentBinding]["\x6f\x70\x65\162\x61\164\151\x6f\x6e\x73"][$this->currentOperation]["\x65\x6e\144\x70\x6f\151\x6e\164"] = isset($this->bindings[$this->currentBinding]["\x65\x6e\144\160\x6f\151\156\x74"]) ? $this->bindings[$this->currentBinding]["\145\x6e\x64\x70\x6f\151\x6e\164"] : ''; } break; case "\151\156\160\x75\164": $this->opStatus = "\x69\x6e\160\165\x74"; break; case "\x6f\165\164\160\x75\164": $this->opStatus = "\157\165\164\160\x75\x74"; break; case "\x62\157\144\171": if (isset($this->bindings[$this->currentBinding]["\x6f\160\x65\x72\141\x74\x69\x6f\156\x73"][$this->currentOperation][$this->opStatus])) { $this->bindings[$this->currentBinding]["\157\160\145\x72\141\164\x69\157\156\x73"][$this->currentOperation][$this->opStatus] = array_merge($this->bindings[$this->currentBinding]["\x6f\160\x65\x72\141\x74\151\157\x6e\x73"][$this->currentOperation][$this->opStatus], $attrs); } else { $this->bindings[$this->currentBinding]["\157\x70\145\162\141\164\x69\x6f\x6e\163"][$this->currentOperation][$this->opStatus] = $attrs; } break; } break; case "\163\145\162\x76\x69\143\145": switch ($name) { case "\160\x6f\162\164": $this->currentPort = $attrs["\x6e\141\155\145"]; $this->debug("\143\165\x72\x72\145\x6e\x74\40\160\157\x72\x74\x3a\40" . $this->currentPort); $this->ports[$this->currentPort]["\x62\151\156\x64\x69\x6e\x67"] = $this->getLocalPart($attrs["\142\x69\x6e\x64\151\x6e\147"]); break; case "\x61\144\144\162\x65\163\163": $this->ports[$this->currentPort]["\154\x6f\143\x61\x74\151\157\156"] = $attrs["\x6c\157\x63\141\164\151\x6f\x6e"]; $this->ports[$this->currentPort]["\142\151\156\144\x69\156\x67\x54\x79\x70\x65"] = $namespace; $this->bindings[$this->ports[$this->currentPort]["\x62\x69\x6e\144\151\156\147"]]["\142\151\156\144\x69\x6e\x67\x54\x79\x70\145"] = $namespace; $this->bindings[$this->ports[$this->currentPort]["\142\x69\156\x64\151\156\x67"]]["\145\x6e\x64\160\157\151\x6e\164"] = $attrs["\154\157\143\x61\x74\x69\x6f\156"]; break; } break; } switch ($name) { case "\151\x6d\160\157\x72\164": if (isset($attrs["\x6c\157\143\x61\164\x69\x6f\x6e"])) { $this->import[$attrs["\156\x61\155\145\x73\160\x61\143\145"]][] = array("\154\x6f\x63\x61\x74\151\157\156" => $attrs["\x6c\157\x63\x61\164\151\157\x6e"], "\x6c\x6f\x61\144\145\x64" => false); $this->debug("\160\x61\x72\x73\151\x6e\x67\40\151\x6d\160\x6f\162\x74\40" . $attrs["\x6e\141\155\x65\163\160\141\143\145"] . "\x20\55\40" . $attrs["\x6c\157\143\x61\164\x69\x6f\x6e"] . "\40\x28" . count($this->import[$attrs["\x6e\x61\x6d\145\x73\x70\x61\x63\x65"]]) . "\x29"); } else { $this->import[$attrs["\156\x61\x6d\145\x73\160\x61\143\x65"]][] = array("\154\157\143\141\164\x69\157\x6e" => '', "\x6c\157\x61\144\x65\x64" => true); if (!$this->getPrefixFromNamespace($attrs["\156\141\155\145\x73\160\x61\143\145"])) { $this->namespaces["\x6e\x73" . (count($this->namespaces) + 1)] = $attrs["\156\141\x6d\145\163\x70\x61\x63\x65"]; } $this->debug("\160\x61\x72\163\151\x6e\x67\x20\x69\155\160\x6f\162\164\x20" . $attrs["\x6e\x61\x6d\x65\163\x70\x61\x63\x65"] . "\40\55\40\x5b\x6e\157\40\154\157\x63\x61\164\x69\x6f\x6e\135\x20\50" . count($this->import[$attrs["\156\141\x6d\x65\163\160\x61\x63\x65"]]) . "\x29"); } break; case "\155\x65\163\x73\x61\147\145": $this->status = "\155\145\163\x73\141\x67\145"; $this->messages[$attrs["\x6e\141\x6d\x65"]] = array(); $this->currentMessage = $attrs["\x6e\141\155\x65"]; break; case "\x70\157\x72\164\124\x79\160\145": $this->status = "\x70\x6f\162\164\124\x79\160\145"; $this->portTypes[$attrs["\156\x61\155\x65"]] = array(); $this->currentPortType = $attrs["\x6e\141\155\x65"]; break; case "\142\x69\x6e\x64\x69\156\147": if (isset($attrs["\x6e\x61\155\145"])) { if (strpos($attrs["\156\x61\155\145"], "\x3a")) { $this->currentBinding = $this->getLocalPart($attrs["\x6e\x61\x6d\x65"]); } else { $this->currentBinding = $attrs["\156\x61\x6d\145"]; } $this->status = "\142\151\156\144\x69\x6e\147"; $this->bindings[$this->currentBinding]["\160\x6f\x72\x74\124\x79\x70\x65"] = $this->getLocalPart($attrs["\x74\171\160\x65"]); $this->debug("\x63\165\162\162\x65\156\164\40\x62\x69\156\144\x69\156\147\x3a\40{$this->currentBinding}\40\157\x66\40\x70\157\x72\164\x54\x79\160\x65\x3a\40" . $attrs["\164\171\x70\145"]); } break; case "\x73\x65\x72\x76\151\143\x65": $this->serviceName = $attrs["\156\x61\x6d\x65"]; $this->status = "\163\x65\x72\166\151\143\x65"; $this->debug("\x63\165\x72\162\145\156\164\x20\163\145\162\166\151\x63\145\72\40" . $this->serviceName); break; case "\x64\145\146\151\x6e\151\x74\x69\157\x6e\x73": foreach ($attrs as $name => $value) { $this->wsdl_info[$name] = $value; } break; } } } function end_element($parser, $name) { if (preg_match("\57\163\x63\x68\x65\155\141\44\57", $name)) { $this->status = ''; $this->appendDebug($this->currentSchema->getDebug()); $this->currentSchema->clearDebug(); $this->schemas[$this->currentSchema->schemaTargetNamespace][] = $this->currentSchema; $this->debug("\120\141\x72\163\x69\156\147\x20\x57\123\x44\114\x20\163\143\150\x65\x6d\141\40\x64\x6f\x6e\145"); } if ($this->status == "\163\143\x68\145\x6d\141") { $this->currentSchema->schemaEndElement($parser, $name); } else { $this->depth--; } if ($this->documentation) { $this->documentation = false; } } function character_data($parser, $data) { $pos = isset($this->depth_array[$this->depth]) ? $this->depth_array[$this->depth] : 0; if (isset($this->message[$pos]["\x63\144\141\164\x61"])) { $this->message[$pos]["\x63\x64\x61\x74\x61"] .= $data; } if ($this->documentation) { $this->documentation .= $data; } } function setCredentials($username, $password, $authtype = "\142\x61\x73\x69\143", $certRequest = array()) { $this->debug("\163\145\164\103\x72\145\144\145\x6e\x74\151\x61\x6c\x73\40\x75\163\x65\162\x6e\141\155\145\75{$username}\40\141\x75\164\x68\164\171\x70\145\x3d{$authtype}\40\143\145\x72\x74\122\x65\161\x75\145\163\x74\x3d"); $this->appendDebug($this->varDump($certRequest)); $this->username = $username; $this->password = $password; $this->authtype = $authtype; $this->certRequest = $certRequest; } function getBindingData($binding) { if (is_array($this->bindings[$binding])) { return $this->bindings[$binding]; } } function getOperations($portName = '', $bindingType = "\163\x6f\x61\160") { $ops = array(); if ($bindingType == "\163\157\141\x70") { $bindingType = "\150\x74\164\x70\x3a\x2f\57\163\143\150\x65\155\x61\x73\56\170\155\154\163\x6f\141\x70\56\157\162\147\x2f\167\163\x64\154\x2f\x73\157\141\160\57"; } elseif ($bindingType == "\x73\157\x61\160\x31\x32") { $bindingType = "\150\164\164\x70\72\x2f\57\163\x63\150\x65\x6d\x61\x73\x2e\170\x6d\154\x73\x6f\x61\x70\56\157\162\x67\57\x77\163\x64\x6c\x2f\163\157\141\160\61\62\57"; } else { $this->debug("\147\x65\x74\117\x70\x65\x72\141\164\x69\157\x6e\163\40\142\151\x6e\144\x69\156\x67\x54\x79\x70\x65\40{$bindingType}\40\x6d\141\x79\x20\156\157\164\x20\142\x65\x20\163\x75\x70\x70\x6f\162\x74\145\x64"); } $this->debug("\x67\145\164\117\160\145\162\x61\x74\x69\x6f\156\163\40\146\x6f\x72\40\x70\157\x72\x74\x20\47{$portName}\47\x20\142\x69\156\144\151\156\147\x54\171\x70\x65\40{$bindingType}"); foreach ($this->ports as $port => $portData) { $this->debug("\147\x65\164\117\x70\x65\x72\x61\x74\151\x6f\x6e\x73\40\143\150\x65\143\x6b\151\x6e\147\x20\x70\157\162\x74\x20{$port}\40\x62\151\x6e\144\x69\156\147\124\x79\160\145\40" . $portData["\142\151\x6e\x64\151\x6e\x67\x54\171\160\145"]); if ($portName == '' || $port == $portName) { if ($portData["\x62\151\156\x64\x69\156\147\124\171\x70\145"] == $bindingType) { $this->debug("\x67\x65\x74\117\x70\x65\162\x61\x74\151\157\x6e\163\x20\x66\x6f\x75\156\x64\x20\160\x6f\x72\164\x20{$port}\x20\x62\x69\156\x64\151\x6e\147\124\x79\160\145\40{$bindingType}"); if (isset($this->bindings[$portData["\142\x69\156\x64\151\156\x67"]]["\157\x70\145\162\141\x74\151\x6f\x6e\163"])) { $ops = array_merge($ops, $this->bindings[$portData["\x62\x69\x6e\144\151\156\x67"]]["\157\x70\145\x72\x61\164\x69\x6f\x6e\163"]); } } } } if (count($ops) == 0) { $this->debug("\147\145\x74\117\x70\x65\x72\141\x74\x69\157\156\163\40\x66\x6f\x75\x6e\x64\x20\156\157\40\157\x70\145\x72\x61\164\151\x6f\x6e\163\40\146\x6f\162\x20\160\157\x72\x74\40\47{$portName}\47\40\142\x69\x6e\144\151\x6e\147\124\171\x70\145\40{$bindingType}"); } return $ops; } function getOperationData($operation, $bindingType = "\x73\x6f\x61\160") { if ($bindingType == "\163\x6f\x61\160") { $bindingType = "\x68\x74\164\160\72\x2f\57\x73\143\x68\145\155\141\163\56\170\x6d\x6c\163\x6f\141\x70\56\157\x72\147\x2f\167\x73\x64\154\x2f\163\x6f\x61\160\x2f"; } elseif ($bindingType == "\x73\157\141\x70\x31\x32") { $bindingType = "\150\164\x74\160\72\57\57\x73\x63\150\x65\x6d\141\163\x2e\x78\x6d\154\163\157\141\x70\x2e\157\x72\x67\57\167\x73\144\154\57\x73\x6f\141\x70\61\x32\57"; } foreach ($this->ports as $port => $portData) { if ($portData["\x62\x69\x6e\x64\151\x6e\x67\124\x79\160\x65"] == $bindingType) { foreach (array_keys($this->bindings[$portData["\x62\x69\x6e\x64\x69\156\x67"]]["\x6f\160\145\162\x61\x74\x69\x6f\x6e\x73"]) as $bOperation) { if ($operation == $bOperation) { $opData = $this->bindings[$portData["\142\x69\x6e\144\x69\156\147"]]["\157\x70\x65\162\141\x74\151\157\x6e\163"][$operation]; return $opData; } } } } } function getOperationDataForSoapAction($soapAction, $bindingType = "\x73\x6f\x61\x70") { if ($bindingType == "\x73\x6f\141\x70") { $bindingType = "\x68\164\164\160\x3a\57\57\x73\143\x68\145\155\x61\x73\56\170\155\x6c\163\x6f\141\x70\x2e\x6f\162\147\57\167\x73\x64\154\x2f\x73\x6f\x61\160\x2f"; } elseif ($bindingType == "\x73\x6f\141\160\x31\62") { $bindingType = "\x68\164\x74\x70\72\x2f\x2f\x73\x63\150\x65\155\x61\x73\x2e\170\x6d\x6c\x73\157\141\x70\x2e\x6f\x72\x67\x2f\x77\163\144\154\x2f\163\x6f\141\x70\x31\x32\57"; } foreach ($this->ports as $port => $portData) { if ($portData["\142\x69\156\144\151\156\147\x54\x79\x70\145"] == $bindingType) { foreach ($this->bindings[$portData["\142\x69\x6e\x64\151\x6e\147"]]["\157\160\145\162\141\164\151\157\x6e\x73"] as $bOperation => $opData) { if ($opData["\163\x6f\x61\x70\x41\x63\x74\151\157\156"] == $soapAction) { return $opData; } } } } } function getTypeDef($type, $ns) { $this->debug("\151\x6e\40\x67\145\x74\124\x79\x70\x65\x44\x65\146\x3a\x20\164\171\x70\x65\75{$type}\54\x20\x6e\163\75{$ns}"); if (!$ns && isset($this->namespaces["\x74\156\163"])) { $ns = $this->namespaces["\164\156\x73"]; $this->debug("\x69\x6e\x20\147\145\164\124\171\x70\145\104\145\146\x3a\40\164\x79\x70\x65\x20\156\141\155\145\x73\160\x61\x63\145\40\146\x6f\x72\x63\145\144\x20\x74\157\x20{$ns}"); } if (!isset($this->schemas[$ns])) { foreach ($this->schemas as $ns0 => $schema0) { if (strcasecmp($ns, $ns0) == 0) { $this->debug("\151\156\x20\x67\x65\164\124\x79\x70\x65\104\145\x66\x3a\x20\162\x65\160\154\141\x63\x69\156\x67\40\163\x63\150\x65\155\141\x20\156\141\x6d\x65\x73\160\141\143\x65\40{$ns}\40\167\151\x74\150\40{$ns0}"); $ns = $ns0; break; } } } if (isset($this->schemas[$ns])) { $this->debug("\151\x6e\40\147\145\x74\x54\171\160\145\104\x65\146\72\x20\x68\141\x76\145\40\163\143\150\145\x6d\x61\40\146\x6f\162\40\156\141\x6d\x65\163\160\141\x63\145\40{$ns}"); for ($i = 0; $i < count($this->schemas[$ns]); $i++) { $xs =& $this->schemas[$ns][$i]; $t = $xs->getTypeDef($type); $this->appendDebug($xs->getDebug()); $xs->clearDebug(); if ($t) { $this->debug("\151\156\40\x67\x65\x74\124\171\x70\x65\x44\x65\146\x3a\x20\x66\x6f\x75\156\x64\40\x74\171\x70\x65\40{$type}"); if (!isset($t["\x70\x68\x70\124\x79\160\x65"])) { $uqType = substr($t["\164\x79\160\145"], strrpos($t["\x74\171\x70\145"], "\x3a") + 1); $ns = substr($t["\x74\x79\x70\145"], 0, strrpos($t["\x74\171\160\x65"], "\x3a")); $etype = $this->getTypeDef($uqType, $ns); if ($etype) { $this->debug("\146\157\165\x6e\144\40\x74\x79\160\145\x20\x66\x6f\162\x20\x5b\145\x6c\x65\155\145\x6e\164\x5d\x20{$type}\x3a"); $this->debug($this->varDump($etype)); if (isset($etype["\x70\x68\x70\x54\171\x70\x65"])) { $t["\x70\x68\160\x54\x79\x70\x65"] = $etype["\x70\x68\x70\124\x79\160\145"]; } if (isset($etype["\145\154\145\155\x65\x6e\x74\x73"])) { $t["\x65\x6c\145\x6d\x65\x6e\164\x73"] = $etype["\x65\x6c\145\x6d\x65\x6e\164\163"]; } if (isset($etype["\141\164\164\162\x73"])) { $t["\141\x74\164\162\x73"] = $etype["\x61\164\x74\162\x73"]; } } else { $this->debug("\144\151\144\40\156\x6f\x74\x20\146\x69\x6e\144\x20\164\171\x70\145\40\x66\157\x72\x20\133\x65\154\145\x6d\x65\156\164\x5d\40{$type}"); } } return $t; } } $this->debug("\151\156\x20\147\x65\164\124\171\160\145\104\x65\146\x3a\x20\x64\x69\144\x20\x6e\x6f\164\x20\x66\151\156\x64\40\164\171\160\x65\x20{$type}"); } else { $this->debug("\x69\x6e\40\x67\145\x74\x54\171\160\145\104\145\146\x3a\40\144\157\40\x6e\x6f\x74\x20\150\141\166\x65\40\x73\x63\150\x65\x6d\141\x20\x66\157\162\x20\x6e\x61\155\145\163\160\x61\x63\x65\x20{$ns}"); } return false; } function webDescription() { global $HTTP_SERVER_VARS; if (isset($_SERVER)) { $PHP_SELF = $_SERVER["\x50\110\120\137\123\x45\x4c\106"]; } elseif (isset($HTTP_SERVER_VARS)) { $PHP_SELF = $HTTP_SERVER_VARS["\120\110\120\137\x53\105\x4c\106"]; } else { $this->setError("\116\x65\x69\164\x68\145\162\40\137\123\105\122\126\x45\122\40\156\157\162\x20\x48\124\x54\x50\137\x53\105\x52\126\105\122\137\x56\101\x52\x53\x20\x69\x73\40\x61\x76\141\151\x6c\141\x62\154\x65"); } $b = "\xa\11\11\74\150\x74\x6d\154\x3e\x3c\150\145\x61\x64\76\x3c\x74\x69\164\154\x65\76\116\165\123\117\x41\x50\72\x20" . $this->serviceName . "\74\57\x74\x69\164\x6c\145\x3e\12\11\x9\x3c\x73\x74\171\154\x65\40\x74\x79\160\x65\x3d\42\164\145\x78\x74\x2f\x63\x73\163\42\x3e\xa\x9\x9\40\x20\40\40\142\x6f\x64\171\40\x20\x20\40\x7b\x20\x66\x6f\156\x74\55\x66\141\155\x69\x6c\171\x3a\x20\x61\x72\151\x61\x6c\x3b\x20\x63\157\x6c\x6f\162\72\x20\x23\60\x30\60\60\x30\60\73\x20\x62\141\x63\153\147\x72\x6f\165\156\144\55\143\x6f\x6c\157\x72\x3a\x20\x23\146\146\x66\146\x66\x66\x3b\40\x6d\x61\x72\x67\151\x6e\72\40\60\160\170\x20\60\x70\170\40\60\160\x78\x20\60\160\x78\73\x20\175\xa\x9\x9\40\40\x20\x20\x70\x20\40\40\x20\40\40\40\x7b\40\146\x6f\156\164\x2d\146\141\155\151\154\x79\72\40\x61\162\151\141\x6c\73\40\x63\x6f\154\157\162\72\x20\43\60\x30\60\x30\60\x30\x3b\x20\155\x61\x72\x67\151\156\x2d\164\157\160\72\x20\x30\160\170\73\40\x6d\x61\x72\x67\151\x6e\55\142\157\x74\x74\157\x6d\x3a\x20\61\62\160\170\73\40\175\xa\11\11\40\40\40\40\160\162\145\x20\173\40\x62\x61\143\153\147\x72\157\165\x6e\144\x2d\143\157\x6c\x6f\x72\72\40\x73\151\x6c\166\145\162\73\40\x70\x61\x64\x64\151\x6e\147\x3a\x20\x35\x70\x78\x3b\40\146\157\x6e\164\x2d\x66\141\155\x69\x6c\171\x3a\x20\103\x6f\x75\162\x69\145\x72\x20\116\x65\167\73\x20\146\x6f\x6e\x74\x2d\163\151\x7a\145\x3a\x20\x78\x2d\163\155\141\x6c\154\73\x20\x63\x6f\154\x6f\x72\72\40\43\60\x30\60\x30\x30\x30\x3b\175\xa\11\x9\x20\x20\x20\40\x75\x6c\x20\x20\40\x20\x20\40\x7b\40\x6d\141\x72\147\151\156\55\164\x6f\x70\72\40\61\60\x70\170\x3b\x20\x6d\x61\x72\x67\151\x6e\55\154\x65\x66\164\x3a\x20\62\x30\x70\170\73\x20\175\12\x9\x9\x20\40\x20\x20\x6c\151\40\x20\40\x20\x20\x20\x7b\x20\154\x69\x73\x74\55\163\x74\x79\154\145\55\164\171\160\145\72\40\x6e\x6f\x6e\145\x3b\40\x6d\x61\162\x67\x69\156\55\164\157\x70\72\x20\61\x30\x70\170\x3b\x20\143\157\x6c\157\162\72\40\x23\x30\60\x30\60\60\60\x3b\40\x7d\xa\x9\11\x20\x20\40\40\x2e\143\x6f\156\164\x65\156\x74\173\12\11\x9\x9\155\141\162\x67\151\x6e\x2d\x6c\145\x66\164\x3a\x20\60\x70\170\x3b\40\160\x61\x64\144\151\156\147\55\142\x6f\164\x74\x6f\x6d\x3a\40\x32\x65\155\x3b\40\175\xa\x9\11\x20\x20\40\40\x2e\156\141\x76\x20\x7b\12\11\11\x9\160\141\x64\x64\151\x6e\147\x2d\164\157\160\72\40\x31\60\160\170\73\40\160\x61\144\144\151\156\147\55\142\157\x74\164\x6f\x6d\72\x20\61\x30\160\x78\73\x20\160\141\x64\x64\x69\156\147\55\x6c\145\146\x74\72\40\61\65\x70\x78\73\40\146\157\x6e\164\x2d\x73\x69\x7a\x65\x3a\40\56\x37\x30\145\x6d\73\12\11\11\11\155\x61\x72\147\151\x6e\55\164\157\x70\x3a\x20\61\60\160\170\x3b\40\155\141\162\147\x69\156\x2d\154\x65\146\164\x3a\x20\60\160\170\73\40\143\157\154\157\162\72\x20\x23\60\60\60\x30\x30\60\x3b\12\11\11\11\142\x61\143\153\147\162\157\x75\156\x64\x2d\x63\157\x6c\x6f\162\x3a\40\43\143\x63\x63\x63\x66\146\x3b\x20\x77\x69\144\x74\150\x3a\x20\62\x30\x25\73\40\155\141\x72\147\151\156\55\154\x65\x66\164\72\40\62\60\x70\170\x3b\x20\155\x61\162\147\x69\x6e\55\x74\x6f\160\x3a\40\62\60\x70\x78\x3b\x20\175\12\11\11\40\x20\40\x20\56\164\x69\164\154\145\x20\173\12\x9\x9\x9\146\x6f\x6e\164\x2d\146\141\x6d\x69\154\x79\72\40\141\x72\x69\x61\154\x3b\40\x66\x6f\156\x74\x2d\x73\x69\172\145\x3a\x20\x32\x36\160\x78\73\x20\143\x6f\154\157\162\x3a\40\x23\146\x66\x66\x66\x66\x66\73\xa\x9\x9\x9\142\141\x63\153\147\x72\x6f\165\x6e\144\x2d\x63\157\x6c\157\x72\x3a\40\43\71\71\71\71\71\x39\73\x20\x77\151\144\164\150\x3a\x20\x31\x30\x30\x25\73\12\x9\x9\11\155\141\162\147\x69\x6e\55\x6c\145\x66\164\72\x20\60\160\170\x3b\x20\x6d\141\162\x67\x69\156\55\x72\151\x67\x68\164\x3a\40\60\160\x78\73\12\x9\11\x9\x70\x61\x64\x64\151\x6e\x67\55\x74\x6f\x70\x3a\x20\x31\x30\x70\170\73\x20\160\141\144\144\x69\156\x67\55\142\x6f\x74\164\157\x6d\x3a\40\61\x30\x70\x78\73\175\xa\x9\11\x20\x20\40\x20\56\150\151\144\144\145\x6e\40\x7b\12\x9\11\11\160\x6f\163\x69\x74\151\157\156\72\x20\141\x62\x73\157\x6c\x75\x74\145\73\40\166\x69\163\x69\142\x69\154\151\164\171\x3a\40\x68\x69\x64\144\145\x6e\x3b\x20\172\x2d\x69\x6e\144\145\170\72\40\62\x30\x30\x3b\x20\154\145\x66\164\72\40\62\65\60\x70\170\73\40\x74\157\x70\x3a\x20\x31\60\x30\160\170\73\xa\x9\x9\11\146\157\156\164\55\146\x61\155\151\154\171\x3a\40\x61\162\151\x61\x6c\x3b\40\x6f\166\x65\x72\x66\x6c\157\x77\72\x20\x68\x69\144\x64\x65\x6e\x3b\x20\x77\x69\144\164\150\72\40\x36\60\60\73\12\x9\11\x9\160\141\x64\x64\x69\x6e\147\x3a\40\x32\60\x70\x78\x3b\x20\146\x6f\156\164\55\x73\151\172\x65\x3a\40\61\x30\x70\x78\x3b\x20\142\141\143\153\147\162\157\165\156\144\55\x63\157\154\157\162\72\40\43\71\x39\x39\71\71\x39\x3b\12\x9\x9\11\154\x61\171\x65\162\x2d\142\x61\x63\x6b\x67\162\x6f\165\156\x64\55\x63\x6f\154\157\x72\72\43\x46\x46\106\106\x46\x46\x3b\x20\x7d\xa\11\11\x20\x20\40\40\141\54\141\x3a\x61\143\x74\151\x76\x65\x20\40\x7b\x20\x63\157\x6c\x6f\162\72\x20\x63\150\x61\x72\x63\157\141\x6c\x3b\x20\x66\x6f\x6e\164\x2d\167\x65\x69\x67\x68\164\72\40\x62\x6f\154\144\73\40\175\xa\x9\x9\x20\x20\40\40\141\72\x76\x69\163\x69\164\x65\144\40\40\x20\173\40\x63\x6f\154\157\162\x3a\x20\43\x36\x36\66\66\66\66\73\40\146\157\156\164\55\x77\145\151\147\150\164\72\40\142\x6f\x6c\x64\x3b\x20\175\12\x9\11\40\40\40\40\x61\x3a\x68\157\x76\145\x72\x20\x20\x20\40\x20\x7b\40\143\x6f\154\x6f\x72\72\x20\x63\143\63\63\60\60\x3b\40\x66\x6f\156\x74\x2d\167\x65\x69\x67\150\x74\x3a\x20\142\157\154\144\x3b\40\175\xa\11\x9\x3c\x2f\x73\164\171\154\x65\x3e\12\x9\11\x3c\163\x63\x72\x69\x70\x74\40\x6c\141\x6e\x67\165\141\147\145\x3d\42\112\x61\166\141\123\x63\x72\151\x70\164\42\40\x74\x79\x70\x65\75\42\x74\145\x78\x74\57\152\141\166\141\163\x63\162\x69\x70\x74\x22\x3e\12\11\11\74\41\x2d\x2d\xa\11\11\57\57\40\x50\117\120\x2d\x55\x50\x20\x43\101\120\124\x49\117\116\123\x2e\56\56\12\11\x9\146\165\156\x63\x74\x69\157\x6e\x20\x6c\151\x62\x5f\142\x77\x63\150\145\x63\153\50\51\x7b\40\57\57\x42\x72\x6f\x77\163\145\162\x63\150\145\x63\x6b\x20\50\x6e\x65\145\x64\145\x64\x29\xa\11\x9\40\40\40\x20\164\x68\151\x73\x2e\x76\145\x72\x3d\x6e\x61\166\x69\147\141\164\x6f\162\56\141\x70\x70\x56\145\x72\x73\x69\x6f\x6e\xa\11\x9\40\x20\40\x20\x74\x68\151\163\x2e\x61\x67\145\x6e\x74\75\x6e\x61\166\151\x67\x61\x74\157\x72\x2e\165\163\145\x72\x41\147\x65\156\x74\xa\11\x9\40\x20\40\40\x74\150\151\163\x2e\144\157\x6d\x3d\x64\157\x63\165\x6d\x65\x6e\x74\x2e\x67\x65\164\105\x6c\x65\155\145\156\164\x42\171\111\x64\77\61\x3a\x30\xa\11\x9\x20\x20\x20\40\164\150\151\x73\56\x6f\x70\145\x72\141\65\x3d\x74\150\x69\163\x2e\141\x67\x65\x6e\x74\56\151\156\x64\x65\x78\117\146\x28\x22\117\160\145\162\141\x20\x35\42\x29\76\x2d\x31\12\11\x9\40\40\40\40\164\x68\151\163\x2e\151\x65\x35\x3d\x28\x74\150\151\x73\x2e\x76\x65\x72\56\151\x6e\144\145\170\117\x66\x28\x22\115\123\x49\105\40\x35\x22\51\76\x2d\61\40\46\46\40\x74\150\x69\163\x2e\144\x6f\x6d\x20\46\46\40\x21\x74\x68\x69\163\56\x6f\160\x65\x72\x61\65\x29\77\61\x3a\x30\73\xa\x9\11\40\40\x20\40\164\x68\151\x73\56\x69\x65\x36\x3d\x28\x74\150\x69\x73\56\166\x65\x72\x2e\151\156\x64\x65\x78\117\146\50\x22\115\x53\111\105\x20\x36\42\x29\x3e\x2d\x31\40\x26\x26\40\x74\150\151\163\56\144\157\x6d\x20\46\x26\x20\41\x74\x68\151\x73\x2e\157\160\145\162\141\x35\x29\x3f\61\x3a\x30\73\xa\x9\x9\x20\x20\40\x20\x74\150\x69\x73\56\x69\x65\64\x3d\50\x64\157\x63\x75\155\x65\x6e\x74\56\141\x6c\154\40\46\46\40\x21\x74\150\x69\163\x2e\144\x6f\155\40\x26\x26\x20\x21\x74\150\151\x73\56\x6f\x70\145\x72\x61\65\51\x3f\61\x3a\60\73\xa\x9\x9\x20\40\x20\40\x74\x68\151\163\x2e\151\x65\x3d\x74\x68\151\163\56\x69\145\64\x7c\x7c\164\x68\x69\163\x2e\x69\x65\65\174\174\x74\150\x69\x73\x2e\151\145\66\12\x9\11\x20\40\40\40\164\x68\x69\163\56\155\x61\x63\x3d\164\x68\x69\x73\x2e\141\147\145\x6e\164\x2e\151\x6e\x64\145\x78\x4f\x66\50\42\115\x61\143\42\51\x3e\x2d\61\xa\11\x9\x20\40\40\40\x74\x68\151\163\56\x6e\x73\66\x3d\50\x74\150\151\x73\56\x64\157\155\x20\x26\46\x20\160\141\x72\163\145\111\x6e\164\x28\164\x68\x69\163\56\166\145\162\x29\x20\x3e\75\40\65\51\x20\77\61\x3a\x30\x3b\12\11\11\x20\x20\40\x20\x74\x68\151\x73\x2e\x6e\163\x34\75\x28\144\x6f\143\165\155\145\156\164\x2e\154\x61\x79\x65\x72\163\x20\46\x26\x20\41\164\150\x69\163\56\x64\x6f\x6d\x29\x3f\61\x3a\60\73\xa\x9\x9\x20\40\x20\40\x74\x68\151\x73\x2e\142\x77\x3d\x28\164\x68\151\163\56\151\x65\x36\40\x7c\174\x20\164\150\151\x73\56\x69\x65\x35\x20\x7c\x7c\x20\x74\x68\x69\163\56\x69\x65\x34\x20\x7c\174\40\x74\x68\151\x73\56\x6e\163\x34\40\x7c\x7c\40\164\150\x69\163\56\x6e\x73\x36\40\174\x7c\40\164\150\151\x73\56\x6f\160\145\x72\141\65\51\xa\x9\11\40\40\x20\40\x72\x65\164\165\162\x6e\40\164\x68\x69\x73\12\x9\x9\175\xa\x9\11\166\x61\162\40\x62\167\40\x3d\40\x6e\x65\167\40\154\151\x62\137\142\167\143\150\x65\x63\x6b\50\x29\xa\11\11\57\57\x4d\x61\x6b\145\x73\x20\143\x72\157\x73\x73\142\x72\x6f\167\x73\145\x72\x20\157\x62\x6a\145\143\x74\56\12\x9\11\x66\x75\156\143\x74\x69\x6f\x6e\40\x6d\141\153\145\x4f\142\x6a\50\157\x62\x6a\x29\x7b\xa\x9\11\40\40\40\40\164\x68\x69\163\x2e\145\166\156\164\x3d\x62\x77\x2e\x64\157\155\77\x20\144\x6f\143\x75\x6d\x65\156\164\x2e\147\145\x74\105\x6c\145\x6d\x65\x6e\164\x42\x79\x49\x64\50\x6f\142\x6a\x29\x3a\142\167\56\x69\145\x34\x3f\x64\x6f\x63\x75\x6d\145\156\x74\x2e\141\154\x6c\133\157\x62\x6a\x5d\72\x62\x77\56\x6e\x73\64\x3f\144\x6f\x63\x75\x6d\x65\156\x74\x2e\x6c\x61\171\145\162\x73\133\x6f\x62\152\135\x3a\60\73\xa\x9\11\40\40\40\40\151\146\x28\x21\x74\x68\151\163\x2e\x65\166\x6e\x74\x29\x20\162\145\164\x75\x72\x6e\x20\146\x61\154\163\145\12\x9\11\x20\x20\40\x20\164\x68\151\163\x2e\x63\x73\x73\75\142\x77\x2e\x64\x6f\155\174\x7c\x62\167\56\x69\145\64\77\x74\x68\151\163\x2e\145\166\156\x74\56\163\x74\x79\x6c\x65\72\x62\167\x2e\156\163\x34\77\164\x68\x69\163\x2e\145\166\x6e\x74\x3a\x30\x3b\12\11\11\x20\x20\40\x20\164\x68\151\163\x2e\167\162\145\x66\75\142\167\56\144\x6f\155\174\x7c\142\x77\56\x69\145\x34\x3f\x74\150\151\x73\x2e\x65\166\156\x74\x3a\x62\167\56\x6e\x73\64\x3f\x74\150\151\163\56\143\163\x73\x2e\x64\x6f\x63\165\155\x65\x6e\164\x3a\x30\x3b\12\x9\x9\x20\x20\40\x20\164\150\x69\x73\56\167\162\151\164\x65\x49\x74\75\x62\137\167\162\x69\x74\x65\x49\164\x3b\xa\11\x9\x20\x20\x20\x20\162\145\x74\165\162\156\40\164\150\151\163\12\11\x9\x7d\12\x9\11\57\x2f\40\x41\40\165\x6e\x69\x74\40\157\x66\x20\x6d\145\141\x73\165\x72\x65\x20\x74\150\141\164\40\x77\x69\154\154\x20\142\145\x20\141\144\144\x65\x64\x20\167\150\145\156\40\x73\x65\x74\164\x69\x6e\147\40\x74\150\x65\x20\160\x6f\163\x69\x74\151\157\x6e\x20\x6f\x66\40\x61\40\154\141\171\x65\x72\x2e\xa\x9\x9\x2f\x2f\166\x61\x72\40\160\x78\40\x3d\x20\142\x77\56\156\x73\x34\174\174\167\x69\x6e\144\157\167\x2e\157\x70\145\x72\x61\x3f\42\42\72\x22\x70\170\x22\x3b\xa\11\x9\146\165\156\x63\x74\x69\x6f\156\x20\142\x5f\167\x72\x69\164\145\x49\x74\x28\x74\145\x78\x74\x29\173\xa\x9\11\x20\40\40\x20\x69\x66\40\50\142\167\x2e\156\163\x34\x29\173\x74\150\x69\163\56\x77\162\145\x66\x2e\x77\x72\x69\164\145\x28\164\145\x78\164\x29\73\x74\x68\151\x73\56\167\x72\x65\x66\56\x63\154\x6f\x73\x65\50\51\x7d\12\x9\11\40\x20\40\40\145\154\163\x65\40\164\x68\x69\x73\x2e\167\x72\x65\x66\x2e\x69\156\156\145\x72\110\124\115\x4c\x20\x3d\x20\x74\145\170\164\xa\11\x9\x7d\12\11\11\57\57\x53\x68\157\x77\x73\x20\x74\x68\145\x20\155\145\x73\163\141\147\x65\163\12\x9\x9\166\x61\x72\x20\x6f\104\145\163\143\73\xa\x9\11\146\x75\156\x63\164\151\x6f\156\x20\160\157\x70\x75\x70\x28\144\x69\x76\x69\x64\x29\x7b\12\11\x9\x20\x20\x20\40\151\146\x28\157\104\145\x73\143\x20\75\40\x6e\145\167\x20\x6d\141\x6b\145\x4f\x62\152\50\x64\151\166\151\144\51\x29\173\12\x9\x9\11\157\x44\145\163\143\56\x63\x73\x73\56\166\151\x73\151\x62\151\154\151\x74\171\40\x3d\x20\42\x76\x69\163\x69\x62\x6c\145\42\xa\x9\11\x20\x20\x20\x20\175\xa\x9\11\175\xa\11\x9\x66\165\156\x63\x74\151\157\x6e\40\160\x6f\160\x6f\x75\x74\50\x29\x7b\40\57\x2f\x20\110\x69\144\x65\163\x20\155\x65\x73\163\141\147\x65\12\x9\x9\x20\40\x20\40\x69\146\50\157\x44\145\163\x63\x29\40\x6f\x44\x65\x73\143\x2e\143\163\x73\x2e\x76\x69\x73\151\x62\x69\x6c\151\164\x79\x20\75\40\x22\x68\151\144\144\x65\156\x22\xa\x9\11\x7d\12\11\11\x2f\57\55\55\x3e\12\11\11\x3c\x2f\163\x63\162\x69\160\164\76\12\11\11\x3c\57\150\145\141\144\x3e\12\x9\x9\74\x62\157\144\171\76\xa\11\11\74\x64\x69\x76\40\x63\154\x61\x73\x73\75\143\157\x6e\164\145\x6e\164\76\xa\x9\11\x9\74\x62\x72\76\74\142\x72\x3e\xa\x9\x9\11\x3c\144\151\x76\40\x63\154\x61\163\163\75\164\151\x74\x6c\145\76" . $this->serviceName . "\74\x2f\x64\x69\x76\76\xa\x9\11\11\x3c\144\151\166\40\143\154\141\x73\163\75\156\141\x76\x3e\12\11\x9\11\11\x3c\x70\76\126\151\145\x77\40\x74\x68\145\40\x3c\141\x20\150\x72\145\x66\75\42" . $PHP_SELF . "\x3f\x77\163\x64\154\42\76\x57\123\x44\114\x3c\57\x61\x3e\x20\x66\157\162\x20\164\x68\x65\x20\163\x65\x72\x76\151\143\x65\x2e\12\11\11\11\x9\x43\x6c\x69\143\153\x20\157\x6e\40\x61\156\x20\157\160\145\x72\141\x74\x69\x6f\156\40\x6e\141\155\145\x20\x74\157\40\166\x69\145\x77\x20\x69\x74\x26\141\x70\157\x73\x3b\163\40\144\x65\164\141\x69\154\x73\x2e\74\x2f\x70\76\12\x9\x9\11\11\x3c\165\154\76"; foreach ($this->getOperations() as $op => $data) { $b .= "\74\154\x69\x3e\74\x61\x20\x68\162\x65\x66\75\x27\x23\x27\x20\157\x6e\x63\x6c\x69\x63\x6b\75\42\x70\157\x70\157\x75\x74\50\x29\x3b\x70\x6f\160\165\160\x28\x27{$op}\x27\51\42\76{$op}\x3c\57\141\x3e\74\x2f\154\151\x3e"; $b .= "\74\144\151\x76\x20\151\x64\75\x27{$op}\47\40\x63\x6c\x61\x73\x73\75\x27\150\151\144\x64\145\x6e\47\x3e\12\11\11\x9\x9\40\40\x20\x20\x3c\x61\x20\x68\162\145\x66\x3d\47\x23\x27\40\157\156\x63\x6c\x69\x63\x6b\x3d\47\x70\157\160\x6f\x75\x74\x28\51\x27\76\x3c\x66\x6f\x6e\x74\40\x63\157\x6c\x6f\162\x3d\x27\x23\x66\x66\x66\x66\x66\x66\47\76\103\x6c\x6f\163\145\x3c\x2f\146\157\x6e\164\76\74\x2f\141\x3e\x3c\x62\x72\x3e\x3c\142\x72\76"; foreach ($data as $donnie => $marie) { if ($donnie == "\151\x6e\x70\x75\164" || $donnie == "\x6f\165\x74\x70\165\164") { $b .= "\x3c\x66\x6f\x6e\x74\40\143\x6f\x6c\x6f\x72\75\x27\x77\x68\x69\x74\145\47\76" . ucfirst($donnie) . "\72\74\57\x66\157\156\164\76\74\x62\162\x3e"; foreach ($marie as $captain => $tenille) { if ($captain == "\160\141\162\164\x73") { $b .= "\x26\x6e\x62\163\160\73\46\156\142\163\x70\73{$captain}\x3a\74\x62\x72\x3e"; foreach ($tenille as $joanie => $chachi) { $b .= "\x26\156\x62\x73\160\x3b\46\x6e\x62\163\160\x3b\x26\x6e\142\163\160\x3b\46\156\x62\163\160\x3b{$joanie}\x3a\x20{$chachi}\74\142\162\76"; } } else { $b .= "\46\156\142\x73\x70\73\46\x6e\142\x73\160\x3b{$captain}\72\40{$tenille}\74\x62\x72\76"; } } } else { $b .= "\74\146\157\x6e\x74\x20\143\x6f\154\x6f\162\75\x27\167\x68\151\x74\x65\47\x3e" . ucfirst($donnie) . "\x3a\74\57\146\x6f\x6e\164\76\x20{$marie}\x3c\142\x72\76"; } } $b .= "\x3c\57\144\x69\166\x3e"; } $b .= "\xa\11\11\x9\x9\74\x75\x6c\76\xa\x9\11\x9\x3c\x2f\x64\x69\x76\x3e\xa\x9\x9\x3c\x2f\x64\x69\x76\x3e\x3c\x2f\x62\x6f\144\x79\76\74\x2f\150\x74\155\154\x3e"; return $b; } function serialize($debug = 0) { $xml = "\74\x3f\x78\155\x6c\x20\x76\145\x72\x73\x69\x6f\156\x3d\x22\x31\56\x30\x22\x20\x65\x6e\x63\x6f\x64\151\x6e\x67\75\x22\x49\x53\117\x2d\70\70\65\71\x2d\61\x22\77\76"; $xml .= "\12\74\144\145\146\151\x6e\151\164\x69\157\156\163"; foreach ($this->namespaces as $k => $v) { $xml .= "\40\x78\x6d\154\x6e\163\72{$k}\75\x22{$v}\42"; } if (isset($this->namespaces["\x77\163\x64\x6c"])) { $xml .= "\40\x78\x6d\154\x6e\163\75\42" . $this->namespaces["\167\163\144\x6c"] . "\x22"; } if (isset($this->namespaces["\x74\x6e\163"])) { $xml .= "\x20\x74\141\162\147\145\164\x4e\x61\155\x65\x73\160\x61\143\145\75\42" . $this->namespaces["\164\x6e\163"] . "\42"; } $xml .= "\x3e"; if (sizeof($this->import) > 0) { foreach ($this->import as $ns => $list) { foreach ($list as $ii) { if ($ii["\154\x6f\143\x61\164\x69\x6f\x6e"] != '') { $xml .= "\74\x69\155\160\157\162\164\40\x6c\157\x63\x61\x74\x69\x6f\x6e\x3d\42" . $ii["\x6c\x6f\143\141\x74\x69\157\156"] . "\x22\40\x6e\141\x6d\145\x73\x70\141\143\145\75\x22" . $ns . "\42\40\57\76"; } else { $xml .= "\74\151\155\160\157\x72\164\40\156\x61\x6d\145\163\x70\x61\x63\x65\x3d\42" . $ns . "\x22\40\x2f\x3e"; } } } } if (count($this->schemas) >= 1) { $xml .= "\xa\74\164\171\x70\145\163\76\12"; foreach ($this->schemas as $ns => $list) { foreach ($list as $xs) { $xml .= $xs->serializeSchema(); } } $xml .= "\74\57\164\x79\160\x65\163\x3e"; } if (count($this->messages) >= 1) { foreach ($this->messages as $msgName => $msgParts) { $xml .= "\xa\x3c\x6d\x65\x73\x73\141\x67\x65\40\156\x61\x6d\x65\75\42" . $msgName . "\x22\x3e"; if (is_array($msgParts)) { foreach ($msgParts as $partName => $partType) { if (strpos($partType, "\72")) { $typePrefix = $this->getPrefixFromNamespace($this->getPrefix($partType)); } elseif (isset($this->typemap[$this->namespaces["\170\163\144"]][$partType])) { $typePrefix = "\170\163\144"; } else { foreach ($this->typemap as $ns => $types) { if (isset($types[$partType])) { $typePrefix = $this->getPrefixFromNamespace($ns); } } if (!isset($typePrefix)) { die("{$partType}\40\x68\x61\163\x20\156\157\x20\x6e\x61\155\x65\163\160\x61\x63\x65\x21"); } } $ns = $this->getNamespaceFromPrefix($typePrefix); $localPart = $this->getLocalPart($partType); $typeDef = $this->getTypeDef($localPart, $ns); if (isset($typeDef["\x74\x79\160\145\x43\154\141\x73\163"]) && $typeDef["\164\x79\160\145\103\x6c\x61\x73\163"] == "\145\154\x65\155\x65\156\164") { $elementortype = "\x65\154\145\155\145\x6e\x74"; if (substr($localPart, -1) == "\136") { $localPart = substr($localPart, 0, -1); } } else { $elementortype = "\164\x79\x70\145"; } $xml .= "\xa" . "\40\40\x3c\x70\x61\162\164\40\156\141\155\x65\75\42" . $partName . "\42\x20" . $elementortype . "\x3d\x22" . $typePrefix . "\x3a" . $localPart . "\x22\40\57\76"; } } $xml .= "\74\57\155\145\x73\x73\141\147\x65\x3e"; } } if (count($this->bindings) >= 1) { $binding_xml = ''; $portType_xml = ''; foreach ($this->bindings as $bindingName => $attrs) { $binding_xml .= "\12\74\142\151\156\144\151\x6e\x67\40\x6e\x61\155\145\75\42" . $bindingName . "\42\x20\x74\x79\160\145\75\42\x74\156\163\72" . $attrs["\160\x6f\x72\164\124\x79\160\x65"] . "\42\x3e"; $binding_xml .= "\xa" . "\x20\40\74\x73\157\x61\x70\x3a\142\x69\156\144\x69\x6e\147\x20\163\x74\171\154\145\x3d\x22" . $attrs["\x73\164\171\154\x65"] . "\42\40\164\162\141\x6e\163\x70\x6f\162\x74\x3d\42" . $attrs["\164\x72\x61\x6e\163\x70\x6f\x72\164"] . "\x22\57\76"; $portType_xml .= "\12\74\x70\x6f\x72\164\x54\x79\x70\x65\x20\x6e\x61\155\x65\x3d\42" . $attrs["\160\157\162\x74\124\171\x70\145"] . "\42\76"; foreach ($attrs["\157\x70\145\x72\x61\x74\x69\157\156\163"] as $opName => $opParts) { $binding_xml .= "\12" . "\40\40\74\157\x70\x65\x72\x61\164\x69\157\156\40\x6e\x61\155\145\75\x22" . $opName . "\x22\x3e"; $binding_xml .= "\xa" . "\40\40\40\40\x3c\x73\157\141\160\x3a\x6f\160\145\x72\x61\x74\151\x6f\156\x20\163\157\141\x70\101\x63\x74\151\157\x6e\x3d\42" . $opParts["\x73\157\141\160\x41\143\164\x69\x6f\x6e"] . "\42\40\x73\164\x79\x6c\145\75\42" . $opParts["\163\164\171\x6c\145"] . "\42\x2f\x3e"; if (isset($opParts["\151\x6e\x70\x75\x74"]["\x65\156\x63\x6f\144\x69\x6e\147\x53\164\171\154\145"]) && $opParts["\x69\156\160\165\164"]["\145\x6e\x63\x6f\144\151\x6e\147\x53\164\171\x6c\x65"] != '') { $enc_style = "\40\x65\156\143\x6f\144\x69\156\x67\123\x74\171\154\145\x3d\x22" . $opParts["\x69\x6e\x70\x75\164"]["\x65\x6e\143\x6f\144\x69\156\147\123\x74\x79\x6c\x65"] . "\x22"; } else { $enc_style = ''; } $binding_xml .= "\xa" . "\40\x20\40\x20\x3c\x69\x6e\160\165\164\76\x3c\163\x6f\x61\x70\x3a\x62\x6f\x64\x79\40\165\x73\x65\75\42" . $opParts["\151\156\x70\165\164"]["\165\163\x65"] . "\x22\40\x6e\141\x6d\145\163\x70\141\143\145\75\x22" . $opParts["\151\x6e\160\x75\x74"]["\x6e\141\155\145\x73\x70\141\x63\145"] . "\42" . $enc_style . "\57\76\74\x2f\x69\x6e\x70\165\164\x3e"; if (isset($opParts["\x6f\165\164\160\165\x74"]["\145\x6e\143\x6f\x64\x69\156\x67\123\x74\171\x6c\145"]) && $opParts["\157\165\x74\160\165\x74"]["\x65\156\x63\157\x64\x69\156\147\123\x74\x79\x6c\145"] != '') { $enc_style = "\x20\x65\x6e\x63\x6f\x64\151\156\x67\x53\x74\171\x6c\145\75\x22" . $opParts["\157\165\164\160\x75\164"]["\145\156\143\x6f\144\x69\x6e\x67\x53\x74\x79\x6c\x65"] . "\42"; } else { $enc_style = ''; } $binding_xml .= "\xa" . "\40\40\40\x20\x3c\x6f\x75\164\160\x75\x74\76\x3c\163\x6f\141\160\72\x62\157\x64\171\40\165\163\x65\x3d\x22" . $opParts["\x6f\165\x74\x70\x75\x74"]["\x75\163\145"] . "\42\40\x6e\141\x6d\x65\163\x70\141\x63\x65\x3d\x22" . $opParts["\x6f\x75\164\160\x75\x74"]["\156\x61\155\145\x73\160\x61\143\145"] . "\42" . $enc_style . "\x2f\x3e\x3c\57\157\165\x74\160\x75\164\76"; $binding_xml .= "\12" . "\40\40\74\57\157\160\x65\162\141\164\x69\x6f\156\76"; $portType_xml .= "\xa" . "\x20\x20\x3c\157\160\145\x72\x61\x74\151\157\156\x20\x6e\x61\155\145\x3d\x22" . $opParts["\156\141\155\x65"] . "\42"; if (isset($opParts["\x70\x61\x72\141\155\145\x74\x65\x72\x4f\162\144\x65\x72"])) { $portType_xml .= "\40\x70\x61\162\141\155\145\164\x65\162\x4f\x72\x64\x65\x72\75\x22" . $opParts["\160\x61\162\x61\x6d\145\x74\x65\162\x4f\162\144\145\162"] . "\x22"; } $portType_xml .= "\76"; if (isset($opParts["\144\x6f\x63\165\155\145\x6e\x74\141\164\x69\x6f\x6e"]) && $opParts["\x64\157\x63\165\x6d\145\x6e\164\x61\x74\151\157\x6e"] != '') { $portType_xml .= "\xa" . "\40\x20\40\x20\74\x64\157\x63\x75\155\x65\x6e\164\x61\x74\x69\157\x6e\76" . htmlspecialchars($opParts["\x64\157\143\165\155\x65\x6e\164\x61\164\x69\x6f\156"]) . "\x3c\57\144\157\x63\x75\x6d\x65\x6e\164\141\x74\151\x6f\156\x3e"; } $portType_xml .= "\12" . "\x20\40\x20\40\x3c\x69\x6e\160\x75\x74\40\x6d\145\163\163\141\147\x65\75\x22\164\156\163\x3a" . $opParts["\x69\156\160\165\x74"]["\155\x65\163\163\x61\147\x65"] . "\42\57\76"; $portType_xml .= "\12" . "\x20\40\x20\40\x3c\x6f\165\164\x70\x75\164\x20\x6d\145\163\163\x61\147\145\x3d\42\x74\156\163\72" . $opParts["\x6f\x75\164\x70\x75\x74"]["\155\145\x73\x73\x61\x67\145"] . "\42\x2f\x3e"; $portType_xml .= "\12" . "\x20\40\74\x2f\x6f\x70\145\162\x61\x74\x69\157\x6e\76"; } $portType_xml .= "\12" . "\x3c\x2f\160\157\162\x74\x54\171\160\x65\x3e"; $binding_xml .= "\12" . "\74\x2f\x62\x69\156\144\x69\x6e\147\76"; } $xml .= $portType_xml . $binding_xml; } $xml .= "\12\74\163\145\162\x76\x69\x63\145\x20\x6e\x61\155\145\75\x22" . $this->serviceName . "\42\76"; if (count($this->ports) >= 1) { foreach ($this->ports as $pName => $attrs) { $xml .= "\12" . "\40\40\x3c\x70\157\162\x74\40\156\141\x6d\145\75\x22" . $pName . "\42\40\142\x69\x6e\144\x69\156\147\x3d\x22\x74\156\x73\72" . $attrs["\142\x69\156\144\151\156\x67"] . "\x22\x3e"; $xml .= "\xa" . "\x20\40\40\40\74\x73\x6f\141\x70\72\x61\144\x64\x72\145\x73\x73\x20\x6c\157\143\141\x74\151\157\x6e\x3d\42" . $attrs["\154\x6f\x63\141\x74\x69\x6f\156"] . ($debug ? "\77\144\145\x62\x75\147\x3d\61" : '') . "\42\57\76"; $xml .= "\xa" . "\x20\x20\74\x2f\x70\x6f\162\x74\76"; } } $xml .= "\12" . "\74\x2f\x73\x65\x72\x76\151\x63\145\x3e"; return $xml . "\xa\x3c\57\144\x65\146\x69\x6e\x69\164\151\157\x6e\163\x3e"; } function parametersMatchWrapped($type, &$parameters) { $this->debug("\151\x6e\40\160\141\x72\x61\155\x65\x74\145\x72\x73\x4d\x61\164\143\x68\x57\162\x61\160\x70\145\x64\40\164\x79\x70\145\75{$type}\54\x20\x70\141\162\x61\155\x65\x74\145\x72\x73\75"); $this->appendDebug($this->varDump($parameters)); if (strpos($type, "\72")) { $uqType = substr($type, strrpos($type, "\x3a") + 1); $ns = substr($type, 0, strrpos($type, "\72")); $this->debug("\x69\x6e\40\160\x61\162\x61\x6d\145\x74\145\162\163\x4d\x61\164\143\x68\x57\162\x61\160\160\x65\144\72\x20\147\x6f\164\40\141\40\160\162\x65\146\151\170\x65\144\x20\164\171\160\x65\x3a\40{$uqType}\54\x20{$ns}"); if ($this->getNamespaceFromPrefix($ns)) { $ns = $this->getNamespaceFromPrefix($ns); $this->debug("\x69\156\x20\160\141\x72\x61\155\x65\164\x65\162\x73\x4d\x61\164\143\x68\x57\162\x61\x70\x70\145\x64\72\40\x65\x78\x70\x61\x6e\x64\145\x64\40\160\x72\145\x66\x69\x78\x65\144\40\164\171\x70\145\72\x20{$uqType}\x2c\40{$ns}"); } } else { $this->debug("\151\156\40\160\x61\162\x61\x6d\145\x74\x65\x72\x73\115\141\x74\143\150\127\x72\141\160\x70\145\x64\72\x20\x4e\157\40\156\x61\155\x65\163\x70\141\143\145\40\x66\x6f\x72\x20\164\171\x70\145\40{$type}"); $ns = ''; $uqType = $type; } if (!($typeDef = $this->getTypeDef($uqType, $ns))) { $this->debug("\x69\x6e\x20\x70\x61\x72\141\155\145\164\145\162\x73\115\x61\x74\143\150\127\x72\141\160\160\x65\144\x3a\40{$type}\40\x28{$uqType}\51\40\x69\x73\40\x6e\157\164\40\x61\x20\163\165\160\160\157\162\164\x65\x64\40\164\x79\x70\145\x2e"); return false; } $this->debug("\151\156\40\x70\x61\162\x61\x6d\x65\164\x65\162\163\x4d\141\164\x63\x68\x57\x72\141\x70\160\145\x64\72\x20\146\x6f\x75\x6e\x64\40\x74\171\x70\x65\104\145\x66\x3d"); $this->appendDebug($this->varDump($typeDef)); if (substr($uqType, -1) == "\x5e") { $uqType = substr($uqType, 0, -1); } $phpType = $typeDef["\160\150\160\x54\171\x70\x65"]; $arrayType = isset($typeDef["\x61\x72\x72\141\171\124\x79\160\145"]) ? $typeDef["\x61\x72\162\141\171\124\171\x70\x65"] : ''; $this->debug("\x69\x6e\40\x70\141\x72\141\x6d\145\164\145\162\x73\115\x61\164\x63\x68\x57\162\141\160\160\145\x64\72\x20\165\x71\x54\x79\160\145\72\x20{$uqType}\x2c\40\x6e\x73\x3a\x20{$ns}\54\40\x70\x68\160\164\x79\x70\145\72\x20{$phpType}\54\40\x61\162\162\141\x79\x54\x79\x70\x65\x3a\40{$arrayType}"); if ($phpType != "\x73\164\x72\165\143\164") { $this->debug("\x69\156\x20\160\x61\x72\141\155\x65\x74\x65\x72\x73\x4d\141\164\x63\150\127\162\141\x70\160\145\144\72\40\x6e\x6f\164\x20\x61\x20\x73\x74\162\165\143\164"); return false; } if (isset($typeDef["\x65\154\145\x6d\145\156\164\163"]) && is_array($typeDef["\x65\x6c\145\x6d\145\156\x74\x73"])) { $elements = 0; $matches = 0; foreach ($typeDef["\145\154\x65\x6d\145\156\x74\163"] as $name => $attrs) { if (isset($parameters[$name])) { $this->debug("\x69\x6e\40\x70\141\x72\141\x6d\145\x74\x65\162\x73\x4d\141\164\x63\x68\x57\162\141\160\160\x65\x64\x3a\x20\x68\x61\x76\x65\x20\x70\141\162\141\x6d\x65\164\x65\162\40\x6e\x61\x6d\x65\144\x20{$name}"); $matches++; } else { $this->debug("\151\x6e\x20\160\141\x72\x61\155\x65\164\x65\162\163\x4d\x61\164\x63\x68\127\x72\141\x70\160\145\x64\72\x20\x64\x6f\x20\x6e\x6f\164\40\150\141\166\x65\40\160\x61\x72\141\x6d\145\x74\x65\x72\x20\x6e\141\155\x65\x64\40{$name}"); } $elements++; } $this->debug("\x69\156\x20\x70\x61\x72\141\155\x65\164\x65\162\x73\115\x61\164\x63\x68\127\x72\141\160\x70\x65\144\72\40{$matches}\x20\x70\x61\162\141\x6d\145\x74\x65\x72\x20\156\141\x6d\145\x73\x20\x6d\141\x74\x63\150\x20{$elements}\40\x77\x72\x61\x70\x70\145\x64\x20\160\x61\162\141\155\x65\164\145\x72\x20\156\141\x6d\x65\163"); if ($matches == 0) { return false; } return true; } $this->debug("\x69\156\x20\160\141\162\141\x6d\145\164\145\x72\163\115\x61\164\143\x68\x57\162\x61\x70\x70\145\x64\72\x20\x6e\x6f\40\x65\x6c\x65\x6d\x65\156\x74\163\x20\x74\x79\x70\x65\40{$ns}\72{$uqType}"); return count($parameters) == 0; } function serializeRPCParameters($operation, $direction, $parameters, $bindingType = "\163\x6f\x61\160") { $this->debug("\151\x6e\40\163\x65\162\x69\141\x6c\151\172\145\122\120\x43\120\x61\x72\141\x6d\145\x74\145\x72\x73\72\40\x6f\160\145\x72\141\x74\x69\157\x6e\75{$operation}\x2c\40\x64\x69\162\145\143\164\x69\157\x6e\75{$direction}\x2c\40\x58\x4d\114\x53\143\x68\x65\x6d\141\x56\145\162\x73\151\157\156\75{$this->XMLSchemaVersion}\54\x20\142\151\156\x64\151\156\147\124\x79\x70\x65\75{$bindingType}"); $this->appendDebug("\x70\141\x72\x61\x6d\x65\x74\x65\162\163\75" . $this->varDump($parameters)); if ($direction != "\x69\156\x70\x75\x74" && $direction != "\157\165\164\x70\165\164") { $this->debug("\124\150\145\40\166\141\154\165\145\x20\157\146\x20\x74\x68\x65\x20\134\x24\144\x69\x72\x65\x63\164\x69\x6f\x6e\x20\x61\x72\x67\165\155\x65\x6e\164\x20\x6e\x65\x65\144\163\40\x74\157\x20\x62\145\40\x65\x69\x74\x68\145\162\x20\x22\151\156\x70\x75\x74\42\40\x6f\x72\40\x22\x6f\x75\164\x70\165\164\x22"); $this->setError("\x54\150\145\x20\x76\141\x6c\x75\x65\x20\157\146\40\164\x68\x65\40\x5c\44\x64\151\162\x65\x63\x74\151\x6f\156\x20\x61\162\147\165\155\x65\x6e\164\40\156\145\145\x64\163\x20\x74\x6f\x20\x62\145\x20\x65\x69\x74\150\x65\162\40\x22\x69\x6e\x70\165\x74\x22\x20\157\x72\x20\x22\x6f\165\164\x70\165\164\42"); return false; } if (!($opData = $this->getOperationData($operation, $bindingType))) { $this->debug("\125\156\x61\x62\154\x65\40\x74\x6f\40\162\145\x74\x72\x69\x65\166\x65\40\127\x53\104\114\40\144\x61\x74\x61\x20\146\157\x72\40\157\x70\x65\x72\141\x74\151\x6f\156\72\x20" . $operation . "\x20\142\x69\156\144\151\x6e\x67\124\171\160\145\x3a\40" . $bindingType); $this->setError("\x55\x6e\141\x62\154\145\40\x74\x6f\x20\x72\x65\164\x72\x69\145\166\145\40\127\x53\x44\114\x20\x64\141\164\x61\40\x66\157\162\40\x6f\x70\x65\162\141\164\x69\x6f\x6e\72\x20" . $operation . "\x20\x62\151\x6e\144\x69\156\x67\x54\x79\160\145\x3a\40" . $bindingType); return false; } $this->debug("\x69\x6e\x20\x73\145\162\151\141\154\151\x7a\145\122\120\x43\120\141\162\x61\x6d\145\164\145\x72\x73\72\40\x6f\160\x44\x61\x74\x61\x3a"); $this->appendDebug($this->varDump($opData)); $encodingStyle = "\150\164\164\160\72\57\x2f\x73\x63\150\145\x6d\141\x73\56\170\x6d\x6c\163\157\141\160\x2e\x6f\x72\x67\57\x73\157\x61\160\57\145\x6e\x63\157\x64\x69\156\147\57"; if ($direction == "\151\156\160\x75\164" && isset($opData["\157\x75\x74\x70\165\164"]["\145\x6e\143\x6f\x64\x69\156\x67\123\164\x79\154\x65"]) && $opData["\x6f\x75\164\x70\165\164"]["\x65\x6e\x63\x6f\144\151\x6e\x67\123\164\171\x6c\x65"] != $encodingStyle) { $encodingStyle = $opData["\157\165\x74\x70\165\164"]["\x65\x6e\143\x6f\x64\151\156\x67\x53\x74\171\x6c\145"]; $enc_style = $encodingStyle; } $xml = ''; if (isset($opData[$direction]["\x70\x61\x72\164\163"]) && sizeof($opData[$direction]["\160\x61\162\164\x73"]) > 0) { $parts =& $opData[$direction]["\x70\141\x72\x74\163"]; $part_count = sizeof($parts); $style = $opData["\163\164\x79\x6c\145"]; $use = $opData[$direction]["\x75\x73\x65"]; $this->debug("\x68\x61\x76\145\x20{$part_count}\x20\160\x61\x72\164\x28\x73\x29\40\164\x6f\40\x73\145\x72\151\x61\x6c\x69\172\145\40\x75\163\x69\x6e\x67\40{$style}\57{$use}"); if (is_array($parameters)) { $parametersArrayType = $this->isArraySimpleOrStruct($parameters); $parameter_count = count($parameters); $this->debug("\x68\x61\x76\x65\x20{$parameter_count}\x20\160\141\162\x61\x6d\x65\164\x65\162\50\163\x29\40\160\162\157\166\x69\144\145\x64\x20\x61\163\40{$parametersArrayType}\40\x74\157\40\x73\x65\x72\151\x61\x6c\151\172\145"); if ($style == "\144\x6f\143\x75\x6d\145\x6e\164" && $use == "\154\x69\164\145\162\141\x6c" && $part_count == 1 && isset($parts["\x70\x61\162\141\x6d\145\164\145\x72\x73"])) { $this->debug("\x63\x68\x65\x63\153\40\167\x68\x65\x74\150\145\x72\x20\164\150\145\x20\x63\x61\154\x6c\145\x72\40\x68\x61\x73\40\167\162\x61\160\x70\x65\144\x20\x74\150\145\40\160\141\162\141\155\145\164\145\162\163"); if ($direction == "\x6f\165\164\160\165\164" && $parametersArrayType == "\141\162\162\x61\171\123\x69\155\x70\154\145" && $parameter_count == 1) { $this->debug("\143\x68\x61\x6e\147\145\40\x73\151\x6d\x70\154\x65\x20\141\x72\x72\x61\171\40\x74\x6f\x20\x61\x73\x73\x6f\x63\151\141\164\151\x76\145\x20\167\x69\164\150\40\47\160\x61\162\x61\x6d\145\x74\x65\162\x73\47\x20\x65\154\x65\155\x65\x6e\x74"); $parameters["\x70\x61\x72\141\x6d\x65\x74\145\162\163"] = $parameters[0]; unset($parameters[0]); } if (($parametersArrayType == "\141\162\x72\141\171\123\164\162\165\x63\164" || $parameter_count == 0) && !isset($parameters["\160\x61\x72\141\155\x65\x74\145\162\163"])) { $this->debug("\143\150\145\x63\153\40\167\x68\145\x74\150\145\162\x20\x63\141\x6c\x6c\145\162\x27\x73\40\160\x61\162\141\155\145\164\145\162\x73\40\155\x61\164\143\x68\x20\x74\150\x65\x20\167\162\141\160\x70\x65\x64\x20\157\x6e\x65\x73"); if ($this->parametersMatchWrapped($parts["\160\141\x72\141\x6d\145\164\145\x72\163"], $parameters)) { $this->debug("\167\162\141\160\x20\164\150\145\x20\x70\141\162\141\155\145\164\145\x72\163\40\x66\157\x72\40\164\x68\145\x20\x63\141\x6c\154\145\162"); $parameters = array("\160\141\x72\141\x6d\145\164\x65\x72\163" => $parameters); $parameter_count = 1; } } } foreach ($parts as $name => $type) { $this->debug("\163\x65\162\x69\141\154\x69\x7a\x69\156\147\x20\160\x61\162\x74\x20{$name}\x20\x6f\146\x20\164\171\160\x65\x20{$type}"); if (isset($opData[$direction]["\145\x6e\x63\157\144\x69\x6e\x67\123\x74\x79\154\145"]) && $encodingStyle != $opData[$direction]["\x65\156\143\157\x64\151\156\147\123\x74\171\x6c\x65"]) { $encodingStyle = $opData[$direction]["\145\x6e\143\x6f\x64\151\156\x67\123\x74\171\x6c\x65"]; $enc_style = $encodingStyle; } else { $enc_style = false; } if ($parametersArrayType == "\141\x72\x72\x61\x79\x53\x69\x6d\x70\x6c\145") { $p = array_shift($parameters); $this->debug("\143\141\x6c\x6c\151\156\147\40\x73\145\x72\x69\141\154\x69\172\x65\124\171\x70\x65\x20\x77\x2f\x69\x6e\x64\145\x78\145\x64\40\x70\141\162\141\155"); $xml .= $this->serializeType($name, $type, $p, $use, $enc_style); } elseif (isset($parameters[$name])) { $this->debug("\143\x61\x6c\154\x69\156\x67\40\x73\145\162\151\141\x6c\151\172\x65\124\171\160\145\x20\x77\57\156\x61\155\x65\x64\x20\160\x61\x72\x61\x6d"); $xml .= $this->serializeType($name, $type, $parameters[$name], $use, $enc_style); } else { $this->debug("\143\x61\154\x6c\x69\x6e\147\40\x73\x65\x72\x69\x61\154\x69\x7a\145\124\171\160\x65\x20\x77\57\x6e\x75\x6c\154\40\x70\x61\162\141\155"); $xml .= $this->serializeType($name, $type, null, $use, $enc_style); } } } else { $this->debug("\x6e\x6f\40\160\x61\x72\141\x6d\x65\164\145\162\163\x20\160\141\x73\163\x65\144\56"); } } $this->debug("\163\145\x72\151\141\154\151\x7a\145\x52\120\103\120\141\162\141\155\145\164\x65\162\163\40\x72\x65\x74\x75\162\x6e\151\156\x67\72\x20{$xml}"); return $xml; } function serializeParameters($operation, $direction, $parameters) { $this->debug("\x69\156\40\163\x65\162\x69\x61\x6c\x69\x7a\x65\x50\141\162\x61\x6d\x65\x74\145\162\163\72\40\157\160\x65\x72\141\164\151\x6f\x6e\x3d{$operation}\x2c\40\x64\151\x72\145\x63\164\x69\x6f\156\75{$direction}\x2c\x20\130\115\x4c\x53\x63\150\145\x6d\141\126\x65\x72\x73\151\x6f\x6e\x3d{$this->XMLSchemaVersion}"); $this->appendDebug("\x70\141\x72\141\155\145\164\145\x72\163\x3d" . $this->varDump($parameters)); if ($direction != "\x69\156\x70\165\164" && $direction != "\x6f\x75\164\160\165\164") { $this->debug("\x54\150\x65\x20\x76\x61\154\165\x65\x20\157\x66\x20\164\150\145\40\134\x24\x64\151\x72\145\x63\x74\151\x6f\x6e\40\141\162\x67\165\155\145\156\x74\x20\x6e\x65\145\144\163\x20\x74\x6f\40\x62\145\40\145\x69\164\150\x65\162\40\x22\x69\x6e\160\165\x74\x22\40\157\x72\x20\x22\157\x75\x74\160\165\164\42"); $this->setError("\x54\x68\145\x20\x76\141\154\165\145\x20\x6f\146\40\x74\150\x65\x20\134\x24\x64\151\x72\x65\x63\164\x69\157\156\40\141\162\x67\x75\x6d\x65\156\164\40\156\145\145\144\x73\x20\x74\157\40\x62\x65\x20\145\x69\x74\150\x65\x72\x20\42\151\156\160\x75\164\42\x20\x6f\x72\40\x22\x6f\x75\164\x70\165\164\x22"); return false; } if (!($opData = $this->getOperationData($operation))) { $this->debug("\125\x6e\x61\x62\x6c\145\x20\x74\157\40\162\145\164\162\x69\x65\166\x65\40\127\x53\104\x4c\x20\144\141\x74\141\40\x66\157\162\40\x6f\160\145\x72\141\164\x69\157\x6e\x3a\40" . $operation); $this->setError("\125\x6e\x61\142\154\145\40\164\157\40\x72\145\164\162\x69\145\166\145\x20\127\123\x44\x4c\40\144\141\x74\141\x20\x66\x6f\x72\x20\157\160\x65\162\141\x74\151\x6f\156\72\x20" . $operation); return false; } $this->debug("\157\160\x44\x61\164\x61\x3a"); $this->appendDebug($this->varDump($opData)); $encodingStyle = "\150\164\x74\x70\72\57\57\163\143\x68\x65\x6d\x61\163\x2e\170\x6d\x6c\x73\157\x61\x70\56\x6f\x72\x67\x2f\x73\x6f\x61\x70\57\x65\x6e\x63\x6f\x64\x69\x6e\x67\57"; if ($direction == "\151\156\x70\165\x74" && isset($opData["\x6f\165\164\160\165\x74"]["\145\x6e\143\157\144\x69\x6e\147\123\164\x79\x6c\x65"]) && $opData["\157\165\164\x70\165\164"]["\145\x6e\x63\x6f\x64\x69\156\147\x53\x74\x79\154\145"] != $encodingStyle) { $encodingStyle = $opData["\157\x75\x74\x70\x75\x74"]["\x65\x6e\143\157\144\151\x6e\x67\x53\164\x79\154\145"]; $enc_style = $encodingStyle; } $xml = ''; if (isset($opData[$direction]["\x70\x61\162\x74\163"]) && sizeof($opData[$direction]["\160\141\x72\164\163"]) > 0) { $use = $opData[$direction]["\x75\x73\x65"]; $this->debug("\x75\x73\x65\75{$use}"); $this->debug("\147\x6f\164\x20" . count($opData[$direction]["\160\x61\x72\x74\163"]) . "\x20\160\x61\162\x74\50\163\x29"); if (is_array($parameters)) { $parametersArrayType = $this->isArraySimpleOrStruct($parameters); $this->debug("\150\x61\x76\x65\40" . $parametersArrayType . "\40\160\x61\162\x61\x6d\x65\164\145\162\163"); foreach ($opData[$direction]["\160\141\x72\164\163"] as $name => $type) { $this->debug("\163\x65\162\x69\141\x6c\151\x7a\x69\x6e\147\x20\x70\141\x72\164\40\42" . $name . "\x22\40\157\x66\x20\164\x79\x70\x65\x20\42" . $type . "\42"); if (isset($opData[$direction]["\x65\156\x63\x6f\144\x69\156\x67\123\x74\171\x6c\145"]) && $encodingStyle != $opData[$direction]["\145\x6e\x63\157\144\x69\x6e\x67\123\x74\x79\154\145"]) { $encodingStyle = $opData[$direction]["\x65\156\143\157\x64\x69\x6e\147\123\164\x79\154\145"]; $enc_style = $encodingStyle; } else { $enc_style = false; } if ($parametersArrayType == "\141\x72\x72\141\171\x53\x69\x6d\160\154\x65") { $p = array_shift($parameters); $this->debug("\143\141\154\154\151\156\147\40\163\x65\162\151\141\x6c\151\172\145\x54\x79\x70\145\40\x77\57\151\x6e\x64\145\170\145\144\40\160\x61\162\141\155"); $xml .= $this->serializeType($name, $type, $p, $use, $enc_style); } elseif (isset($parameters[$name])) { $this->debug("\x63\141\x6c\154\151\156\147\x20\x73\145\162\151\x61\x6c\x69\x7a\x65\x54\x79\160\x65\40\167\57\156\x61\x6d\x65\144\x20\x70\141\162\141\x6d"); $xml .= $this->serializeType($name, $type, $parameters[$name], $use, $enc_style); } else { $this->debug("\x63\141\x6c\154\x69\x6e\x67\40\x73\x65\x72\x69\x61\x6c\x69\172\145\x54\x79\x70\145\40\x77\x2f\156\x75\x6c\x6c\x20\160\x61\x72\141\155"); $xml .= $this->serializeType($name, $type, null, $use, $enc_style); } } } else { $this->debug("\156\x6f\40\160\x61\162\141\155\145\164\x65\x72\x73\x20\160\x61\163\x73\145\x64\x2e"); } } $this->debug("\163\x65\162\151\x61\154\x69\x7a\x65\x50\x61\x72\x61\x6d\145\164\x65\162\x73\40\x72\x65\164\x75\162\x6e\151\156\147\72\40{$xml}"); return $xml; } function serializeType($name, $type, $value, $use = "\x65\x6e\x63\157\x64\145\144", $encodingStyle = false, $unqualified = false) { $this->debug("\151\x6e\x20\x73\x65\x72\x69\x61\154\x69\172\145\124\x79\x70\145\72\x20\156\x61\x6d\x65\x3d{$name}\x2c\40\x74\x79\160\x65\75{$type}\x2c\x20\x75\x73\145\75{$use}\54\40\145\156\x63\x6f\144\x69\x6e\147\x53\x74\x79\154\145\x3d{$encodingStyle}\x2c\x20\165\x6e\x71\x75\x61\154\151\x66\151\x65\x64\75" . ($unqualified ? "\165\x6e\161\165\141\x6c\x69\x66\151\x65\144" : "\161\x75\141\154\x69\146\x69\145\x64")); $this->appendDebug("\x76\141\x6c\x75\145\75" . $this->varDump($value)); if ($use == "\145\x6e\143\157\144\145\144" && $encodingStyle) { $encodingStyle = "\x20\123\x4f\101\x50\55\x45\x4e\126\72\145\156\143\x6f\x64\x69\156\x67\123\x74\171\154\145\75\x22" . $encodingStyle . "\42"; } if (is_object($value) && get_class($value) == "\x73\157\141\x70\166\x61\154") { if ($value->type_ns) { $type = $value->type_ns . "\72" . $value->type; $forceType = true; $this->debug("\151\x6e\40\x73\145\x72\x69\x61\x6c\x69\x7a\x65\124\x79\160\145\72\x20\163\157\x61\160\x76\x61\154\40\157\166\x65\x72\x72\x69\x64\145\163\40\x74\171\x70\x65\x20\164\x6f\40{$type}"); } elseif ($value->type) { $type = $value->type; $forceType = true; $this->debug("\x69\x6e\x20\163\145\162\151\141\154\x69\172\x65\x54\171\x70\145\x3a\x20\163\157\x61\x70\166\x61\154\x20\157\x76\145\x72\162\x69\144\145\x73\40\x74\x79\x70\145\40\x74\157\x20{$type}"); } else { $forceType = false; $this->debug("\151\156\x20\163\x65\x72\151\x61\x6c\x69\172\x65\124\x79\x70\x65\x3a\40\x73\157\141\x70\166\x61\x6c\40\x64\157\x65\163\x20\x6e\157\164\x20\x6f\166\x65\162\162\x69\144\x65\x20\x74\x79\x70\x65"); } $attrs = $value->attributes; $value = $value->value; $this->debug("\151\156\40\x73\x65\x72\x69\x61\x6c\151\172\145\x54\x79\160\145\72\40\163\x6f\141\160\166\x61\x6c\40\157\166\145\x72\x72\151\x64\x65\x73\x20\166\x61\154\165\x65\40\164\x6f\40{$value}"); if ($attrs) { if (!is_array($value)) { $value["\x21"] = $value; } foreach ($attrs as $n => $v) { $value["\x21" . $n] = $v; } $this->debug("\x69\x6e\40\163\145\162\x69\x61\154\151\172\x65\124\171\x70\145\x3a\40\x73\157\141\x70\166\x61\x6c\x20\x70\162\x6f\166\151\144\x65\163\40\141\x74\164\x72\x69\142\x75\164\145\x73"); } } else { $forceType = false; } $xml = ''; if (strpos($type, "\72")) { $uqType = substr($type, strrpos($type, "\x3a") + 1); $ns = substr($type, 0, strrpos($type, "\72")); $this->debug("\151\156\40\163\x65\162\x69\141\x6c\151\172\x65\124\171\160\x65\x3a\x20\x67\157\164\40\x61\x20\160\162\x65\146\151\170\145\144\40\x74\171\x70\x65\72\x20{$uqType}\54\40{$ns}"); if ($this->getNamespaceFromPrefix($ns)) { $ns = $this->getNamespaceFromPrefix($ns); $this->debug("\151\156\x20\163\145\x72\x69\141\154\x69\172\145\124\171\160\145\x3a\40\145\x78\160\x61\x6e\144\x65\144\40\160\162\x65\x66\x69\170\145\x64\x20\x74\171\x70\x65\72\40{$uqType}\x2c\40{$ns}"); } if ($ns == $this->XMLSchemaVersion || $ns == "\x68\164\164\160\x3a\x2f\x2f\x73\143\x68\x65\155\141\163\x2e\170\155\154\x73\157\141\x70\56\157\x72\147\x2f\x73\157\141\x70\x2f\x65\x6e\143\157\x64\151\156\147\57") { $this->debug("\151\x6e\x20\163\x65\162\151\x61\x6c\x69\x7a\x65\124\x79\x70\145\x3a\40\164\x79\160\x65\x20\156\x61\155\x65\163\x70\141\x63\145\x20\x69\x6e\x64\151\x63\x61\164\x65\x73\40\130\x4d\x4c\x20\x53\x63\x68\x65\x6d\141\40\157\x72\40\x53\x4f\101\120\x20\x45\x6e\x63\157\x64\151\x6e\x67\40\164\171\160\145"); if ($unqualified && $use == "\x6c\x69\164\145\x72\x61\x6c") { $elementNS = "\x20\x78\x6d\154\156\x73\75\x22\42"; } else { $elementNS = ''; } if (is_null($value)) { if ($use == "\x6c\x69\x74\145\162\141\154") { $xml = "\x3c{$name}{$elementNS}\57\76"; } else { $xml = "\x3c{$name}{$elementNS}\x20\x78\163\x69\72\156\151\x6c\x3d\42\x74\x72\165\145\42\40\x78\163\151\72\164\x79\x70\x65\x3d\42" . $this->getPrefixFromNamespace($ns) . "\x3a{$uqType}\42\57\x3e"; } $this->debug("\x69\156\40\163\145\162\x69\141\154\151\x7a\145\x54\x79\160\x65\72\x20\x72\x65\164\x75\162\156\x69\156\x67\x3a\x20{$xml}"); return $xml; } if ($uqType == "\x41\x72\x72\x61\171") { return $this->serialize_val($value, $name, false, false, false, false, $use); } if ($uqType == "\142\157\157\154\145\x61\156") { if (is_string($value) && $value == "\146\x61\154\163\145" || !$value) { $value = "\146\x61\154\163\145"; } else { $value = "\x74\162\165\145"; } } if ($uqType == "\x73\x74\x72\151\156\147" && gettype($value) == "\x73\164\x72\151\x6e\x67") { $value = $this->expandEntities($value); } if (($uqType == "\x6c\157\156\x67" || $uqType == "\x75\x6e\163\151\x67\x6e\145\x64\x4c\x6f\x6e\x67") && gettype($value) == "\144\x6f\165\142\154\145") { $value = sprintf("\x25\56\x30\154\146", $value); } if (!$this->getTypeDef($uqType, $ns)) { if ($use == "\154\x69\x74\145\x72\x61\154") { if ($forceType) { $xml = "\74{$name}{$elementNS}\40\x78\163\151\x3a\x74\x79\160\x65\x3d\x22" . $this->getPrefixFromNamespace($ns) . "\x3a{$uqType}\x22\76{$value}\74\57{$name}\76"; } else { $xml = "\x3c{$name}{$elementNS}\x3e{$value}\74\57{$name}\76"; } } else { $xml = "\74{$name}{$elementNS}\x20\x78\163\151\x3a\164\x79\160\145\x3d\42" . $this->getPrefixFromNamespace($ns) . "\x3a{$uqType}\42{$encodingStyle}\76{$value}\x3c\57{$name}\x3e"; } $this->debug("\151\x6e\x20\x73\x65\162\x69\141\x6c\x69\x7a\x65\124\171\160\145\x3a\x20\x72\145\x74\165\x72\156\x69\156\147\72\40{$xml}"); return $xml; } $this->debug("\143\165\163\164\x6f\x6d\x20\x74\x79\160\145\x20\145\x78\x74\x65\156\144\x73\x20\130\115\114\x20\x53\143\x68\145\x6d\141\x20\157\x72\40\123\117\101\x50\40\105\x6e\143\x6f\144\x69\156\147\40\156\x61\155\145\x73\x70\x61\143\x65\x20\x28\171\x75\143\x6b\x29"); } elseif ($ns == "\x68\164\164\x70\x3a\x2f\57\x78\x6d\154\56\141\160\x61\143\x68\x65\x2e\x6f\162\x67\x2f\x78\x6d\x6c\x2d\x73\x6f\x61\160") { $this->debug("\151\x6e\40\x73\x65\162\x69\141\154\151\172\x65\x54\x79\x70\x65\x3a\40\x61\160\x70\x65\141\x72\163\x20\x74\x6f\x20\x62\x65\40\x41\160\x61\143\x68\145\40\x53\117\101\x50\40\164\171\160\145"); if ($uqType == "\115\x61\160") { $tt_prefix = $this->getPrefixFromNamespace("\x68\164\x74\x70\x3a\57\57\170\x6d\154\56\141\160\141\143\x68\145\x2e\x6f\162\147\x2f\170\155\x6c\x2d\163\x6f\141\160"); if (!$tt_prefix) { $this->debug("\151\156\40\x73\145\162\151\141\x6c\151\172\x65\124\x79\160\145\72\40\101\144\x64\40\x6e\141\155\145\163\160\x61\143\x65\40\146\157\x72\x20\101\160\141\x63\x68\145\40\x53\x4f\x41\x50\40\x74\171\160\145"); $tt_prefix = "\x6e\x73" . rand(1000, 9999); $this->namespaces[$tt_prefix] = "\150\x74\164\160\x3a\57\57\170\155\154\x2e\141\x70\x61\x63\x68\x65\56\x6f\x72\x67\x2f\170\x6d\154\55\x73\157\x61\160"; $tt_prefix = $this->getPrefixFromNamespace("\x68\164\164\160\72\x2f\x2f\x78\155\x6c\x2e\x61\x70\141\143\150\145\56\x6f\x72\147\x2f\170\x6d\154\x2d\x73\x6f\x61\160"); } $contents = ''; foreach ($value as $k => $v) { $this->debug("\x73\x65\162\x69\141\x6c\151\x7a\x69\156\x67\40\x6d\x61\160\x20\145\154\x65\x6d\145\156\x74\72\x20\x6b\145\x79\x20{$k}\54\x20\166\141\x6c\165\145\40{$v}"); $contents .= "\x3c\x69\x74\x65\x6d\76"; $contents .= $this->serialize_val($k, "\153\x65\x79", false, false, false, false, $use); $contents .= $this->serialize_val($v, "\x76\141\154\165\x65", false, false, false, false, $use); $contents .= "\74\x2f\151\x74\x65\x6d\76"; } if ($use == "\154\x69\164\145\162\x61\x6c") { if ($forceType) { $xml = "\x3c{$name}\40\x78\163\151\x3a\164\171\160\x65\75\42" . $tt_prefix . "\72{$uqType}\x22\76{$contents}\74\x2f{$name}\76"; } else { $xml = "\74{$name}\x3e{$contents}\x3c\57{$name}\76"; } } else { $xml = "\x3c{$name}\x20\x78\x73\x69\72\x74\171\160\145\75\42" . $tt_prefix . "\72{$uqType}\42{$encodingStyle}\76{$contents}\74\57{$name}\x3e"; } $this->debug("\x69\156\x20\163\x65\x72\151\141\154\151\x7a\x65\124\x79\160\145\x3a\40\162\x65\x74\165\x72\156\x69\156\x67\x3a\x20{$xml}"); return $xml; } $this->debug("\151\x6e\40\163\x65\162\x69\141\154\151\x7a\145\x54\x79\x70\145\x3a\40\x41\160\x61\x63\x68\145\40\123\117\101\120\40\164\171\x70\145\54\40\x62\x75\x74\40\x6f\156\154\171\40\163\x75\x70\160\157\162\164\x20\x4d\x61\x70"); } } else { $this->debug("\151\156\40\x73\x65\162\151\x61\154\x69\172\x65\124\171\160\145\72\40\x4e\x6f\x20\156\x61\x6d\145\x73\x70\x61\x63\145\x20\146\x6f\162\x20\164\171\x70\x65\x20{$type}"); $ns = ''; $uqType = $type; } if (!($typeDef = $this->getTypeDef($uqType, $ns))) { $this->setError("{$type}\40\50{$uqType}\51\x20\x69\163\40\156\157\x74\x20\141\x20\163\x75\160\x70\x6f\x72\x74\x65\144\40\x74\x79\x70\145\x2e"); $this->debug("\151\x6e\x20\163\x65\162\151\x61\154\151\172\145\x54\171\x70\145\72\x20{$type}\x20\50{$uqType}\x29\x20\151\163\40\156\157\164\x20\x61\40\x73\x75\160\160\157\x72\164\145\144\x20\164\171\160\145\x2e"); return false; } else { $this->debug("\x69\156\40\x73\x65\x72\151\x61\x6c\x69\x7a\x65\124\x79\x70\x65\72\x20\146\x6f\165\x6e\144\40\164\171\160\x65\x44\145\x66"); $this->appendDebug("\x74\171\x70\x65\104\x65\x66\75" . $this->varDump($typeDef)); if (substr($uqType, -1) == "\136") { $uqType = substr($uqType, 0, -1); } } if (!isset($typeDef["\x70\150\160\124\x79\x70\x65"])) { $this->setError("{$type}\x20\x28{$uqType}\x29\x20\x68\x61\x73\40\156\x6f\40\160\x68\x70\x54\x79\x70\145\x2e"); $this->debug("\151\156\40\163\x65\162\151\141\x6c\151\x7a\x65\x54\x79\x70\145\x3a\40{$type}\x20\x28{$uqType}\x29\40\x68\141\163\x20\x6e\x6f\40\160\150\x70\x54\x79\160\x65\x2e"); return false; } $phpType = $typeDef["\160\x68\x70\x54\171\x70\x65"]; $this->debug("\x69\x6e\40\x73\145\x72\151\141\x6c\x69\x7a\145\124\171\160\145\x3a\x20\x75\161\124\x79\160\x65\x3a\x20{$uqType}\54\40\x6e\163\72\x20{$ns}\x2c\x20\x70\x68\160\164\171\x70\145\72\x20{$phpType}\54\x20\x61\x72\162\x61\x79\124\x79\160\145\72\40" . (isset($typeDef["\141\x72\x72\141\171\124\171\x70\145"]) ? $typeDef["\141\162\x72\x61\171\124\x79\x70\x65"] : '')); if ($phpType == "\163\x74\x72\x75\x63\x74") { if (isset($typeDef["\164\171\x70\x65\x43\x6c\141\163\163"]) && $typeDef["\164\x79\160\145\x43\x6c\x61\163\163"] == "\x65\x6c\145\155\x65\x6e\x74") { $elementName = $uqType; if (isset($typeDef["\146\157\162\155"]) && $typeDef["\146\157\162\x6d"] == "\161\165\x61\x6c\151\x66\x69\145\144") { $elementNS = "\40\x78\155\x6c\x6e\163\x3d\42{$ns}\x22"; } else { $elementNS = "\40\170\x6d\154\156\x73\75\x22\x22"; } } else { $elementName = $name; if ($unqualified) { $elementNS = "\x20\170\x6d\x6c\x6e\x73\x3d\x22\x22"; } else { $elementNS = ''; } } if (is_null($value)) { if ($use == "\x6c\x69\x74\x65\x72\x61\154") { $xml = "\74{$elementName}{$elementNS}\x2f\x3e"; } else { $xml = "\x3c{$elementName}{$elementNS}\x20\170\x73\151\x3a\156\x69\x6c\x3d\x22\164\162\x75\x65\42\40\170\163\x69\x3a\164\x79\160\x65\75\42" . $this->getPrefixFromNamespace($ns) . "\72{$uqType}\42\x2f\x3e"; } $this->debug("\x69\x6e\40\x73\145\x72\x69\x61\154\151\172\x65\124\171\160\x65\72\x20\162\145\x74\165\x72\156\151\x6e\x67\x3a\40{$xml}"); return $xml; } if (is_object($value)) { $value = get_object_vars($value); } if (is_array($value)) { $elementAttrs = $this->serializeComplexTypeAttributes($typeDef, $value, $ns, $uqType); if ($use == "\x6c\151\164\145\162\141\x6c") { if ($forceType) { $xml = "\74{$elementName}{$elementNS}{$elementAttrs}\40\170\x73\151\72\x74\x79\160\x65\x3d\x22" . $this->getPrefixFromNamespace($ns) . "\72{$uqType}\x22\x3e"; } else { $xml = "\74{$elementName}{$elementNS}{$elementAttrs}\x3e"; } } else { $xml = "\74{$elementName}{$elementNS}{$elementAttrs}\x20\170\163\x69\72\x74\x79\160\x65\75\42" . $this->getPrefixFromNamespace($ns) . "\x3a{$uqType}\x22{$encodingStyle}\x3e"; } if (isset($typeDef["\x73\151\x6d\160\x6c\145\103\157\156\x74\145\x6e\164"]) && $typeDef["\163\151\x6d\x70\x6c\x65\103\x6f\156\164\x65\x6e\164"] == "\164\162\165\145") { if (isset($value["\x21"])) { $xml .= $value["\x21"]; $this->debug("\x69\156\40\163\x65\x72\x69\141\154\151\x7a\145\124\x79\160\145\72\x20\163\x65\162\151\x61\154\x69\172\145\x64\40\163\151\x6d\x70\154\x65\x43\x6f\156\x74\x65\156\x74\40\146\157\162\x20\164\x79\x70\x65\40{$type}"); } else { $this->debug("\x69\x6e\x20\x73\x65\x72\151\141\154\x69\x7a\145\x54\x79\x70\x65\72\x20\156\157\x20\163\x69\155\x70\x6c\145\103\157\x6e\164\145\x6e\x74\40\164\x6f\40\x73\145\x72\151\x61\x6c\x69\172\145\x20\x66\157\162\40\x74\x79\160\x65\x20{$type}"); } } else { $xml .= $this->serializeComplexTypeElements($typeDef, $value, $ns, $uqType, $use, $encodingStyle); } $xml .= "\74\x2f{$elementName}\76"; } else { $this->debug("\x69\156\40\x73\145\162\151\x61\x6c\x69\x7a\x65\124\x79\160\x65\x3a\x20\x70\x68\160\124\x79\160\145\x20\x69\163\x20\x73\164\x72\165\x63\164\54\x20\142\x75\164\40\166\x61\154\x75\x65\x20\151\163\x20\156\157\x74\40\x61\x6e\40\x61\x72\162\x61\x79"); $this->setError("\160\150\160\124\171\x70\145\x20\x69\x73\x20\163\x74\x72\165\x63\x74\x2c\x20\142\x75\164\x20\x76\x61\x6c\x75\145\40\151\x73\40\156\x6f\x74\x20\x61\x6e\40\x61\x72\x72\x61\x79\72\x20\163\x65\x65\x20\144\x65\x62\165\x67\40\x6f\165\x74\160\x75\164\40\x66\x6f\162\40\144\x65\164\x61\x69\x6c\x73"); $xml = ''; } } elseif ($phpType == "\x61\x72\162\141\171") { if (isset($typeDef["\x66\x6f\162\155"]) && $typeDef["\x66\157\162\x6d"] == "\161\165\x61\154\x69\x66\151\x65\x64") { $elementNS = "\x20\x78\x6d\154\x6e\x73\x3d\x22{$ns}\x22"; } else { if ($unqualified) { $elementNS = "\40\170\x6d\x6c\156\163\x3d\x22\x22"; } else { $elementNS = ''; } } if (is_null($value)) { if ($use == "\154\x69\x74\145\x72\x61\154") { $xml = "\x3c{$name}{$elementNS}\x2f\76"; } else { $xml = "\74{$name}{$elementNS}\40\170\163\x69\72\x6e\x69\x6c\75\42\x74\162\165\x65\x22\x20\x78\x73\151\72\x74\171\x70\x65\75\x22" . $this->getPrefixFromNamespace("\150\x74\164\x70\x3a\57\x2f\x73\143\150\145\155\141\x73\x2e\x78\155\154\x73\157\141\160\56\157\162\147\57\163\157\141\x70\57\x65\x6e\x63\157\144\x69\x6e\x67\x2f") . "\72\x41\162\x72\x61\x79\x22\40" . $this->getPrefixFromNamespace("\x68\164\164\x70\72\x2f\57\163\143\150\145\x6d\141\x73\x2e\x78\x6d\154\163\157\x61\160\x2e\157\x72\x67\x2f\163\x6f\141\160\57\x65\x6e\143\x6f\144\x69\156\x67\x2f") . "\x3a\141\162\x72\x61\x79\x54\x79\160\x65\75\x22" . $this->getPrefixFromNamespace($this->getPrefix($typeDef["\141\x72\x72\x61\x79\x54\171\x70\145"])) . "\x3a" . $this->getLocalPart($typeDef["\141\x72\x72\x61\171\x54\x79\160\x65"]) . "\x5b\x30\135\x22\57\76"; } $this->debug("\151\x6e\40\x73\x65\x72\x69\x61\x6c\151\172\x65\124\x79\x70\x65\x3a\40\162\145\164\165\162\x6e\151\x6e\147\x3a\x20{$xml}"); return $xml; } if (isset($typeDef["\155\165\x6c\164\151\144\x69\x6d\x65\156\x73\151\157\156\141\x6c"])) { $nv = array(); foreach ($value as $v) { $cols = "\x2c" . sizeof($v); $nv = array_merge($nv, $v); } $value = $nv; } else { $cols = ''; } if (is_array($value) && sizeof($value) >= 1) { $rows = sizeof($value); $contents = ''; foreach ($value as $k => $v) { if (!in_array($typeDef["\141\162\x72\141\x79\124\x79\160\x65"], $this->typemap["\x68\164\164\160\72\x2f\x2f\167\167\167\56\167\x33\x2e\157\x72\147\x2f\x32\x30\60\x31\x2f\x58\115\114\x53\x63\x68\x65\x6d\141"])) { $contents .= $this->serializeType("\151\164\x65\155", $typeDef["\141\x72\x72\141\x79\x54\x79\x70\x65"], $v, $use); } else { $contents .= $this->serialize_val($v, "\x69\x74\x65\x6d", $typeDef["\141\x72\162\141\x79\124\x79\x70\x65"], null, $this->XMLSchemaVersion, false, $use); } } } else { $rows = 0; $contents = null; } if ($use == "\154\x69\164\x65\162\x61\154") { $xml = "\74{$name}{$elementNS}\76" . $contents . "\74\x2f{$name}\76"; } else { $xml = "\x3c{$name}{$elementNS}\x20\x78\x73\151\72\x74\171\x70\x65\75\42" . $this->getPrefixFromNamespace("\x68\164\x74\160\72\57\57\x73\x63\x68\x65\155\x61\x73\x2e\x78\x6d\154\163\x6f\x61\x70\56\157\162\147\x2f\163\x6f\x61\160\57\145\x6e\143\157\x64\151\x6e\147\57") . "\x3a\x41\162\x72\141\x79\x22\40" . $this->getPrefixFromNamespace("\150\x74\164\x70\x3a\57\57\163\x63\150\145\x6d\x61\x73\x2e\x78\155\154\163\157\141\160\56\x6f\x72\147\x2f\163\157\141\x70\x2f\x65\156\x63\157\144\151\x6e\147\57") . "\x3a\x61\x72\x72\141\171\124\x79\160\x65\75\42" . $this->getPrefixFromNamespace($this->getPrefix($typeDef["\141\x72\162\141\x79\x54\171\x70\145"])) . "\x3a" . $this->getLocalPart($typeDef["\141\x72\162\141\x79\124\x79\x70\145"]) . "\x5b{$rows}{$cols}\x5d\x22\x3e" . $contents . "\74\57{$name}\x3e"; } } elseif ($phpType == "\x73\143\141\154\x61\x72") { if (isset($typeDef["\146\157\162\x6d"]) && $typeDef["\146\x6f\162\155"] == "\161\165\x61\154\151\146\x69\x65\144") { $elementNS = "\x20\170\155\x6c\x6e\163\75\42{$ns}\42"; } else { if ($unqualified) { $elementNS = "\40\170\155\154\156\x73\75\x22\42"; } else { $elementNS = ''; } } if ($use == "\154\x69\164\x65\162\x61\154") { if ($forceType) { $xml = "\x3c{$name}{$elementNS}\x20\x78\x73\x69\72\164\x79\160\x65\75\42" . $this->getPrefixFromNamespace($ns) . "\72{$uqType}\x22\x3e{$value}\x3c\x2f{$name}\76"; } else { $xml = "\x3c{$name}{$elementNS}\76{$value}\74\57{$name}\76"; } } else { $xml = "\74{$name}{$elementNS}\x20\x78\x73\151\x3a\x74\171\x70\145\x3d\42" . $this->getPrefixFromNamespace($ns) . "\x3a{$uqType}\x22{$encodingStyle}\x3e{$value}\74\57{$name}\76"; } } $this->debug("\151\156\x20\x73\x65\x72\x69\141\x6c\151\x7a\145\124\x79\x70\145\x3a\40\162\x65\164\165\x72\x6e\x69\156\147\72\40{$xml}"); return $xml; } function serializeComplexTypeAttributes($typeDef, $value, $ns, $uqType) { $this->debug("\x73\x65\162\151\141\154\151\x7a\145\103\157\155\x70\154\x65\x78\x54\171\160\145\101\x74\164\162\x69\x62\x75\164\x65\x73\x20\x66\x6f\x72\x20\x58\x4d\114\x20\x53\x63\150\x65\x6d\141\x20\164\x79\160\x65\x20{$ns}\x3a{$uqType}"); $xml = ''; if (isset($typeDef["\145\x78\164\x65\x6e\163\151\x6f\156\102\x61\163\145"])) { $nsx = $this->getPrefix($typeDef["\x65\x78\x74\145\156\163\x69\157\x6e\x42\141\163\x65"]); $uqTypex = $this->getLocalPart($typeDef["\145\x78\x74\145\x6e\163\151\x6f\156\x42\x61\x73\x65"]); if ($this->getNamespaceFromPrefix($nsx)) { $nsx = $this->getNamespaceFromPrefix($nsx); } if ($typeDefx = $this->getTypeDef($uqTypex, $nsx)) { $this->debug("\x73\145\x72\x69\x61\154\151\172\145\40\141\x74\164\162\x69\x62\x75\164\145\163\40\146\x6f\x72\x20\x65\170\164\x65\x6e\163\151\157\x6e\x20\142\x61\x73\x65\x20{$nsx}\72{$uqTypex}"); $xml .= $this->serializeComplexTypeAttributes($typeDefx, $value, $nsx, $uqTypex); } else { $this->debug("\x65\x78\164\x65\156\163\151\x6f\156\40\x62\x61\163\145\x20{$nsx}\72{$uqTypex}\x20\x69\163\x20\x6e\157\164\40\x61\40\x73\165\x70\160\157\x72\164\145\144\40\x74\171\x70\145"); } } if (isset($typeDef["\141\x74\164\x72\163"]) && is_array($typeDef["\x61\x74\164\162\x73"])) { $this->debug("\163\145\x72\151\141\x6c\x69\172\x65\x20\x61\x74\164\162\x69\x62\x75\x74\x65\163\x20\146\x6f\x72\40\130\115\114\40\x53\x63\150\145\x6d\141\40\164\171\x70\x65\x20{$ns}\x3a{$uqType}"); if (is_array($value)) { $xvalue = $value; } elseif (is_object($value)) { $xvalue = get_object_vars($value); } else { $this->debug("\x76\x61\154\x75\145\x20\x69\163\40\156\x65\151\x74\150\x65\162\x20\141\x6e\x20\141\x72\162\x61\171\x20\x6e\157\162\x20\x61\156\40\157\x62\x6a\x65\143\164\x20\x66\x6f\162\40\130\x4d\114\40\123\143\150\x65\x6d\x61\x20\x74\171\160\x65\40{$ns}\x3a{$uqType}"); $xvalue = array(); } foreach ($typeDef["\x61\164\x74\x72\163"] as $aName => $attrs) { if (isset($xvalue["\x21" . $aName])) { $xname = "\41" . $aName; $this->debug("\166\x61\154\x75\145\x20\x70\x72\157\166\151\x64\145\x64\40\146\157\162\40\141\x74\164\x72\x69\x62\x75\x74\x65\x20{$aName}\x20\167\151\164\x68\40\153\x65\171\40{$xname}"); } elseif (isset($xvalue[$aName])) { $xname = $aName; $this->debug("\x76\x61\154\165\x65\40\160\x72\157\166\x69\144\x65\144\40\x66\x6f\162\x20\141\164\x74\162\x69\142\165\x74\145\x20{$aName}\40\167\x69\x74\150\40\153\x65\x79\40{$xname}"); } elseif (isset($attrs["\x64\145\146\141\165\x6c\164"])) { $xname = "\41" . $aName; $xvalue[$xname] = $attrs["\144\x65\146\141\165\154\x74"]; $this->debug("\165\163\x65\40\x64\x65\146\x61\x75\x6c\x74\40\x76\x61\x6c\x75\x65\40\157\x66\x20" . $xvalue[$aName] . "\40\x66\x6f\162\40\x61\164\x74\x72\151\142\x75\x74\x65\x20" . $aName); } else { $xname = ''; $this->debug("\156\x6f\x20\166\x61\x6c\165\x65\40\x70\x72\157\x76\x69\144\145\144\40\x66\x6f\x72\x20\141\164\164\x72\151\x62\x75\164\x65\40{$aName}"); } if ($xname) { $xml .= "\x20{$aName}\x3d\42" . $this->expandEntities($xvalue[$xname]) . "\42"; } } } else { $this->debug("\156\157\x20\141\164\x74\x72\x69\x62\x75\x74\145\163\40\164\x6f\x20\x73\145\x72\x69\141\154\151\x7a\145\40\x66\157\x72\40\130\115\114\40\x53\x63\x68\x65\155\141\40\164\x79\x70\145\x20{$ns}\72{$uqType}"); } return $xml; } function serializeComplexTypeElements($typeDef, $value, $ns, $uqType, $use = "\x65\156\143\157\x64\x65\x64", $encodingStyle = false) { $this->debug("\x69\156\x20\163\145\162\151\141\154\x69\x7a\145\103\157\x6d\x70\154\x65\170\124\171\x70\x65\105\x6c\145\155\145\156\164\163\40\146\x6f\162\x20\x58\x4d\114\40\123\143\x68\145\x6d\x61\40\x74\x79\160\145\x20{$ns}\x3a{$uqType}"); $xml = ''; if (isset($typeDef["\145\x78\164\145\x6e\x73\151\157\156\x42\x61\x73\145"])) { $nsx = $this->getPrefix($typeDef["\x65\170\164\145\x6e\x73\151\x6f\x6e\102\x61\x73\145"]); $uqTypex = $this->getLocalPart($typeDef["\145\170\164\x65\x6e\163\151\x6f\x6e\x42\141\x73\x65"]); if ($this->getNamespaceFromPrefix($nsx)) { $nsx = $this->getNamespaceFromPrefix($nsx); } if ($typeDefx = $this->getTypeDef($uqTypex, $nsx)) { $this->debug("\163\x65\162\x69\x61\x6c\151\x7a\145\x20\x65\x6c\145\x6d\145\x6e\164\163\x20\146\x6f\162\40\x65\170\x74\145\156\163\151\157\x6e\x20\x62\141\163\x65\40{$nsx}\72{$uqTypex}"); $xml .= $this->serializeComplexTypeElements($typeDefx, $value, $nsx, $uqTypex, $use, $encodingStyle); } else { $this->debug("\x65\x78\164\x65\156\163\151\157\156\40\x62\141\x73\x65\40{$nsx}\72{$uqTypex}\40\x69\x73\40\156\157\164\40\141\40\163\165\160\160\157\x72\x74\x65\x64\x20\x74\171\160\x65"); } } if (isset($typeDef["\x65\154\145\155\x65\x6e\164\163"]) && is_array($typeDef["\x65\154\145\x6d\x65\156\x74\163"])) { $this->debug("\x69\156\x20\x73\145\x72\x69\x61\154\x69\172\x65\x43\x6f\155\x70\x6c\x65\x78\x54\x79\x70\145\105\154\x65\x6d\x65\x6e\164\x73\54\x20\x73\145\162\x69\x61\154\151\172\145\40\x65\x6c\x65\155\x65\x6e\164\163\x20\146\x6f\x72\x20\130\115\114\x20\x53\x63\150\145\155\141\x20\x74\x79\160\145\x20{$ns}\x3a{$uqType}"); if (is_array($value)) { $xvalue = $value; } elseif (is_object($value)) { $xvalue = get_object_vars($value); } else { $this->debug("\166\x61\x6c\x75\145\x20\151\163\x20\x6e\145\x69\164\x68\x65\x72\x20\x61\x6e\40\141\162\x72\141\x79\40\156\157\x72\40\x61\156\x20\x6f\142\x6a\145\143\x74\40\x66\x6f\162\x20\x58\115\x4c\40\123\x63\150\x65\155\141\40\164\171\x70\145\x20{$ns}\72{$uqType}"); $xvalue = array(); } if (count($typeDef["\145\x6c\x65\155\x65\x6e\164\x73"]) != count($xvalue)) { $optionals = true; } foreach ($typeDef["\x65\x6c\145\155\145\x6e\x74\163"] as $eName => $attrs) { if (!isset($xvalue[$eName])) { if (isset($attrs["\144\x65\146\141\x75\x6c\x74"])) { $xvalue[$eName] = $attrs["\x64\x65\146\x61\x75\154\x74"]; $this->debug("\x75\163\145\x20\144\x65\x66\141\165\154\x74\x20\x76\141\x6c\x75\x65\x20\x6f\x66\40" . $xvalue[$eName] . "\x20\x66\157\x72\x20\x65\x6c\x65\155\x65\156\164\x20" . $eName); } } if (isset($optionals) && !isset($xvalue[$eName]) && (!isset($attrs["\x6e\151\154\154\x61\x62\154\145"]) || $attrs["\156\x69\x6c\154\x61\x62\154\145"] != "\164\162\x75\x65")) { if (isset($attrs["\155\151\156\117\143\x63\165\162\x73"]) && $attrs["\x6d\151\156\117\143\143\x75\x72\163"] != "\60") { $this->debug("\141\x70\160\141\x72\x65\x6e\164\x20\x65\x72\x72\x6f\162\x3a\x20\x6e\157\40\166\141\154\165\x65\x20\x70\162\157\166\x69\144\x65\x64\x20\146\x6f\162\x20\x65\x6c\145\x6d\x65\156\x74\40{$eName}\x20\x77\x69\164\x68\x20\x6d\x69\x6e\x4f\143\143\165\x72\x73\x3d" . $attrs["\x6d\x69\x6e\117\143\x63\x75\162\163"]); } $this->debug("\156\157\x20\166\x61\x6c\x75\145\40\x70\x72\x6f\x76\x69\144\145\144\40\146\x6f\x72\x20\x63\157\155\x70\x6c\x65\170\124\171\160\x65\40\145\x6c\x65\155\x65\x6e\x74\40{$eName}\x20\x61\x6e\x64\x20\145\154\145\x6d\x65\x6e\164\40\x69\x73\x20\156\157\164\x20\156\x69\154\154\x61\x62\x6c\x65\x2c\40\163\157\x20\163\x65\162\x69\x61\154\x69\172\145\x20\156\x6f\x74\x68\x69\156\147"); } else { if (isset($xvalue[$eName])) { $v = $xvalue[$eName]; } else { $v = null; } if (isset($attrs["\x66\157\x72\x6d"])) { $unqualified = $attrs["\146\157\162\155"] == "\x75\156\161\165\x61\x6c\x69\146\x69\145\144"; } else { $unqualified = false; } if (isset($attrs["\x6d\141\x78\117\143\143\x75\162\163"]) && ($attrs["\x6d\x61\170\x4f\x63\x63\165\162\x73"] == "\x75\x6e\142\x6f\x75\x6e\x64\x65\x64" || $attrs["\x6d\141\170\x4f\x63\143\165\162\x73"] > 1) && isset($v) && is_array($v) && $this->isArraySimpleOrStruct($v) == "\x61\162\162\141\171\x53\x69\155\x70\x6c\x65") { $vv = $v; foreach ($vv as $k => $v) { if (isset($attrs["\164\x79\160\145"]) || isset($attrs["\162\x65\x66"])) { $xml .= $this->serializeType($eName, isset($attrs["\164\x79\x70\145"]) ? $attrs["\x74\x79\x70\x65"] : $attrs["\x72\145\x66"], $v, $use, $encodingStyle, $unqualified); } else { $this->debug("\x63\141\154\154\151\x6e\x67\x20\x73\x65\x72\151\x61\x6c\x69\172\x65\137\166\x61\154\x28\51\40\x66\157\x72\x20{$v}\54\40{$eName}\54\40\x66\x61\x6c\x73\145\54\40\146\x61\x6c\163\145\x2c\40\x66\x61\154\163\x65\x2c\40\x66\x61\x6c\x73\x65\54\x20{$use}"); $xml .= $this->serialize_val($v, $eName, false, false, false, false, $use); } } } else { if (is_null($v) && isset($attrs["\155\x69\156\x4f\143\x63\x75\162\x73"]) && $attrs["\x6d\151\x6e\117\143\x63\165\x72\163"] == "\x30") { } elseif (is_null($v) && isset($attrs["\156\151\154\154\x61\142\x6c\145"]) && $attrs["\x6e\151\154\154\x61\x62\x6c\145"] == "\x74\x72\x75\x65") { $xml .= $this->serializeType($eName, isset($attrs["\164\171\x70\x65"]) ? $attrs["\164\171\x70\x65"] : $attrs["\x72\145\x66"], $v, $use, $encodingStyle, $unqualified); } elseif (isset($attrs["\164\x79\160\145"]) || isset($attrs["\x72\145\x66"])) { $xml .= $this->serializeType($eName, isset($attrs["\x74\171\x70\x65"]) ? $attrs["\x74\x79\160\x65"] : $attrs["\x72\x65\x66"], $v, $use, $encodingStyle, $unqualified); } else { $this->debug("\x63\141\154\x6c\x69\156\147\40\163\145\x72\151\x61\154\151\172\145\137\166\141\x6c\50\x29\x20\x66\x6f\162\40{$v}\54\x20{$eName}\x2c\x20\x66\141\x6c\x73\145\x2c\x20\x66\141\154\x73\145\x2c\x20\x66\141\x6c\x73\x65\x2c\x20\146\x61\154\163\x65\x2c\40{$use}"); $xml .= $this->serialize_val($v, $eName, false, false, false, false, $use); } } } } } else { $this->debug("\156\157\40\x65\154\x65\x6d\x65\156\x74\163\40\x74\157\x20\163\x65\x72\151\x61\154\x69\172\145\x20\x66\157\162\40\130\115\x4c\x20\123\143\150\145\x6d\141\40\x74\x79\160\145\x20{$ns}\x3a{$uqType}"); } return $xml; } function addComplexType($name, $typeClass = "\143\157\155\x70\154\x65\170\124\171\160\x65", $phpType = "\141\x72\x72\141\171", $compositor = '', $restrictionBase = '', $elements = array(), $attrs = array(), $arrayType = '') { if (count($elements) > 0) { $eElements = array(); foreach ($elements as $n => $e) { $ee = array(); foreach ($e as $k => $v) { $k = strpos($k, "\72") ? $this->expandQname($k) : $k; $v = strpos($v, "\72") ? $this->expandQname($v) : $v; $ee[$k] = $v; } $eElements[$n] = $ee; } $elements = $eElements; } if (count($attrs) > 0) { foreach ($attrs as $n => $a) { foreach ($a as $k => $v) { $k = strpos($k, "\x3a") ? $this->expandQname($k) : $k; $v = strpos($v, "\72") ? $this->expandQname($v) : $v; $aa[$k] = $v; } $eAttrs[$n] = $aa; } $attrs = $eAttrs; } $restrictionBase = strpos($restrictionBase, "\72") ? $this->expandQname($restrictionBase) : $restrictionBase; $arrayType = strpos($arrayType, "\x3a") ? $this->expandQname($arrayType) : $arrayType; $typens = isset($this->namespaces["\x74\x79\160\145\163"]) ? $this->namespaces["\x74\x79\160\x65\163"] : $this->namespaces["\x74\x6e\163"]; $this->schemas[$typens][0]->addComplexType($name, $typeClass, $phpType, $compositor, $restrictionBase, $elements, $attrs, $arrayType); } function addSimpleType($name, $restrictionBase = '', $typeClass = "\x73\x69\155\x70\x6c\145\x54\171\160\145", $phpType = "\163\143\x61\x6c\x61\x72", $enumeration = array()) { $restrictionBase = strpos($restrictionBase, "\x3a") ? $this->expandQname($restrictionBase) : $restrictionBase; $typens = isset($this->namespaces["\x74\x79\x70\x65\163"]) ? $this->namespaces["\x74\x79\160\x65\163"] : $this->namespaces["\x74\x6e\163"]; $this->schemas[$typens][0]->addSimpleType($name, $restrictionBase, $typeClass, $phpType, $enumeration); } function addElement($attrs) { $typens = isset($this->namespaces["\x74\x79\160\x65\x73"]) ? $this->namespaces["\x74\x79\160\x65\163"] : $this->namespaces["\x74\156\163"]; $this->schemas[$typens][0]->addElement($attrs); } function addOperation($name, $in = false, $out = false, $namespace = false, $soapaction = false, $style = "\162\160\x63", $use = "\145\x6e\x63\157\144\145\144", $documentation = '', $encodingStyle = '') { if ($use == "\145\x6e\x63\157\x64\145\x64" && $encodingStyle == '') { $encodingStyle = "\150\x74\x74\x70\x3a\x2f\57\163\x63\x68\x65\155\141\163\56\x78\155\x6c\x73\x6f\141\160\x2e\x6f\x72\147\x2f\x73\157\141\160\57\145\x6e\143\157\x64\x69\x6e\x67\57"; } if ($style == "\x64\157\143\165\x6d\145\156\164") { $elements = array(); foreach ($in as $n => $t) { $elements[$n] = array("\156\141\x6d\145" => $n, "\164\171\160\x65" => $t, "\x66\x6f\x72\155" => "\x75\x6e\161\x75\x61\154\151\146\x69\145\x64"); } $this->addComplexType($name . "\122\145\161\165\x65\x73\164\124\171\160\x65", "\x63\x6f\x6d\160\x6c\145\x78\x54\x79\160\145", "\163\x74\x72\x75\x63\x74", "\141\x6c\154", '', $elements); $this->addElement(array("\x6e\141\155\x65" => $name, "\164\171\160\145" => $name . "\122\145\161\165\x65\163\164\124\171\160\x65")); $in = array("\x70\x61\162\141\x6d\145\164\x65\x72\163" => "\x74\x6e\163\72" . $name . "\136"); $elements = array(); foreach ($out as $n => $t) { $elements[$n] = array("\156\x61\x6d\x65" => $n, "\x74\171\x70\x65" => $t, "\x66\157\162\155" => "\165\156\161\x75\x61\x6c\151\x66\x69\145\x64"); } $this->addComplexType($name . "\x52\x65\x73\x70\157\x6e\163\145\x54\x79\x70\145", "\x63\157\155\x70\x6c\x65\x78\124\171\160\145", "\x73\x74\162\x75\143\164", "\141\154\x6c", '', $elements); $this->addElement(array("\156\x61\x6d\x65" => $name . "\x52\145\163\160\x6f\x6e\x73\x65", "\164\x79\x70\x65" => $name . "\x52\145\163\160\157\156\x73\x65\x54\171\160\x65", "\146\157\x72\155" => "\161\165\x61\154\151\146\x69\x65\144")); $out = array("\x70\x61\x72\141\155\145\x74\x65\x72\x73" => "\x74\x6e\x73\72" . $name . "\122\x65\x73\x70\x6f\x6e\x73\x65" . "\x5e"); } $this->bindings[$this->serviceName . "\x42\151\156\144\151\156\x67"]["\x6f\x70\145\x72\141\164\151\157\156\163"][$name] = array("\x6e\141\x6d\145" => $name, "\142\x69\156\x64\151\x6e\147" => $this->serviceName . "\x42\x69\156\x64\x69\156\147", "\145\156\x64\x70\157\x69\156\164" => $this->endpoint, "\x73\x6f\141\x70\x41\143\164\151\157\156" => $soapaction, "\163\164\x79\154\x65" => $style, "\151\x6e\x70\x75\x74" => array("\x75\x73\x65" => $use, "\156\x61\155\145\163\x70\x61\143\145" => $namespace, "\145\156\143\157\x64\151\x6e\x67\123\164\171\x6c\145" => $encodingStyle, "\155\145\163\x73\x61\x67\x65" => $name . "\x52\145\161\165\145\x73\164", "\160\x61\162\x74\x73" => $in), "\157\x75\x74\x70\165\164" => array("\165\x73\x65" => $use, "\156\x61\x6d\x65\x73\160\141\143\145" => $namespace, "\145\x6e\x63\x6f\x64\x69\156\x67\123\x74\171\x6c\145" => $encodingStyle, "\x6d\x65\163\x73\x61\147\x65" => $name . "\x52\x65\163\160\x6f\x6e\163\145", "\160\x61\162\x74\163" => $out), "\156\x61\155\x65\x73\x70\141\143\x65" => $namespace, "\164\162\x61\156\x73\x70\x6f\162\x74" => "\150\164\x74\x70\x3a\x2f\x2f\x73\143\x68\145\155\x61\x73\56\x78\x6d\x6c\163\x6f\x61\160\x2e\x6f\x72\x67\x2f\x73\157\141\x70\57\150\164\164\x70", "\x64\157\x63\165\155\x65\156\x74\141\164\x69\157\x6e" => $documentation); if ($in) { foreach ($in as $pName => $pType) { if (strpos($pType, "\x3a")) { $pType = $this->getNamespaceFromPrefix($this->getPrefix($pType)) . "\72" . $this->getLocalPart($pType); } $this->messages[$name . "\122\145\161\165\x65\x73\x74"][$pName] = $pType; } } else { $this->messages[$name . "\x52\145\161\165\x65\x73\164"] = "\x30"; } if ($out) { foreach ($out as $pName => $pType) { if (strpos($pType, "\72")) { $pType = $this->getNamespaceFromPrefix($this->getPrefix($pType)) . "\x3a" . $this->getLocalPart($pType); } $this->messages[$name . "\122\145\163\160\157\156\x73\145"][$pName] = $pType; } } else { $this->messages[$name . "\122\145\163\160\x6f\x6e\163\x65"] = "\60"; } return true; } } goto sxGBs; iQCdD: class soap_transport_http extends nusoap_base { var $url = ''; var $uri = ''; var $digest_uri = ''; var $scheme = ''; var $host = ''; var $port = ''; var $path = ''; var $request_method = "\x50\x4f\x53\124"; var $protocol_version = "\61\56\60"; var $encoding = ''; var $outgoing_headers = array(); var $incoming_headers = array(); var $incoming_cookies = array(); var $outgoing_payload = ''; var $incoming_payload = ''; var $response_status_line; var $useSOAPAction = true; var $persistentConnection = false; var $ch = false; var $ch_options = array(); var $use_curl = false; var $proxy = null; var $username = ''; var $password = ''; var $authtype = ''; var $digestRequest = array(); var $certRequest = array(); function __construct($url, $curl_options = null, $use_curl = false) { parent::__construct(); $this->debug("\x63\x74\157\x72\40\165\162\x6c\75{$url}\40\165\163\145\137\x63\165\162\154\75{$use_curl}\40\143\x75\162\154\137\157\x70\x74\151\157\x6e\x73\72"); $this->appendDebug($this->varDump($curl_options)); $this->setURL($url); if (is_array($curl_options)) { $this->ch_options = $curl_options; } $this->use_curl = $use_curl; preg_match("\x2f\134\x24\x52\x65\166\x69\163\151\x6f" . "\156\72\40\50\x5b\x5e\x20\x5d\53\51\x2f", $this->revision, $rev); $this->setHeader("\125\x73\x65\x72\55\101\147\x65\x6e\164", $this->title . "\57" . $this->version . "\40\x28" . $rev[1] . "\51"); } function setCurlOption($option, $value) { $this->debug("\x73\x65\x74\x43\165\x72\x6c\x4f\160\164\151\x6f\x6e\40\157\160\164\151\157\x6e\x3d{$option}\x2c\x20\166\141\154\x75\145\75"); $this->appendDebug($this->varDump($value)); curl_setopt($this->ch, $option, $value); } function setHeader($name, $value) { $this->outgoing_headers[$name] = $value; $this->debug("\163\145\x74\x20\150\x65\x61\x64\145\162\x20{$name}\72\40{$value}"); } function unsetHeader($name) { if (isset($this->outgoing_headers[$name])) { $this->debug("\x75\x6e\x73\x65\x74\x20\150\x65\141\x64\145\162\x20{$name}"); unset($this->outgoing_headers[$name]); } } function setURL($url) { $this->url = $url; $u = parse_url($url); foreach ($u as $k => $v) { $this->debug("\160\141\x72\163\x65\x64\x20\125\122\x4c\x20{$k}\40\75\40{$v}"); $this->{$k} = $v; } if (isset($u["\161\165\x65\x72\x79"]) && $u["\161\165\x65\x72\171"] != '') { $this->path .= "\x3f" . $u["\161\x75\145\x72\x79"]; } if (!isset($u["\x70\x6f\x72\164"])) { if ($u["\163\x63\150\145\x6d\x65"] == "\150\x74\164\x70\163") { $this->port = 443; } else { $this->port = 80; } } $this->uri = $this->path; $this->digest_uri = $this->uri; if (!isset($u["\160\157\162\x74"])) { $this->setHeader("\110\157\163\164", $this->host); } else { $this->setHeader("\x48\157\163\x74", $this->host . "\72" . $this->port); } if (isset($u["\165\163\x65\162"]) && $u["\165\x73\x65\x72"] != '') { $this->setCredentials(urldecode($u["\165\163\x65\x72"]), isset($u["\160\x61\163\163"]) ? urldecode($u["\160\141\163\x73"]) : ''); } } function io_method() { if ($this->use_curl || $this->scheme == "\x68\x74\x74\x70\x73" || $this->scheme == "\150\164\164\x70" && $this->authtype == "\156\164\x6c\x6d" || $this->scheme == "\x68\x74\164\160" && is_array($this->proxy) && $this->proxy["\141\x75\164\x68\x74\171\160\145"] == "\x6e\x74\154\155") { return "\143\165\x72\154"; } if (($this->scheme == "\150\164\x74\x70" || $this->scheme == "\163\163\x6c") && $this->authtype != "\x6e\x74\154\x6d" && (!is_array($this->proxy) || $this->proxy["\x61\165\164\x68\164\171\160\x65"] != "\156\x74\154\155")) { return "\x73\x6f\x63\x6b\x65\x74"; } return "\165\156\x6b\x6e\157\x77\156"; } function connect($connection_timeout = 0, $response_timeout = 30) { $this->debug("\143\x6f\156\156\145\143\164\x20\x63\157\x6e\x6e\145\143\x74\x69\157\156\137\164\x69\155\x65\157\x75\x74\x20{$connection_timeout}\x2c\40\x72\x65\163\x70\x6f\156\x73\x65\x5f\x74\x69\x6d\145\157\165\164\40{$response_timeout}\54\40\x73\x63\x68\x65\x6d\x65\40{$this->scheme}\54\40\x68\157\x73\x74\40{$this->host}\54\x20\x70\x6f\x72\x74\x20{$this->port}"); if ($this->io_method() == "\163\157\143\x6b\x65\x74") { if (!is_array($this->proxy)) { $host = $this->host; $port = $this->port; } else { $host = $this->proxy["\x68\157\163\164"]; $port = $this->proxy["\160\x6f\162\164"]; } if ($this->persistentConnection && isset($this->fp) && is_resource($this->fp)) { if (!feof($this->fp)) { $this->debug("\x52\x65\x2d\x75\163\145\40\x70\145\x72\163\151\x73\x74\145\156\x74\x20\143\157\x6e\x6e\145\143\x74\x69\157\156"); return true; } fclose($this->fp); $this->debug("\x43\x6c\x6f\x73\x65\x64\x20\160\x65\162\163\151\x73\164\145\156\x74\40\143\157\x6e\x6e\x65\x63\164\x69\157\x6e\40\141\164\x20\105\117\x46"); } if ($this->scheme == "\163\x73\x6c") { $host = "\x73\163\154\x3a\57\57" . $host; } $this->debug("\x63\x61\x6c\154\x69\156\147\40\146\163\x6f\143\x6b\x6f\160\145\x6e\40\x77\x69\x74\x68\x20\150\x6f\x73\164\40" . $host . "\40\x63\x6f\156\x6e\145\x63\164\x69\157\156\137\164\151\155\x65\157\165\164\40" . $connection_timeout); if ($connection_timeout > 0) { $this->fp = @fsockopen($host, $this->port, $this->errno, $this->error_str, $connection_timeout); } else { $this->fp = @fsockopen($host, $this->port, $this->errno, $this->error_str); } if (!$this->fp) { $msg = "\103\157\165\154\144\156\x27\164\x20\157\x70\x65\x6e\40\163\x6f\x63\153\x65\164\x20\x63\157\x6e\x6e\145\143\x74\x69\157\x6e\40\164\157\x20\x73\145\162\x76\145\162\x20" . $this->url; if ($this->errno) { $msg .= "\x2c\40\x45\162\x72\157\x72\40\x28" . $this->errno . "\51\72\x20" . $this->error_str; } else { $msg .= "\40\160\162\151\157\162\x20\x74\157\x20\143\157\156\156\145\143\x74\50\x29\x2e\40\40\124\x68\151\163\x20\x69\163\40\157\x66\164\145\156\x20\x61\x20\x70\162\x6f\x62\154\x65\x6d\x20\x6c\157\x6f\x6b\x69\x6e\x67\x20\165\x70\40\164\x68\145\x20\x68\157\x73\164\x20\x6e\x61\x6d\x65\56"; } $this->debug($msg); $this->setError($msg); return false; } $this->debug("\x73\145\164\x20\162\x65\163\x70\157\156\x73\x65\40\x74\x69\155\145\157\165\164\x20\164\157\x20" . $response_timeout); socket_set_timeout($this->fp, $response_timeout); $this->debug("\x73\x6f\x63\x6b\x65\164\x20\143\157\x6e\x6e\x65\x63\164\x65\x64"); return true; } elseif ($this->io_method() == "\x63\165\x72\x6c") { if (!extension_loaded("\x63\x75\162\154")) { $this->setError("\x54\150\x65\40\x50\110\120\x20\143\125\x52\114\x20\x45\x78\164\x65\x6e\x73\x69\157\x6e\x20\151\163\40\x72\x65\x71\165\151\x72\x65\x64\40\x66\157\x72\x20\x48\124\x54\x50\123\40\x6f\x72\40\116\x4c\x54\x4d\x2e\40\40\x59\x6f\x75\x20\x77\x69\154\154\40\x6e\145\x65\144\x20\x74\x6f\40\x72\145\x2d\x62\x75\151\154\x64\x20\157\162\40\165\x70\144\141\164\x65\x20\171\x6f\165\162\40\120\x48\x50\40\164\x6f\x20\151\156\x63\154\165\144\145\40\x63\125\x52\x4c\40\x6f\162\x20\x63\150\x61\x6e\147\145\40\160\x68\x70\56\151\x6e\151\40\x74\157\x20\x6c\x6f\141\x64\40\x74\x68\145\40\x50\110\120\40\143\x55\122\114\x20\145\170\164\x65\156\x73\151\157\x6e\x2e"); return false; } if (defined("\103\x55\x52\x4c\x4f\x50\x54\x5f\x43\117\x4e\x4e\x45\x43\124\111\117\116\124\111\115\x45\x4f\125\124")) { $CURLOPT_CONNECTIONTIMEOUT = CURLOPT_CONNECTIONTIMEOUT; } else { $CURLOPT_CONNECTIONTIMEOUT = 78; } if (defined("\x43\x55\122\114\x4f\x50\124\137\110\x54\x54\120\x41\x55\x54\110")) { $CURLOPT_HTTPAUTH = CURLOPT_HTTPAUTH; } else { $CURLOPT_HTTPAUTH = 107; } if (defined("\103\x55\x52\114\x4f\x50\124\137\x50\x52\x4f\x58\131\101\x55\124\110")) { $CURLOPT_PROXYAUTH = CURLOPT_PROXYAUTH; } else { $CURLOPT_PROXYAUTH = 111; } if (defined("\103\125\122\x4c\x41\125\124\110\137\x42\101\123\111\103")) { $CURLAUTH_BASIC = CURLAUTH_BASIC; } else { $CURLAUTH_BASIC = 1; } if (defined("\x43\x55\x52\x4c\101\125\x54\110\x5f\104\111\107\x45\x53\x54")) { $CURLAUTH_DIGEST = CURLAUTH_DIGEST; } else { $CURLAUTH_DIGEST = 2; } if (defined("\x43\x55\x52\114\x41\x55\124\x48\137\x4e\x54\x4c\x4d")) { $CURLAUTH_NTLM = CURLAUTH_NTLM; } else { $CURLAUTH_NTLM = 8; } $this->debug("\143\157\x6e\156\145\143\164\x20\165\163\151\156\147\x20\x63\x55\122\114"); $this->ch = curl_init(); $hostURL = $this->port != '' ? "{$this->scheme}\x3a\x2f\57{$this->host}\72{$this->port}" : "{$this->scheme}\72\x2f\57{$this->host}"; $hostURL .= $this->path; $this->setCurlOption(CURLOPT_URL, $hostURL); if (ini_get("\x73\x61\146\x65\x5f\155\x6f\144\145") || ini_get("\x6f\160\x65\x6e\137\x62\x61\163\145\144\151\x72")) { $this->debug("\163\x61\x66\x65\x5f\155\157\x64\x65\x20\x6f\x72\x20\157\x70\x65\156\137\x62\x61\163\145\144\x69\x72\40\163\145\x74\54\40\x73\157\x20\x64\157\40\x6e\157\164\40\163\145\164\x20\x43\125\122\x4c\x4f\x50\124\x5f\x46\x4f\x4c\x4c\117\127\114\x4f\103\101\124\x49\117\116"); $this->debug("\163\141\146\x65\x5f\155\x6f\144\x65\x20\x3d\40"); $this->appendDebug($this->varDump(ini_get("\x73\141\146\x65\137\155\157\x64\145"))); $this->debug("\157\160\x65\x6e\137\x62\141\163\x65\144\151\162\x20\x3d\40"); $this->appendDebug($this->varDump(ini_get("\x6f\x70\x65\156\137\142\141\163\x65\x64\x69\x72"))); } else { $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1); } $this->setCurlOption(CURLOPT_HEADER, 1); $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1); if ($this->persistentConnection) { $this->persistentConnection = false; $this->setHeader("\x43\x6f\x6e\x6e\x65\x63\164\151\157\156", "\143\154\x6f\163\x65"); } if ($connection_timeout != 0) { $this->setCurlOption($CURLOPT_CONNECTIONTIMEOUT, $connection_timeout); } if ($response_timeout != 0) { $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout); } if ($this->scheme == "\x68\164\164\x70\163") { $this->debug("\x73\x65\x74\40\x63\x55\122\x4c\x20\x53\123\114\x20\166\145\x72\x69\x66\171\x20\157\x70\164\151\x6f\x6e\163"); $this->setCurlOption(CURLOPT_SSL_VERIFYPEER, 0); $this->setCurlOption(CURLOPT_SSL_VERIFYHOST, 0); if ($this->authtype == "\x63\145\x72\x74\x69\146\151\143\x61\x74\145") { $this->debug("\x73\x65\x74\x20\x63\125\x52\x4c\40\x63\145\x72\x74\151\x66\x69\143\x61\164\x65\40\157\160\x74\x69\157\156\x73"); if (isset($this->certRequest["\x63\x61\x69\156\146\157\146\151\x6c\x65"])) { $this->setCurlOption(CURLOPT_CAINFO, $this->certRequest["\143\x61\151\x6e\146\x6f\x66\151\154\145"]); } if (isset($this->certRequest["\x76\x65\162\151\146\x79\x70\x65\x65\162"])) { $this->setCurlOption(CURLOPT_SSL_VERIFYPEER, $this->certRequest["\166\145\162\x69\146\171\160\x65\x65\x72"]); } else { $this->setCurlOption(CURLOPT_SSL_VERIFYPEER, 1); } if (isset($this->certRequest["\x76\x65\162\x69\x66\171\150\x6f\x73\164"])) { $this->setCurlOption(CURLOPT_SSL_VERIFYHOST, $this->certRequest["\166\x65\162\x69\x66\x79\150\157\x73\164"]); } else { $this->setCurlOption(CURLOPT_SSL_VERIFYHOST, 1); } if (isset($this->certRequest["\163\x73\154\x63\145\162\164\146\151\x6c\x65"])) { $this->setCurlOption(CURLOPT_SSLCERT, $this->certRequest["\163\x73\154\x63\145\x72\164\146\151\x6c\x65"]); } if (isset($this->certRequest["\163\x73\x6c\x6b\x65\171\x66\x69\x6c\145"])) { $this->setCurlOption(CURLOPT_SSLKEY, $this->certRequest["\x73\x73\154\153\x65\171\146\151\x6c\145"]); } if (isset($this->certRequest["\160\x61\163\x73\160\150\162\141\x73\x65"])) { $this->setCurlOption(CURLOPT_SSLKEYPASSWD, $this->certRequest["\160\141\x73\x73\x70\x68\162\x61\x73\145"]); } if (isset($this->certRequest["\x63\145\x72\x74\x70\141\163\x73\167\157\x72\144"])) { $this->setCurlOption(CURLOPT_SSLCERTPASSWD, $this->certRequest["\143\x65\162\164\160\141\163\163\x77\157\x72\144"]); } } } if ($this->authtype && $this->authtype != "\x63\x65\162\164\151\x66\x69\143\141\x74\145") { if ($this->username) { $this->debug("\x73\x65\164\x20\x63\x55\122\114\x20\165\163\145\162\156\141\155\145\57\160\x61\x73\x73\167\x6f\x72\144"); $this->setCurlOption(CURLOPT_USERPWD, "{$this->username}\72{$this->password}"); } if ($this->authtype == "\x62\x61\x73\x69\143") { $this->debug("\x73\x65\164\x20\x63\x55\122\114\40\146\157\162\40\x42\141\163\x69\x63\40\x61\x75\x74\x68\x65\156\164\x69\143\x61\164\151\157\x6e"); $this->setCurlOption($CURLOPT_HTTPAUTH, $CURLAUTH_BASIC); } if ($this->authtype == "\x64\151\147\x65\x73\x74") { $this->debug("\163\145\164\x20\143\125\x52\114\40\146\157\x72\40\x64\x69\147\x65\x73\164\40\x61\165\x74\x68\x65\x6e\x74\x69\143\x61\164\151\x6f\x6e"); $this->setCurlOption($CURLOPT_HTTPAUTH, $CURLAUTH_DIGEST); } if ($this->authtype == "\x6e\x74\154\x6d") { $this->debug("\163\145\x74\x20\143\125\x52\114\40\x66\x6f\x72\x20\x4e\x54\114\x4d\40\141\165\x74\x68\x65\156\x74\x69\x63\x61\x74\x69\157\156"); $this->setCurlOption($CURLOPT_HTTPAUTH, $CURLAUTH_NTLM); } } if (is_array($this->proxy)) { $this->debug("\x73\145\x74\40\143\x55\x52\x4c\x20\x70\162\x6f\x78\x79\x20\x6f\x70\x74\151\x6f\156\x73"); if ($this->proxy["\x70\157\162\x74"] != '') { $this->setCurlOption(CURLOPT_PROXY, $this->proxy["\x68\x6f\x73\164"] . "\72" . $this->proxy["\x70\x6f\162\164"]); } else { $this->setCurlOption(CURLOPT_PROXY, $this->proxy["\150\157\163\164"]); } if ($this->proxy["\x75\x73\145\162\156\x61\155\145"] || $this->proxy["\160\141\163\x73\167\157\x72\144"]) { $this->debug("\163\145\164\40\x63\x55\x52\x4c\40\160\162\x6f\170\x79\40\x61\x75\164\x68\x65\x6e\x74\151\143\141\164\151\157\x6e\40\x6f\x70\164\x69\157\156\163"); $this->setCurlOption(CURLOPT_PROXYUSERPWD, $this->proxy["\x75\163\145\x72\x6e\141\x6d\145"] . "\72" . $this->proxy["\x70\141\163\163\x77\x6f\162\x64"]); if ($this->proxy["\x61\x75\164\x68\x74\171\160\145"] == "\x62\141\163\151\x63") { $this->setCurlOption($CURLOPT_PROXYAUTH, $CURLAUTH_BASIC); } if ($this->proxy["\141\x75\x74\150\x74\171\160\x65"] == "\156\x74\154\155") { $this->setCurlOption($CURLOPT_PROXYAUTH, $CURLAUTH_NTLM); } } } $this->debug("\143\x55\122\114\x20\143\x6f\156\x6e\x65\143\164\x69\x6f\x6e\40\x73\145\x74\x20\x75\160"); return true; } else { $this->setError("\x55\x6e\153\x6e\x6f\167\156\40\x73\x63\150\x65\x6d\145\x20" . $this->scheme); $this->debug("\x55\x6e\153\156\157\167\156\x20\x73\143\x68\145\x6d\145\x20" . $this->scheme); return false; } } function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) { $this->debug("\x65\156\x74\145\x72\145\x64\40\163\x65\x6e\144\50\51\40\167\151\x74\150\40\144\141\x74\x61\40\157\x66\x20\154\x65\x6e\147\164\150\72\x20" . strlen($data)); $this->tryagain = true; $tries = 0; while ($this->tryagain) { $this->tryagain = false; if ($tries++ < 2) { if (!$this->connect($timeout, $response_timeout)) { return false; } if (!$this->sendRequest($data, $cookies)) { return false; } $respdata = $this->getResponse(); } else { $this->setError("\124\157\157\x20\155\141\x6e\x79\x20\164\x72\x69\x65\163\40\164\157\x20\147\145\164\x20\141\x6e\x20\x4f\x4b\40\x72\x65\163\x70\157\x6e\x73\145\40\x28{$this->response_status_line}\51"); } } $this->debug("\145\x6e\144\40\157\x66\x20\163\x65\156\144\x28\51"); return $respdata; } function sendHTTPS($data, $timeout = 0, $response_timeout = 30, $cookies = NULL) { return $this->send($data, $timeout, $response_timeout, $cookies); } function setCredentials($username, $password, $authtype = "\x62\x61\163\151\143", $digestRequest = array(), $certRequest = array()) { $this->debug("\163\145\x74\103\x72\145\x64\145\156\x74\x69\x61\154\163\x20\165\163\145\162\x6e\x61\x6d\x65\x3d{$username}\x20\x61\165\x74\x68\164\171\160\x65\x3d{$authtype}\x20\144\151\147\145\x73\164\x52\145\161\x75\x65\x73\164\x3d"); $this->appendDebug($this->varDump($digestRequest)); $this->debug("\143\x65\162\x74\122\x65\161\165\145\163\164\x3d"); $this->appendDebug($this->varDump($certRequest)); if ($authtype == "\142\x61\163\151\143") { $this->setHeader("\101\x75\164\x68\157\162\151\172\141\164\151\x6f\156", "\x42\x61\x73\151\x63\40" . base64_encode(str_replace("\72", '', $username) . "\x3a" . $password)); } elseif ($authtype == "\144\x69\147\x65\163\x74") { if (isset($digestRequest["\x6e\x6f\x6e\x63\145"])) { $digestRequest["\x6e\x63"] = isset($digestRequest["\156\x63"]) ? $digestRequest["\x6e\x63"]++ : 1; $A1 = $username . "\x3a" . (isset($digestRequest["\162\145\x61\154\155"]) ? $digestRequest["\162\145\141\x6c\155"] : '') . "\72" . $password; $HA1 = md5($A1); $A2 = $this->request_method . "\x3a" . $this->digest_uri; $HA2 = md5($A2); $unhashedDigest = ''; $nonce = isset($digestRequest["\x6e\x6f\x6e\143\x65"]) ? $digestRequest["\x6e\x6f\x6e\143\145"] : ''; $cnonce = $nonce; if ($digestRequest["\x71\157\160"] != '') { $unhashedDigest = $HA1 . "\x3a" . $nonce . "\72" . sprintf("\x25\x30\x38\x64", $digestRequest["\156\x63"]) . "\x3a" . $cnonce . "\x3a" . $digestRequest["\161\157\160"] . "\x3a" . $HA2; } else { $unhashedDigest = $HA1 . "\72" . $nonce . "\72" . $HA2; } $hashedDigest = md5($unhashedDigest); $opaque = ''; if (isset($digestRequest["\x6f\160\141\161\165\x65"])) { $opaque = "\x2c\40\x6f\160\x61\x71\x75\x65\x3d\42" . $digestRequest["\157\x70\141\x71\165\x65"] . "\42"; } $this->setHeader("\x41\x75\164\150\157\162\x69\x7a\x61\164\151\x6f\x6e", "\104\x69\147\145\x73\164\x20\165\x73\x65\162\x6e\x61\x6d\145\75\x22" . $username . "\42\54\x20\x72\145\141\154\x6d\x3d\42" . $digestRequest["\162\145\x61\154\x6d"] . "\x22\54\40\x6e\x6f\x6e\x63\145\x3d\x22" . $nonce . "\42\54\x20\x75\162\x69\x3d\42" . $this->digest_uri . $opaque . "\x22\x2c\40\143\x6e\x6f\x6e\x63\145\75\42" . $cnonce . "\42\54\x20\156\143\x3d" . sprintf("\45\60\x38\170", $digestRequest["\x6e\x63"]) . "\x2c\40\161\x6f\x70\75\x22" . $digestRequest["\161\x6f\x70"] . "\42\x2c\x20\162\145\x73\x70\157\156\x73\x65\75\x22" . $hashedDigest . "\42"); } } elseif ($authtype == "\x63\x65\x72\x74\151\x66\x69\x63\x61\x74\x65") { $this->certRequest = $certRequest; $this->debug("\x41\165\x74\150\157\x72\x69\x7a\141\x74\x69\157\x6e\40\150\145\x61\144\x65\x72\40\156\157\x74\x20\x73\x65\x74\40\x66\157\162\40\x63\145\162\x74\x69\x66\x69\143\x61\x74\145"); } elseif ($authtype == "\156\x74\x6c\x6d") { $this->debug("\101\165\164\150\157\162\x69\172\141\x74\x69\x6f\x6e\40\150\145\x61\x64\x65\x72\40\156\157\x74\x20\163\x65\x74\40\146\157\162\40\x6e\x74\x6c\155"); } $this->username = $username; $this->password = $password; $this->authtype = $authtype; $this->digestRequest = $digestRequest; } function setSOAPAction($soapaction) { $this->setHeader("\x53\117\101\x50\x41\143\164\151\157\156", "\x22" . $soapaction . "\42"); } function setEncoding($enc = "\x67\x7a\151\160\x2c\40\144\x65\146\x6c\141\164\145") { if (function_exists("\147\x7a\144\x65\146\154\x61\164\145")) { $this->protocol_version = "\61\x2e\61"; $this->setHeader("\x41\x63\x63\145\160\x74\55\105\x6e\x63\157\x64\x69\x6e\147", $enc); if (!isset($this->outgoing_headers["\x43\x6f\x6e\156\145\x63\x74\151\157\x6e"])) { $this->setHeader("\x43\x6f\156\156\x65\x63\x74\151\x6f\x6e", "\143\x6c\x6f\x73\x65"); $this->persistentConnection = false; } $this->encoding = $enc; } } function setProxy($proxyhost, $proxyport, $proxyusername = '', $proxypassword = '', $proxyauthtype = "\x62\x61\x73\x69\x63") { if ($proxyhost) { $this->proxy = array("\150\x6f\163\164" => $proxyhost, "\160\157\162\x74" => $proxyport, "\x75\163\x65\162\156\x61\155\145" => $proxyusername, "\160\x61\163\x73\x77\157\x72\x64" => $proxypassword, "\141\165\164\x68\x74\171\x70\x65" => $proxyauthtype); if ($proxyusername != '' && $proxypassword != '' && ($proxyauthtype = "\142\x61\x73\x69\x63")) { $this->setHeader("\x50\x72\157\170\x79\55\x41\165\164\150\x6f\162\x69\172\141\164\151\x6f\156", "\40\102\141\163\x69\x63\40" . base64_encode($proxyusername . "\72" . $proxypassword)); } } else { $this->debug("\162\x65\x6d\x6f\166\x65\40\160\x72\x6f\x78\171"); $proxy = null; unsetHeader("\x50\162\x6f\170\x79\55\101\165\164\x68\157\162\151\172\x61\x74\151\157\156"); } } function isSkippableCurlHeader(&$data) { $skipHeaders = array("\x48\124\x54\120\57\x31\x2e\x31\x20\x31\x30\60", "\x48\x54\x54\x50\57\61\56\60\40\63\60\x31", "\110\x54\124\x50\57\x31\x2e\x31\40\63\x30\61", "\110\124\x54\x50\x2f\x31\x2e\x30\40\63\60\x32", "\x48\124\124\x50\x2f\x31\56\x31\40\x33\60\x32", "\x48\124\x54\120\57\x31\56\60\40\x34\60\61", "\x48\x54\x54\x50\x2f\61\x2e\x31\40\64\60\x31", "\110\124\124\x50\57\61\56\x30\x20\62\x30\60\x20\x43\x6f\x6e\x6e\x65\143\x74\151\157\x6e\40\145\163\164\141\x62\x6c\x69\163\x68\x65\x64"); foreach ($skipHeaders as $hd) { $prefix = substr($data, 0, strlen($hd)); if ($prefix == $hd) { return true; } } return false; } function decodeChunked($buffer, $lb) { $length = 0; $new = ''; $chunkend = strpos($buffer, $lb); if ($chunkend == false) { $this->debug("\156\x6f\x20\154\151\156\145\x62\162\145\141\x6b\40\x66\x6f\165\156\x64\40\151\156\x20\144\x65\x63\157\x64\x65\103\150\x75\156\x6b\145\x64"); return $new; } $temp = substr($buffer, 0, $chunkend); $chunk_size = hexdec(trim($temp)); $chunkstart = $chunkend + strlen($lb); while ($chunk_size > 0) { $this->debug("\x63\x68\165\x6e\153\163\164\x61\162\164\72\40{$chunkstart}\40\143\x68\165\x6e\153\137\x73\151\172\145\x3a\x20{$chunk_size}"); $chunkend = strpos($buffer, $lb, $chunkstart + $chunk_size); if ($chunkend == false) { $chunk = substr($buffer, $chunkstart); $new .= $chunk; $length += strlen($chunk); break; } $chunk = substr($buffer, $chunkstart, $chunkend - $chunkstart); $new .= $chunk; $length += strlen($chunk); $chunkstart = $chunkend + strlen($lb); $chunkend = strpos($buffer, $lb, $chunkstart) + strlen($lb); if ($chunkend == false) { break; } $temp = substr($buffer, $chunkstart, $chunkend - $chunkstart); $chunk_size = hexdec(trim($temp)); $chunkstart = $chunkend; } return $new; } function buildPayload($data, $cookie_str = '') { if ($this->request_method != "\x47\105\x54") { $this->setHeader("\103\x6f\156\x74\x65\156\164\55\114\145\x6e\147\164\x68", strlen($data)); } if ($this->proxy) { $uri = $this->url; } else { $uri = $this->uri; } $req = "{$this->request_method}\x20{$uri}\40\x48\x54\x54\x50\x2f{$this->protocol_version}"; $this->debug("\110\124\124\x50\40\x72\x65\x71\165\x65\x73\164\x3a\x20{$req}"); $this->outgoing_payload = "{$req}\15\12"; foreach ($this->outgoing_headers as $k => $v) { $hdr = $k . "\x3a\x20" . $v; $this->debug("\x48\x54\124\120\40\x68\145\x61\144\145\x72\x3a\x20{$hdr}"); $this->outgoing_payload .= "{$hdr}\xd\xa"; } if ($cookie_str != '') { $hdr = "\103\x6f\x6f\153\151\x65\x3a\x20" . $cookie_str; $this->debug("\x48\x54\x54\120\x20\150\x65\x61\x64\145\x72\x3a\40{$hdr}"); $this->outgoing_payload .= "{$hdr}\15\xa"; } $this->outgoing_payload .= "\15\12"; $this->outgoing_payload .= $data; } function sendRequest($data, $cookies = null) { $cookie_str = $this->getCookiesForRequest($cookies, $this->scheme == "\x73\x73\154" || $this->scheme == "\150\x74\164\x70\x73"); $this->buildPayload($data, $cookie_str); if ($this->io_method() == "\x73\x6f\143\x6b\145\164") { if (!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) { $this->setError("\x63\x6f\x75\x6c\x64\156\x27\x74\40\x77\162\x69\x74\x65\40\x6d\145\x73\163\141\147\145\x20\144\x61\x74\141\40\x74\x6f\40\163\x6f\143\x6b\145\164"); $this->debug("\143\x6f\165\154\144\156\47\x74\x20\x77\x72\x69\164\x65\x20\x6d\x65\x73\x73\x61\147\145\x20\144\141\164\x61\40\x74\x6f\40\163\x6f\143\x6b\145\164"); return false; } $this->debug("\x77\x72\157\164\x65\40\x64\141\x74\141\x20\164\x6f\40\163\x6f\143\153\145\x74\54\x20\154\145\x6e\x67\x74\150\40\75\40" . strlen($this->outgoing_payload)); return true; } elseif ($this->io_method() == "\143\x75\162\x6c") { $curl_headers = array(); foreach ($this->outgoing_headers as $k => $v) { if ($k == "\x43\157\x6e\x6e\145\x63\164\151\157\156" || $k == "\103\157\x6e\164\145\x6e\x74\x2d\x4c\x65\x6e\147\164\150" || $k == "\x48\x6f\x73\x74" || $k == "\101\x75\x74\150\157\162\x69\172\x61\164\151\157\x6e" || $k == "\120\162\x6f\170\171\x2d\x41\x75\164\x68\157\162\151\172\x61\x74\x69\x6f\156") { $this->debug("\123\153\x69\160\x20\x63\125\122\114\40\150\145\141\144\x65\x72\x20{$k}\x3a\x20{$v}"); } else { $curl_headers[] = "{$k}\72\x20{$v}"; } } if ($cookie_str != '') { $curl_headers[] = "\x43\157\x6f\x6b\151\x65\72\x20" . $cookie_str; } $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers); $this->debug("\x73\145\x74\x20\143\125\122\x4c\x20\110\x54\x54\120\40\x68\x65\x61\x64\x65\162\x73"); if ($this->request_method == "\120\x4f\123\x54") { $this->setCurlOption(CURLOPT_POST, 1); $this->setCurlOption(CURLOPT_POSTFIELDS, $data); $this->debug("\x73\x65\164\x20\143\125\x52\x4c\40\120\117\123\124\40\144\x61\164\141"); } else { } foreach ($this->ch_options as $key => $val) { $this->setCurlOption($key, $val); } $this->debug("\163\x65\164\x20\143\x55\122\x4c\40\x70\141\x79\154\157\x61\144"); return true; } } function getResponse() { $this->incoming_payload = ''; if ($this->io_method() == "\163\x6f\x63\x6b\x65\164") { $data = ''; while (!isset($lb)) { if (feof($this->fp)) { $this->incoming_payload = $data; $this->debug("\146\157\x75\x6e\x64\x20\156\157\40\150\x65\x61\x64\x65\162\163\40\x62\145\146\157\x72\x65\40\105\x4f\x46\40\x61\x66\164\145\162\x20\x6c\145\x6e\147\164\x68\x20" . strlen($data)); $this->debug("\x72\x65\143\145\x69\166\x65\144\40\x62\x65\146\x6f\162\x65\40\105\117\x46\x3a\12" . $data); $this->setError("\163\x65\162\x76\145\x72\x20\146\x61\x69\154\145\144\40\164\x6f\x20\x73\145\x6e\x64\40\150\x65\x61\x64\145\x72\x73"); return false; } $tmp = fgets($this->fp, 256); $tmplen = strlen($tmp); $this->debug("\x72\145\141\144\40\x6c\x69\x6e\x65\x20\x6f\146\x20{$tmplen}\x20\x62\x79\164\x65\163\72\x20" . trim($tmp)); if ($tmplen == 0) { $this->incoming_payload = $data; $this->debug("\x73\157\143\x6b\145\x74\x20\162\x65\x61\x64\40\x6f\146\x20\x68\x65\x61\144\145\x72\163\x20\x74\x69\155\145\144\40\x6f\165\164\40\141\146\164\145\162\40\154\x65\156\147\x74\150\x20" . strlen($data)); $this->debug("\x72\145\141\144\40\142\x65\146\157\162\145\x20\x74\151\155\145\157\165\164\72\x20" . $data); $this->setError("\x73\x6f\143\153\145\164\x20\x72\145\141\x64\40\157\146\40\150\145\x61\144\145\162\x73\x20\164\151\155\x65\x64\40\x6f\x75\x74"); return false; } $data .= $tmp; $pos = strpos($data, "\15\12\xd\xa"); if ($pos > 1) { $lb = "\xd\xa"; } else { $pos = strpos($data, "\12\xa"); if ($pos > 1) { $lb = "\xa"; } } if (isset($lb) && preg_match("\x2f\x5e\x48\x54\124\x50\134\x2f\x31\x2e\x31\x20\61\x30\60\x2f", $data)) { unset($lb); $data = ''; } } $this->incoming_payload .= $data; $this->debug("\146\157\x75\x6e\144\x20\x65\156\x64\40\x6f\x66\40\150\145\141\144\x65\162\163\40\141\146\164\145\162\40\x6c\x65\x6e\147\x74\x68\40" . strlen($data)); $header_data = trim(substr($data, 0, $pos)); $header_array = explode($lb, $header_data); $this->incoming_headers = array(); $this->incoming_cookies = array(); foreach ($header_array as $header_line) { $arr = explode("\72", $header_line, 2); if (count($arr) > 1) { $header_name = strtolower(trim($arr[0])); $this->incoming_headers[$header_name] = trim($arr[1]); if ($header_name == "\163\x65\x74\55\143\x6f\157\153\x69\145") { $cookie = $this->parseCookie(trim($arr[1])); if ($cookie) { $this->incoming_cookies[] = $cookie; $this->debug("\146\157\165\x6e\144\x20\x63\157\157\x6b\x69\145\72\40" . $cookie["\x6e\x61\155\145"] . "\x20\75\40" . $cookie["\x76\141\154\165\x65"]); } else { $this->debug("\x64\x69\x64\40\156\157\x74\x20\x66\151\x6e\144\40\x63\x6f\157\153\151\145\40\151\x6e\x20" . trim($arr[1])); } } } elseif (isset($header_name)) { $this->incoming_headers[$header_name] .= $lb . "\x20" . $header_line; } } if (isset($this->incoming_headers["\x74\x72\x61\156\163\146\145\x72\x2d\x65\x6e\143\157\x64\x69\x6e\x67"]) && strtolower($this->incoming_headers["\164\x72\141\x6e\x73\146\145\162\55\145\156\x63\x6f\144\x69\x6e\x67"]) == "\x63\150\165\156\x6b\x65\x64") { $content_length = 2147483647; $chunked = true; $this->debug("\x77\141\x6e\x74\40\x74\157\40\x72\x65\141\144\40\143\150\165\156\153\x65\144\40\143\x6f\x6e\x74\145\156\164"); } elseif (isset($this->incoming_headers["\x63\157\x6e\164\x65\x6e\x74\x2d\x6c\145\156\x67\164\150"])) { $content_length = $this->incoming_headers["\143\157\x6e\164\x65\156\164\x2d\154\x65\x6e\x67\164\150"]; $chunked = false; $this->debug("\x77\x61\x6e\164\x20\164\x6f\40\162\145\x61\144\x20\x63\157\x6e\164\145\x6e\164\x20\157\146\40\154\x65\x6e\x67\164\150\40{$content_length}"); } else { $content_length = 2147483647; $chunked = false; $this->debug("\x77\141\156\x74\x20\164\x6f\x20\162\x65\x61\144\x20\143\157\x6e\164\145\156\164\40\x74\x6f\40\x45\117\106"); } $data = ''; do { if ($chunked) { $tmp = fgets($this->fp, 256); $tmplen = strlen($tmp); $this->debug("\x72\x65\x61\x64\40\x63\150\165\x6e\x6b\40\154\x69\x6e\x65\x20\157\146\x20{$tmplen}\40\x62\x79\164\x65\x73"); if ($tmplen == 0) { $this->incoming_payload = $data; $this->debug("\x73\157\143\x6b\x65\x74\x20\x72\x65\x61\144\40\x6f\x66\x20\x63\x68\165\156\x6b\40\154\x65\156\x67\x74\x68\40\x74\151\155\x65\x64\40\x6f\165\164\x20\x61\146\164\x65\162\40\x6c\145\x6e\147\164\x68\x20" . strlen($data)); $this->debug("\x72\145\141\144\40\142\145\146\157\x72\x65\40\x74\x69\x6d\145\x6f\165\x74\x3a\xa" . $data); $this->setError("\x73\157\x63\153\145\164\40\x72\145\141\144\40\x6f\146\40\143\x68\x75\156\x6b\x20\154\145\x6e\147\164\x68\40\x74\x69\155\145\x64\x20\x6f\165\164"); return false; } $content_length = hexdec(trim($tmp)); $this->debug("\x63\150\x75\x6e\x6b\x20\154\x65\156\x67\164\x68\40{$content_length}"); } $strlen = 0; while ($strlen < $content_length && !feof($this->fp)) { $readlen = min(8192, $content_length - $strlen); $tmp = fread($this->fp, $readlen); $tmplen = strlen($tmp); $this->debug("\x72\x65\x61\x64\40\x62\x75\x66\x66\145\x72\40\157\146\x20{$tmplen}\40\x62\171\164\x65\163"); if ($tmplen == 0 && !feof($this->fp)) { $this->incoming_payload = $data; $this->debug("\163\x6f\143\x6b\x65\x74\x20\162\145\141\144\x20\157\x66\x20\142\157\x64\x79\x20\x74\151\155\145\144\40\x6f\x75\x74\40\141\x66\x74\x65\162\x20\154\145\156\x67\x74\150\40" . strlen($data)); $this->debug("\x72\x65\141\144\40\142\x65\x66\157\162\145\x20\164\x69\x6d\145\157\x75\x74\72\xa" . $data); $this->setError("\163\x6f\143\153\x65\x74\40\x72\x65\141\144\x20\x6f\x66\x20\x62\x6f\144\x79\x20\x74\x69\x6d\x65\144\40\x6f\x75\164"); return false; } $strlen += $tmplen; $data .= $tmp; } if ($chunked && $content_length > 0) { $tmp = fgets($this->fp, 256); $tmplen = strlen($tmp); $this->debug("\x72\x65\x61\144\x20\x63\x68\165\x6e\153\x20\164\x65\x72\155\151\156\x61\x74\157\x72\x20\157\146\40{$tmplen}\x20\142\171\164\x65\x73"); if ($tmplen == 0) { $this->incoming_payload = $data; $this->debug("\163\157\143\x6b\x65\164\x20\x72\145\x61\144\40\x6f\x66\40\x63\x68\165\x6e\153\40\164\x65\x72\155\151\156\141\x74\157\x72\x20\x74\151\155\145\x64\x20\x6f\165\164\x20\141\146\164\145\162\x20\154\145\x6e\x67\164\x68\x20" . strlen($data)); $this->debug("\162\x65\x61\144\40\x62\x65\x66\x6f\x72\x65\x20\x74\151\x6d\x65\157\165\164\72\xa" . $data); $this->setError("\163\157\x63\x6b\x65\x74\40\162\145\x61\x64\40\157\146\x20\143\x68\165\156\x6b\x20\x74\x65\x72\155\151\x6e\x61\164\157\x72\x20\x74\x69\155\x65\144\x20\x6f\165\x74"); return false; } } } while ($chunked && $content_length > 0 && !feof($this->fp)); if (feof($this->fp)) { $this->debug("\x72\x65\141\144\40\x74\x6f\x20\105\x4f\106"); } $this->debug("\162\145\141\x64\x20\x62\157\x64\171\40\157\x66\x20\x6c\x65\x6e\147\x74\x68\x20" . strlen($data)); $this->incoming_payload .= $data; $this->debug("\x72\145\x63\x65\x69\x76\145\x64\x20\x61\40\164\x6f\164\x61\x6c\40\x6f\146\x20" . strlen($this->incoming_payload) . "\x20\142\x79\164\x65\x73\40\157\146\x20\144\x61\x74\141\40\x66\162\x6f\155\40\x73\x65\162\x76\x65\x72"); if (isset($this->incoming_headers["\x63\157\x6e\x6e\145\x63\x74\151\157\156"]) && strtolower($this->incoming_headers["\143\x6f\156\156\x65\x63\164\151\157\156"]) == "\143\x6c\x6f\x73\145" || !$this->persistentConnection || feof($this->fp)) { fclose($this->fp); $this->fp = false; $this->debug("\x63\154\x6f\163\145\x64\40\x73\157\143\153\145\x74"); } if ($this->incoming_payload == '') { $this->setError("\x6e\157\40\162\x65\x73\160\x6f\156\163\x65\x20\146\x72\157\x6d\40\x73\145\162\x76\x65\162"); return false; } } elseif ($this->io_method() == "\x63\x75\162\x6c") { $this->debug("\x73\145\x6e\x64\x20\141\156\x64\x20\162\145\143\145\151\x76\x65\x20\167\151\x74\x68\x20\x63\125\122\114"); $this->incoming_payload = curl_exec($this->ch); $data = $this->incoming_payload; $cErr = curl_error($this->ch); if ($cErr != '') { $err = "\x63\x55\x52\x4c\x20\105\122\122\x4f\122\72\x20" . curl_errno($this->ch) . "\x3a\40" . $cErr . "\74\x62\x72\76"; foreach (curl_getinfo($this->ch) as $k => $v) { if (is_array($v)) { $this->debug("{$k}\x3a\x20" . json_encode($v)); } else { $this->debug("{$k}\x3a\x20{$v}\x3c\x62\x72\76"); } } $this->debug($err); $this->setError($err); curl_close($this->ch); return false; } else { } $this->debug("\x4e\157\x20\143\x55\x52\114\x20\x65\x72\x72\x6f\x72\x2c\x20\x63\x6c\x6f\163\x69\156\x67\x20\x63\125\122\x4c"); curl_close($this->ch); $savedata = $data; while ($this->isSkippableCurlHeader($data)) { $this->debug("\106\157\x75\x6e\144\40\x48\x54\x54\120\x20\150\x65\x61\x64\145\x72\x20\164\x6f\x20\163\153\151\x70"); if ($pos = strpos($data, "\xd\12\15\12")) { $data = ltrim(substr($data, $pos)); } elseif ($pos = strpos($data, "\xa\12")) { $data = ltrim(substr($data, $pos)); } } if ($data == '') { $data = $savedata; while (preg_match("\x2f\x5e\x48\x54\x54\x50\x5c\57\x31\x2e\61\40\x31\x30\60\x2f", $data)) { if ($pos = strpos($data, "\15\12\xd\xa")) { $data = ltrim(substr($data, $pos)); } elseif ($pos = strpos($data, "\xa\12")) { $data = ltrim(substr($data, $pos)); } } } if ($pos = strpos($data, "\15\xa\xd\xa")) { $lb = "\15\12"; } elseif ($pos = strpos($data, "\12\12")) { $lb = "\12"; } else { $this->debug("\156\x6f\40\160\x72\x6f\160\x65\162\40\x73\145\160\141\162\x61\164\x69\157\x6e\x20\157\x66\40\150\x65\141\x64\x65\x72\163\x20\141\156\x64\40\144\x6f\x63\165\155\145\x6e\x74"); $this->setError("\156\157\x20\x70\162\x6f\160\x65\x72\40\x73\x65\x70\141\162\141\164\151\157\156\40\157\146\40\x68\x65\x61\144\145\162\163\x20\141\156\144\40\144\x6f\143\x75\x6d\145\156\164"); return false; } $header_data = trim(substr($data, 0, $pos)); $header_array = explode($lb, $header_data); $data = ltrim(substr($data, $pos)); $this->debug("\146\x6f\x75\156\144\x20\160\162\x6f\160\x65\x72\40\163\145\x70\141\162\141\164\x69\157\x6e\40\x6f\146\40\x68\x65\141\144\145\x72\x73\x20\x61\x6e\144\x20\x64\157\143\x75\x6d\145\x6e\x74"); $this->debug("\x63\x6c\145\x61\156\x65\x64\40\x64\x61\164\141\54\x20\163\164\x72\x69\x6e\x67\x6c\145\x6e\x3a\40" . strlen($data)); foreach ($header_array as $header_line) { $arr = explode("\72", $header_line, 2); if (count($arr) > 1) { $header_name = strtolower(trim($arr[0])); $this->incoming_headers[$header_name] = trim($arr[1]); if ($header_name == "\x73\x65\164\55\x63\157\157\x6b\151\x65") { $cookie = $this->parseCookie(trim($arr[1])); if ($cookie) { $this->incoming_cookies[] = $cookie; $this->debug("\146\x6f\165\x6e\x64\40\143\x6f\x6f\x6b\151\145\x3a\x20" . $cookie["\156\x61\x6d\145"] . "\40\x3d\40" . $cookie["\x76\x61\x6c\165\x65"]); } else { $this->debug("\x64\151\x64\x20\x6e\x6f\x74\40\x66\151\x6e\x64\x20\143\x6f\157\153\151\145\x20\x69\x6e\40" . trim($arr[1])); } } } elseif (isset($header_name)) { $this->incoming_headers[$header_name] .= $lb . "\40" . $header_line; } } } $this->response_status_line = $header_array[0]; $arr = explode("\40", $this->response_status_line, 3); $http_version = $arr[0]; $http_status = intval($arr[1]); $http_reason = count($arr) > 2 ? $arr[2] : ''; if (isset($this->incoming_headers["\154\x6f\x63\x61\164\x69\x6f\156"]) && ($http_status == 301 || $http_status == 302)) { $this->debug("\107\157\x74\40{$http_status}\x20{$http_reason}\x20\167\151\x74\150\40\x4c\157\143\x61\164\151\157\x6e\72\x20" . $this->incoming_headers["\154\157\x63\x61\x74\151\x6f\156"]); $this->setURL($this->incoming_headers["\x6c\x6f\x63\141\164\x69\x6f\156"]); $this->tryagain = true; return false; } if (isset($this->incoming_headers["\167\x77\x77\x2d\x61\x75\x74\150\x65\156\x74\151\x63\141\x74\145"]) && $http_status == 401) { $this->debug("\107\x6f\x74\x20\64\x30\x31\x20{$http_reason}\40\x77\x69\x74\x68\40\x57\127\127\x2d\101\x75\164\x68\x65\156\164\151\x63\x61\x74\x65\x3a\40" . $this->incoming_headers["\x77\x77\167\x2d\141\165\x74\x68\x65\x6e\x74\151\x63\141\164\x65"]); if (strstr($this->incoming_headers["\167\x77\x77\x2d\141\x75\164\x68\x65\x6e\x74\151\143\141\x74\145"], "\104\x69\147\x65\163\164\x20")) { $this->debug("\123\145\162\166\145\x72\40\x77\x61\156\164\163\40\144\151\x67\x65\x73\x74\x20\x61\165\164\x68\145\x6e\164\x69\143\141\x74\151\x6f\156"); $digestString = str_replace("\x44\x69\147\145\163\164\x20", '', $this->incoming_headers["\167\x77\167\x2d\x61\x75\164\x68\x65\156\x74\x69\143\x61\x74\x65"]); $digestElements = explode("\54", $digestString); foreach ($digestElements as $val) { $tempElement = explode("\75", trim($val), 2); $digestRequest[$tempElement[0]] = str_replace("\x22", '', $tempElement[1]); } if (isset($digestRequest["\x6e\157\156\x63\x65"])) { $this->setCredentials($this->username, $this->password, "\144\151\x67\145\x73\x74", $digestRequest); $this->tryagain = true; return false; } } $this->debug("\x48\124\x54\x50\40\x61\165\164\x68\x65\156\164\x69\143\141\164\x69\157\156\x20\146\x61\151\x6c\145\144"); $this->setError("\110\124\124\x50\x20\x61\165\x74\x68\x65\x6e\164\151\x63\x61\x74\151\x6f\156\x20\x66\x61\151\x6c\x65\144"); return false; } if ($http_status >= 300 && $http_status <= 307 || $http_status >= 400 && $http_status <= 417 || $http_status >= 501 && $http_status <= 505) { $this->setError("\125\x6e\163\x75\160\x70\x6f\162\164\x65\144\40\110\124\124\120\x20\x72\x65\x73\x70\x6f\156\163\x65\x20\x73\x74\x61\164\165\163\x20{$http_status}\40{$http_reason}\x20\x28\163\x6f\x61\160\x63\154\151\x65\x6e\164\x2d\76\x72\x65\163\x70\157\156\x73\x65\x20\x68\141\x73\40\x63\157\x6e\164\145\156\x74\163\40\x6f\x66\40\164\x68\145\x20\162\x65\163\x70\x6f\x6e\163\x65\x29"); return false; } if (isset($this->incoming_headers["\143\x6f\x6e\x74\x65\x6e\164\x2d\x65\x6e\x63\x6f\144\x69\x6e\147"]) && $this->incoming_headers["\x63\157\x6e\164\145\x6e\164\x2d\x65\156\143\x6f\144\x69\156\x67"] != '') { if (strtolower($this->incoming_headers["\x63\157\x6e\164\145\x6e\x74\x2d\145\156\143\157\144\151\x6e\147"]) == "\x64\145\x66\154\x61\164\145" || strtolower($this->incoming_headers["\x63\x6f\156\x74\145\156\164\x2d\x65\156\x63\157\144\151\x6e\147"]) == "\147\172\151\160") { if (function_exists("\x67\x7a\x69\156\x66\x6c\x61\164\145")) { $this->debug("\x54\x68\x65\40\x67\x7a\151\156\146\154\x61\x74\145\40\x66\165\156\143\164\x69\x6f\156\x20\145\x78\151\163\x74\x73"); $datalen = strlen($data); if ($this->incoming_headers["\143\x6f\x6e\164\145\156\164\55\145\156\143\x6f\144\151\156\147"] == "\x64\145\146\154\141\x74\x65") { if ($degzdata = @gzinflate($data)) { $data = $degzdata; $this->debug("\124\150\x65\x20\160\141\171\x6c\x6f\x61\144\x20\150\x61\x73\40\x62\145\x65\x6e\x20\x69\156\x66\154\141\164\x65\144\40\x74\157\x20" . strlen($data) . "\40\x62\171\x74\145\163"); if (strlen($data) < $datalen) { $this->debug("\x54\150\145\40\x69\x6e\146\x6c\x61\x74\x65\144\x20\x70\x61\171\x6c\157\x61\144\40\151\163\40\163\155\x61\154\154\145\x72\x20\164\150\x61\x6e\x20\x74\150\145\40\x67\x7a\x69\160\x70\145\x64\40\157\x6e\x65\x3b\40\x74\x72\171\x20\x61\147\141\x69\156"); if ($degzdata = @gzinflate($data)) { $data = $degzdata; $this->debug("\124\x68\145\x20\160\x61\x79\154\157\x61\144\x20\x68\141\x73\40\x62\x65\145\x6e\40\x69\156\x66\x6c\141\164\145\x64\40\x61\x67\x61\151\x6e\x20\x74\157\40" . strlen($data) . "\40\x62\171\x74\145\163"); } } } else { $this->debug("\x45\x72\x72\x6f\162\40\x75\163\151\x6e\x67\40\x67\x7a\x69\156\x66\154\141\164\x65\40\164\157\40\151\156\x66\x6c\141\164\145\40\164\x68\145\x20\160\141\x79\x6c\157\141\144"); $this->setError("\105\x72\x72\x6f\162\40\x75\x73\151\156\147\40\147\x7a\151\156\x66\154\x61\164\x65\x20\164\157\x20\x69\x6e\146\154\141\x74\x65\40\x74\150\x65\x20\x70\141\x79\154\157\141\x64"); } } elseif ($this->incoming_headers["\x63\x6f\156\164\145\156\x74\x2d\145\x6e\143\x6f\x64\151\156\147"] == "\x67\172\151\160") { if ($degzdata = @gzinflate(substr($data, 10))) { $data = $degzdata; $this->debug("\x54\x68\x65\40\x70\x61\x79\x6c\157\141\144\x20\x68\141\x73\40\x62\145\x65\156\40\x75\x6e\x2d\147\x7a\151\160\160\145\144\x20\x74\157\40" . strlen($data) . "\x20\x62\171\x74\145\163"); if (strlen($data) < $datalen) { $this->debug("\x54\x68\x65\40\x75\x6e\x2d\147\x7a\151\160\160\x65\x64\40\x70\x61\171\154\157\x61\x64\40\151\163\40\x73\155\141\154\154\x65\162\x20\x74\150\141\x6e\40\x74\150\x65\40\147\172\x69\160\160\x65\x64\40\157\156\x65\x3b\x20\164\162\x79\x20\141\x67\141\151\156"); if ($degzdata = @gzinflate(substr($data, 10))) { $data = $degzdata; $this->debug("\124\150\x65\40\160\141\171\154\x6f\141\144\x20\150\x61\163\x20\142\145\145\x6e\40\165\x6e\55\x67\172\151\160\160\x65\144\x20\141\147\141\x69\x6e\40\164\157\40" . strlen($data) . "\40\x62\x79\x74\x65\x73"); } } } else { $this->debug("\105\x72\x72\157\162\x20\x75\163\x69\156\x67\40\147\172\151\156\x66\154\x61\x74\x65\x20\164\157\x20\165\156\x2d\x67\x7a\151\160\x20\x74\150\145\40\x70\x61\171\154\157\141\144"); $this->setError("\x45\162\162\x6f\162\40\x75\163\x69\156\x67\40\147\172\x69\x6e\146\x6c\x61\164\145\x20\x74\157\x20\165\156\55\147\x7a\151\160\40\164\150\145\40\x70\x61\x79\154\157\x61\x64"); } } $this->incoming_payload = $header_data . $lb . $lb . $data; } else { $this->debug("\124\x68\x65\x20\163\145\162\166\145\x72\x20\x73\x65\x6e\164\x20\143\x6f\155\x70\x72\x65\163\163\x65\144\40\x64\x61\164\141\56\x20\x59\157\165\x72\x20\x70\150\x70\x20\151\x6e\x73\164\x61\x6c\154\40\155\165\x73\164\40\x68\x61\166\145\x20\164\150\145\40\x5a\x6c\151\x62\x20\145\x78\164\x65\x6e\x73\x69\x6f\x6e\40\143\157\x6d\x70\151\x6c\x65\144\40\x69\156\40\x74\x6f\40\163\x75\x70\x70\x6f\162\x74\x20\164\x68\151\x73\x2e"); $this->setError("\124\x68\145\x20\163\x65\162\x76\x65\x72\x20\x73\x65\156\164\x20\143\157\155\x70\x72\145\x73\163\145\x64\x20\144\x61\164\x61\x2e\x20\x59\157\x75\162\x20\160\x68\160\x20\x69\156\163\x74\x61\x6c\154\x20\155\x75\x73\x74\40\150\x61\x76\145\x20\164\x68\145\40\132\x6c\151\142\40\145\x78\x74\145\156\x73\x69\157\156\x20\143\157\x6d\x70\x69\x6c\145\144\40\151\x6e\x20\164\x6f\40\x73\165\160\x70\157\162\164\40\x74\x68\x69\x73\56"); } } else { $this->debug("\x55\156\163\x75\x70\160\x6f\162\x74\x65\x64\x20\x43\157\x6e\x74\x65\156\164\55\x45\x6e\x63\157\x64\151\x6e\147\x20" . $this->incoming_headers["\x63\x6f\x6e\x74\x65\x6e\x74\x2d\145\x6e\143\157\144\x69\156\x67"]); $this->setError("\125\156\163\x75\160\x70\157\x72\164\x65\x64\40\x43\157\156\x74\x65\156\164\55\105\x6e\x63\x6f\144\x69\156\x67\40" . $this->incoming_headers["\143\157\x6e\x74\145\x6e\x74\55\145\156\143\x6f\144\151\x6e\147"]); } } else { $this->debug("\x4e\157\x20\103\157\x6e\164\145\156\164\55\105\x6e\143\157\x64\x69\x6e\x67\x20\150\145\x61\144\x65\x72"); } if (strlen($data) == 0) { $this->debug("\156\x6f\x20\144\x61\x74\x61\x20\141\146\x74\x65\x72\x20\x68\x65\x61\144\145\x72\163\x21"); $this->setError("\x6e\157\x20\144\x61\x74\x61\40\160\162\145\163\145\156\x74\40\141\146\x74\145\x72\40\x48\124\124\120\x20\150\x65\141\144\x65\162\x73"); return false; } return $data; } function setContentType($type, $charset = false) { $this->setHeader("\103\x6f\x6e\x74\x65\x6e\164\x2d\124\171\x70\x65", $type . ($charset ? "\73\x20\x63\x68\x61\x72\163\x65\x74\75" . $charset : '')); } function usePersistentConnection() { if (isset($this->outgoing_headers["\101\x63\143\x65\160\164\55\105\x6e\x63\x6f\x64\151\x6e\147"])) { return false; } $this->protocol_version = "\61\56\x31"; $this->persistentConnection = true; $this->setHeader("\x43\x6f\156\156\145\143\x74\151\157\156", "\x4b\x65\x65\160\55\101\154\x69\x76\145"); return true; } function parseCookie($cookie_str) { $cookie_str = str_replace("\73\x20", "\73", $cookie_str) . "\x3b"; $data = preg_split("\x2f\x3b\57", $cookie_str); $value_str = $data[0]; $cookie_param = "\144\x6f\155\x61\151\x6e\75"; $start = strpos($cookie_str, $cookie_param); if ($start > 0) { $domain = substr($cookie_str, $start + strlen($cookie_param)); $domain = substr($domain, 0, strpos($domain, "\73")); } else { $domain = ''; } $cookie_param = "\x65\170\160\151\162\x65\163\x3d"; $start = strpos($cookie_str, $cookie_param); if ($start > 0) { $expires = substr($cookie_str, $start + strlen($cookie_param)); $expires = substr($expires, 0, strpos($expires, "\x3b")); } else { $expires = ''; } $cookie_param = "\x70\x61\164\150\75"; $start = strpos($cookie_str, $cookie_param); if ($start > 0) { $path = substr($cookie_str, $start + strlen($cookie_param)); $path = substr($path, 0, strpos($path, "\x3b")); } else { $path = "\x2f"; } $cookie_param = "\x3b\163\x65\143\165\162\145\x3b"; if (strpos($cookie_str, $cookie_param) !== false) { $secure = true; } else { $secure = false; } $sep_pos = strpos($value_str, "\75"); if ($sep_pos) { $name = substr($value_str, 0, $sep_pos); $value = substr($value_str, $sep_pos + 1); $cookie = array("\x6e\141\x6d\x65" => $name, "\x76\141\x6c\x75\x65" => $value, "\144\x6f\x6d\x61\x69\x6e" => $domain, "\x70\141\164\150" => $path, "\x65\x78\x70\x69\x72\145\163" => $expires, "\x73\x65\x63\165\x72\x65" => $secure); return $cookie; } return false; } function getCookiesForRequest($cookies, $secure = false) { $cookie_str = ''; if (!is_null($cookies) && is_array($cookies)) { foreach ($cookies as $cookie) { if (!is_array($cookie)) { continue; } $this->debug("\143\150\145\143\x6b\x20\143\x6f\x6f\153\x69\x65\x20\146\157\162\x20\166\x61\x6c\151\144\x69\x74\171\x3a\40" . $cookie["\156\x61\155\x65"] . "\x3d" . $cookie["\x76\141\x6c\165\145"]); if (isset($cookie["\x65\170\160\151\x72\x65\163"]) && !empty($cookie["\145\170\x70\151\x72\145\163"])) { if (strtotime($cookie["\145\x78\x70\x69\162\145\163"]) <= time()) { $this->debug("\143\157\x6f\x6b\151\145\40\x68\x61\x73\x20\145\x78\160\151\162\145\x64"); continue; } } if (isset($cookie["\x64\157\155\x61\x69\x6e"]) && !empty($cookie["\144\157\155\141\x69\156"])) { $domain = preg_quote($cookie["\144\x6f\155\x61\151\156"]); if (!preg_match("\47\x2e\52{$domain}\x24\x27\151", $this->host)) { $this->debug("\x63\x6f\x6f\153\151\x65\x20\150\x61\163\40\x64\x69\x66\146\x65\x72\145\156\164\x20\x64\x6f\155\141\x69\x6e"); continue; } } if (isset($cookie["\x70\141\x74\x68"]) && !empty($cookie["\x70\141\x74\x68"])) { $path = preg_quote($cookie["\x70\x61\164\150"]); if (!preg_match("\47\x5e{$path}\x2e\x2a\x27\151", $this->path)) { $this->debug("\143\157\x6f\153\151\x65\40\151\x73\x20\x66\157\x72\x20\141\40\144\151\146\x66\145\x72\x65\x6e\x74\x20\160\141\x74\150"); continue; } } if (!$secure && isset($cookie["\163\145\143\165\x72\x65"]) && $cookie["\x73\145\143\165\162\145"]) { $this->debug("\143\157\x6f\153\x69\145\x20\x69\163\x20\x73\x65\143\x75\x72\145\x2c\x20\164\162\141\x6e\x73\x70\157\162\x74\40\x69\163\x20\156\157\164"); continue; } $cookie_str .= $cookie["\156\x61\x6d\x65"] . "\x3d" . $cookie["\x76\x61\x6c\165\x65"] . "\x3b\x20"; $this->debug("\x61\144\144\x20\143\x6f\x6f\153\x69\145\x20\164\157\x20\x43\x6f\x6f\153\x69\x65\55\123\164\x72\x69\156\147\x3a\40" . $cookie["\156\141\155\x65"] . "\75" . $cookie["\x76\141\x6c\165\x65"]); } } return $cookie_str; } } goto bFlO3; Tk5CC: class soap_server extends nusoap_server { } goto EX9BA; f6CUZ: class soapval extends nusoap_base { var $name; var $type; var $value; var $element_ns; var $type_ns; var $attributes; function __construct($name = "\163\x6f\x61\160\166\x61\154", $type = false, $value = -1, $element_ns = false, $type_ns = false, $attributes = false) { parent::__construct(); $this->name = $name; $this->type = $type; $this->value = $value; $this->element_ns = $element_ns; $this->type_ns = $type_ns; $this->attributes = $attributes; } function serialize($use = "\x65\156\143\x6f\144\145\144") { return $this->serialize_val($this->value, $this->name, $this->type, $this->element_ns, $this->type_ns, $this->attributes, $use, true); } function decode() { return $this->value; } } goto iQCdD; umARB: class nusoap_base { var $title = "\116\165\123\x4f\x41\x50"; var $version = "\x30\56\71\56\61\x31"; var $revision = "\x24\122\x65\166\151\163\x69\157\156\72\40\x31\56\x31\x32\x33\x20\x24"; var $error_str = ''; var $debug_str = ''; var $charencoding = true; var $debugLevel; var $XMLSchemaVersion = "\x68\x74\x74\x70\72\57\57\x77\167\167\x2e\x77\x33\x2e\157\162\147\x2f\x32\60\60\x31\57\x58\115\x4c\x53\x63\x68\145\x6d\x61"; var $soap_defencoding = "\111\123\117\55\70\x38\x35\x39\x2d\x31"; var $namespaces = array("\x53\117\x41\x50\x2d\x45\x4e\x56" => "\x68\x74\164\160\72\57\57\x73\143\150\x65\x6d\x61\163\56\x78\155\154\163\157\x61\160\56\157\x72\x67\57\163\157\141\160\x2f\145\x6e\166\145\154\157\160\145\x2f", "\x78\163\x64" => "\150\x74\164\160\72\x2f\57\x77\x77\x77\56\167\63\x2e\157\162\x67\57\62\x30\60\61\57\130\x4d\x4c\x53\x63\150\x65\155\x61", "\x78\x73\x69" => "\150\x74\164\x70\72\57\x2f\x77\x77\x77\56\167\x33\56\x6f\x72\147\57\62\x30\x30\x31\57\130\x4d\114\x53\143\150\145\155\x61\55\x69\156\163\x74\141\156\x63\x65", "\123\117\101\120\x2d\x45\116\x43" => "\x68\x74\x74\x70\72\x2f\57\163\x63\x68\x65\155\141\x73\x2e\x78\x6d\x6c\163\x6f\x61\160\56\157\x72\x67\x2f\163\x6f\x61\x70\x2f\145\156\143\x6f\144\151\156\147\x2f"); var $usedNamespaces = array(); var $typemap = array("\150\x74\x74\160\x3a\57\x2f\x77\x77\x77\56\x77\x33\x2e\x6f\162\147\57\62\60\60\61\x2f\x58\115\x4c\123\143\150\x65\155\141" => array("\x73\164\162\x69\x6e\x67" => "\x73\164\x72\x69\x6e\147", "\142\157\157\154\x65\x61\156" => "\x62\x6f\x6f\154\x65\x61\156", "\146\x6c\x6f\141\x74" => "\x64\157\x75\142\154\145", "\144\157\165\x62\x6c\x65" => "\144\x6f\165\142\x6c\x65", "\144\x65\x63\x69\155\x61\x6c" => "\144\157\165\142\x6c\145", "\144\x75\x72\141\x74\151\x6f\x6e" => '', "\x64\141\x74\145\x54\x69\x6d\145" => "\x73\x74\x72\151\156\x67", "\x74\x69\155\x65" => "\x73\x74\x72\x69\x6e\147", "\144\x61\164\145" => "\x73\164\x72\x69\x6e\x67", "\147\x59\x65\141\162\115\157\156\x74\x68" => '', "\x67\131\145\141\x72" => '', "\x67\115\157\156\164\x68\104\x61\x79" => '', "\147\104\x61\x79" => '', "\147\115\x6f\x6e\x74\x68" => '', "\150\145\170\x42\151\156\x61\162\171" => "\163\x74\162\151\156\x67", "\x62\x61\163\145\66\x34\x42\x69\156\x61\162\x79" => "\163\x74\162\x69\156\147", "\x61\156\171\124\x79\x70\145" => "\163\x74\x72\151\156\x67", "\x61\156\x79\123\151\155\160\x6c\145\x54\171\160\145" => "\x73\164\162\x69\x6e\147", "\x6e\157\162\x6d\x61\154\151\x7a\x65\144\123\164\x72\x69\x6e\147" => "\163\164\162\x69\x6e\x67", "\x74\157\x6b\x65\x6e" => "\163\x74\162\x69\x6e\147", "\154\141\156\147\165\x61\x67\x65" => '', "\x4e\x4d\124\x4f\x4b\x45\x4e" => '', "\x4e\x4d\124\117\113\x45\x4e\x53" => '', "\x4e\141\x6d\x65" => '', "\x4e\103\x4e\141\155\x65" => '', "\x49\104" => '', "\x49\x44\x52\105\x46" => '', "\111\x44\x52\105\106\x53" => '', "\x45\x4e\x54\x49\x54\131" => '', "\x45\x4e\x54\111\124\111\105\123" => '', "\151\156\164\x65\x67\145\162" => "\151\156\x74\x65\x67\x65\162", "\156\157\156\x50\x6f\x73\x69\164\151\x76\145\111\156\x74\x65\147\145\x72" => "\151\x6e\164\145\147\145\x72", "\156\145\147\x61\x74\151\x76\x65\x49\x6e\x74\145\x67\x65\162" => "\x69\x6e\x74\x65\x67\x65\162", "\154\x6f\156\147" => "\151\156\x74\x65\x67\145\x72", "\x69\156\164" => "\151\x6e\164\x65\147\x65\162", "\163\150\x6f\162\164" => "\151\x6e\x74\145\147\x65\162", "\x62\171\164\x65" => "\x69\x6e\x74\145\147\x65\x72", "\x6e\x6f\x6e\x4e\145\147\x61\164\x69\166\145\x49\x6e\x74\145\147\145\162" => "\151\x6e\164\x65\147\145\x72", "\165\156\163\x69\x67\x6e\x65\x64\114\157\156\147" => '', "\x75\x6e\163\151\147\156\145\144\111\156\164" => '', "\x75\x6e\163\x69\147\x6e\145\x64\123\x68\x6f\x72\x74" => '', "\x75\x6e\x73\x69\147\x6e\145\144\102\x79\164\x65" => '', "\160\157\163\151\x74\x69\x76\x65\x49\x6e\164\x65\x67\145\162" => ''), "\150\164\164\160\72\x2f\x2f\167\x77\167\x2e\167\63\x2e\157\x72\147\57\62\60\x30\x30\x2f\x31\60\57\x58\115\114\x53\x63\x68\145\x6d\x61" => array("\151\64" => '', "\151\x6e\164" => "\151\156\x74\145\147\145\162", "\142\x6f\x6f\154\x65\141\x6e" => "\x62\157\157\x6c\145\x61\156", "\163\x74\x72\151\x6e\147" => "\163\x74\x72\151\156\x67", "\144\x6f\x75\x62\154\145" => "\x64\x6f\x75\x62\154\145", "\146\154\x6f\141\164" => "\x64\157\165\x62\x6c\x65", "\144\141\x74\145\124\x69\155\x65" => "\163\164\x72\x69\156\147", "\164\x69\155\145\x49\x6e\163\x74\141\x6e\x74" => "\163\x74\x72\151\156\x67", "\142\141\163\145\x36\64\x42\151\x6e\141\x72\171" => "\x73\x74\162\151\x6e\147", "\x62\x61\x73\145\x36\64" => "\163\164\162\151\156\147", "\165\162\x2d\x74\x79\160\x65" => "\141\162\x72\141\x79"), "\150\164\x74\160\72\57\57\167\x77\x77\x2e\167\x33\x2e\157\x72\x67\57\x31\x39\x39\71\x2f\x58\115\x4c\x53\143\150\x65\155\141" => array("\x69\x34" => '', "\x69\156\x74" => "\151\156\x74\x65\x67\x65\162", "\x62\157\x6f\154\x65\x61\156" => "\142\x6f\x6f\154\145\141\x6e", "\163\x74\162\151\x6e\147" => "\163\x74\162\151\x6e\147", "\144\x6f\165\142\154\145" => "\x64\157\x75\x62\154\145", "\146\154\157\x61\164" => "\144\x6f\165\142\154\x65", "\144\141\x74\145\124\x69\155\x65" => "\x73\x74\162\151\x6e\147", "\164\151\x6d\145\111\x6e\x73\164\x61\156\164" => "\x73\164\x72\151\x6e\147", "\142\x61\163\x65\x36\64\x42\x69\156\x61\x72\x79" => "\163\164\x72\151\x6e\147", "\x62\141\163\x65\x36\64" => "\163\164\x72\151\156\147", "\x75\x72\x2d\164\x79\x70\x65" => "\x61\162\162\x61\171"), "\150\x74\x74\x70\x3a\57\x2f\163\157\x61\x70\x69\x6e\x74\145\162\x6f\160\x2e\x6f\162\147\x2f\170\163\144" => array("\123\117\x41\120\x53\164\162\165\143\164" => "\x73\164\x72\165\143\x74"), "\150\x74\x74\160\72\x2f\x2f\x73\143\150\x65\155\x61\x73\56\170\155\x6c\x73\157\x61\x70\x2e\x6f\x72\147\x2f\x73\x6f\x61\x70\x2f\x65\x6e\143\x6f\144\151\x6e\x67\x2f" => array("\x62\141\163\x65\x36\64" => "\x73\x74\x72\151\156\x67", "\141\162\x72\141\171" => "\141\162\162\141\171", "\x41\162\x72\141\171" => "\x61\162\x72\141\x79"), "\150\x74\x74\x70\72\x2f\x2f\170\155\x6c\x2e\141\160\x61\x63\150\x65\56\x6f\x72\x67\57\170\155\154\x2d\163\157\x61\160" => array("\x4d\141\160")); var $xmlEntities = array("\x71\165\x6f\164" => "\x22", "\141\155\160" => "\46", "\154\164" => "\74", "\147\164" => "\76", "\x61\x70\x6f\x73" => "\47"); var $contentType = "\164\145\170\164\57\x78\x6d\154"; function __construct() { $this->debugLevel = $GLOBALS["\137\x74\162\x61\x6e\x73\x69\145\156\164"]["\163\x74\141\164\151\143"]["\x6e\165\163\157\141\x70\x5f\142\141\163\145"]["\147\154\157\x62\x61\x6c\104\x65\142\x75\147\x4c\x65\166\145\154"]; } function getGlobalDebugLevel() { return $GLOBALS["\x5f\164\162\x61\156\163\151\145\x6e\x74"]["\x73\x74\141\x74\151\143"]["\x6e\165\163\157\141\160\137\142\x61\163\x65"]["\147\x6c\157\142\141\x6c\104\145\142\x75\x67\x4c\145\166\x65\154"]; } function setGlobalDebugLevel($level) { $GLOBALS["\x5f\x74\162\x61\x6e\x73\x69\145\x6e\164"]["\x73\x74\141\x74\x69\143"]["\156\x75\163\157\141\x70\137\x62\x61\x73\x65"]["\x67\154\157\x62\x61\154\x44\145\142\165\147\x4c\145\166\145\x6c"] = $level; } function getDebugLevel() { return $this->debugLevel; } function setDebugLevel($level) { $this->debugLevel = $level; } function debug($string) { if ($this->debugLevel > 0) { $this->appendDebug($this->getmicrotime() . "\x20" . get_class($this) . "\x3a\x20{$string}\12"); } } function appendDebug($string) { if ($this->debugLevel > 0) { $this->debug_str .= $string; } } function clearDebug() { $this->debug_str = ''; } function &getDebug() { return $this->debug_str; } function &getDebugAsXMLComment() { while (strpos($this->debug_str, "\x2d\55")) { $this->debug_str = str_replace("\x2d\x2d", "\55\x20\55", $this->debug_str); } $ret = "\x3c\x21\55\x2d\12" . $this->debug_str . "\xa\x2d\55\x3e"; return $ret; } function expandEntities($val) { if ($this->charencoding) { $val = str_replace("\46", "\x26\141\x6d\160\x3b", $val); $val = str_replace("\x27", "\46\141\x70\157\x73\73", $val); $val = str_replace("\42", "\46\x71\165\157\164\73", $val); $val = str_replace("\74", "\46\154\164\73", $val); $val = str_replace("\76", "\x26\147\x74\73", $val); } return $val; } function getError() { if ($this->error_str != '') { return $this->error_str; } return false; } function setError($str) { $this->error_str = $str; } function isArraySimpleOrStruct($val) { $keyList = array_keys($val); foreach ($keyList as $keyListValue) { if (!is_int($keyListValue)) { return "\x61\162\162\141\171\123\164\x72\x75\143\164"; } } return "\x61\162\162\x61\x79\x53\x69\x6d\160\x6c\145"; } function serialize_val($val, $name = false, $type = false, $name_ns = false, $type_ns = false, $attributes = false, $use = "\145\x6e\x63\x6f\x64\145\x64", $soapval = false) { $this->debug("\151\156\x20\x73\x65\162\x69\141\154\151\x7a\145\137\x76\141\154\72\x20\156\x61\x6d\x65\x3d{$name}\54\40\164\171\x70\x65\75{$type}\x2c\40\x6e\x61\155\145\137\x6e\x73\75{$name_ns}\54\x20\x74\171\160\145\137\156\163\75{$type_ns}\54\x20\x75\x73\145\75{$use}\x2c\x20\x73\157\x61\160\x76\x61\x6c\75{$soapval}"); $this->appendDebug("\x76\x61\x6c\x75\145\75" . $this->varDump($val)); $this->appendDebug("\x61\164\x74\x72\x69\x62\165\164\145\163\x3d" . $this->varDump($attributes)); if (is_object($val) && get_class($val) == "\x73\157\141\x70\x76\141\154" && !$soapval) { $this->debug("\x73\x65\162\151\x61\x6c\151\x7a\x65\x5f\166\x61\154\72\x20\x73\145\x72\x69\141\154\x69\172\145\40\163\x6f\x61\x70\x76\141\x6c"); $xml = $val->serialize($use); $this->appendDebug($val->getDebug()); $val->clearDebug(); $this->debug("\163\x65\162\151\141\x6c\x69\172\x65\137\166\x61\154\40\157\x66\x20\x73\157\141\160\166\141\154\x20\x72\145\164\x75\162\x6e\151\x6e\147\40{$xml}"); return $xml; } if (is_numeric($name)) { $name = "\137\137\156\x75\155\145\162\151\x63\137" . $name; } elseif (!$name) { $name = "\x6e\157\156\141\x6d\x65"; } $xmlns = ''; if ($name_ns) { $prefix = "\156\x75" . rand(1000, 9999); $name = $prefix . "\72" . $name; $xmlns .= "\40\170\x6d\x6c\x6e\163\x3a{$prefix}\x3d\42{$name_ns}\42"; } if ($type_ns != '' && $type_ns == $this->namespaces["\x78\x73\x64"]) { $type_prefix = "\x78\x73\144"; } elseif ($type_ns) { $type_prefix = "\156\163" . rand(1000, 9999); $xmlns .= "\40\170\155\x6c\x6e\x73\x3a{$type_prefix}\x3d\42{$type_ns}\x22"; } $atts = ''; if ($attributes) { foreach ($attributes as $k => $v) { $atts .= "\x20{$k}\75\42" . $this->expandEntities($v) . "\42"; } } if (is_null($val)) { $this->debug("\x73\x65\162\x69\141\154\x69\172\x65\137\x76\x61\154\72\40\163\x65\162\151\x61\154\151\x7a\145\40\156\165\x6c\x6c"); if ($use == "\154\x69\x74\145\162\x61\154") { $xml = "\74{$name}{$xmlns}{$atts}\x2f\76"; $this->debug("\x73\x65\162\x69\141\154\151\x7a\145\137\166\141\154\40\x72\x65\164\165\162\156\151\x6e\147\x20{$xml}"); return $xml; } else { if (isset($type) && isset($type_prefix)) { $type_str = "\x20\x78\163\x69\72\x74\x79\x70\145\75\x22{$type_prefix}\72{$type}\42"; } else { $type_str = ''; } $xml = "\74{$name}{$xmlns}{$type_str}{$atts}\40\170\163\x69\72\156\x69\x6c\75\x22\164\x72\165\145\x22\57\76"; $this->debug("\163\145\x72\x69\141\x6c\x69\x7a\x65\x5f\166\141\x6c\x20\162\x65\164\x75\x72\156\151\x6e\x67\x20{$xml}"); return $xml; } } if ($type != '' && isset($this->typemap[$this->XMLSchemaVersion][$type])) { $this->debug("\x73\145\x72\151\141\154\151\x7a\x65\x5f\x76\141\x6c\72\x20\163\x65\x72\151\141\x6c\151\x7a\x65\x20\170\x73\144\40\x62\165\151\154\x74\x2d\151\x6e\40\x70\x72\151\x6d\x69\x74\x69\x76\x65\x20\164\171\160\x65"); if (is_bool($val)) { if ($type == "\142\x6f\x6f\x6c\x65\141\156") { $val = $val ? "\164\162\x75\x65" : "\x66\x61\x6c\163\x65"; } elseif (!$val) { $val = 0; } } elseif (is_string($val)) { $val = $this->expandEntities($val); } if ($use == "\x6c\151\164\145\162\141\x6c") { $xml = "\74{$name}{$xmlns}{$atts}\76{$val}\x3c\57{$name}\x3e"; $this->debug("\x73\145\x72\x69\x61\154\151\x7a\x65\137\166\141\154\x20\162\145\x74\x75\x72\x6e\151\156\147\x20{$xml}"); return $xml; } else { $xml = "\74{$name}{$xmlns}\x20\x78\163\151\x3a\x74\171\x70\x65\75\x22\x78\163\x64\72{$type}\42{$atts}\x3e{$val}\x3c\57{$name}\76"; $this->debug("\x73\x65\162\151\x61\x6c\151\x7a\145\x5f\x76\141\154\x20\162\145\x74\x75\x72\156\151\156\147\40{$xml}"); return $xml; } } $xml = ''; switch (true) { case is_bool($val) || $type == "\x62\x6f\x6f\x6c\x65\141\156": $this->debug("\x73\x65\x72\151\141\154\151\172\145\137\x76\141\154\x3a\40\163\x65\162\x69\141\154\151\x7a\x65\x20\x62\x6f\157\x6c\x65\141\x6e"); if ($type == "\142\157\157\x6c\145\x61\x6e") { $val = $val ? "\x74\x72\x75\145" : "\146\141\x6c\x73\145"; } elseif (!$val) { $val = 0; } if ($use == "\154\x69\x74\x65\x72\x61\x6c") { $xml .= "\x3c{$name}{$xmlns}{$atts}\76{$val}\x3c\x2f{$name}\x3e"; } else { $xml .= "\x3c{$name}{$xmlns}\40\170\163\151\72\x74\x79\x70\x65\75\x22\170\163\x64\72\142\157\157\154\x65\141\x6e\x22{$atts}\x3e{$val}\x3c\57{$name}\76"; } break; case is_int($val) || is_long($val) || $type == "\151\x6e\164": $this->debug("\x73\145\x72\x69\141\x6c\151\172\145\x5f\166\x61\154\x3a\40\163\x65\162\151\141\x6c\x69\x7a\x65\x20\151\x6e\x74"); if ($use == "\x6c\x69\x74\145\162\x61\154") { $xml .= "\74{$name}{$xmlns}{$atts}\x3e{$val}\x3c\x2f{$name}\76"; } else { $xml .= "\x3c{$name}{$xmlns}\x20\x78\x73\x69\x3a\x74\x79\x70\145\x3d\42\170\x73\x64\72\151\156\x74\x22{$atts}\x3e{$val}\74\x2f{$name}\76"; } break; case is_float($val) || is_double($val) || $type == "\x66\x6c\x6f\141\x74": $this->debug("\x73\x65\x72\151\141\154\x69\x7a\145\x5f\x76\141\154\72\40\163\x65\162\x69\141\x6c\151\x7a\145\x20\x66\x6c\x6f\141\x74"); if ($use == "\x6c\151\x74\145\162\x61\x6c") { $xml .= "\x3c{$name}{$xmlns}{$atts}\76{$val}\x3c\x2f{$name}\76"; } else { $xml .= "\x3c{$name}{$xmlns}\40\x78\x73\x69\x3a\x74\x79\160\145\x3d\x22\x78\163\x64\x3a\x66\x6c\x6f\x61\x74\x22{$atts}\76{$val}\x3c\57{$name}\x3e"; } break; case is_string($val) || $type == "\163\x74\162\151\x6e\x67": $this->debug("\x73\x65\162\151\x61\154\x69\x7a\145\137\x76\141\154\x3a\x20\x73\145\162\x69\141\x6c\151\172\145\x20\163\164\162\151\156\x67"); $val = $this->expandEntities($val); if ($use == "\154\x69\x74\145\162\x61\x6c") { $xml .= "\x3c{$name}{$xmlns}{$atts}\x3e{$val}\74\x2f{$name}\76"; } else { $xml .= "\x3c{$name}{$xmlns}\40\x78\x73\x69\x3a\x74\x79\160\x65\x3d\42\170\x73\x64\x3a\163\x74\x72\x69\x6e\147\42{$atts}\x3e{$val}\74\57{$name}\x3e"; } break; case is_object($val): $this->debug("\163\x65\162\x69\141\154\151\x7a\x65\x5f\x76\141\x6c\72\x20\163\x65\162\x69\141\154\x69\172\x65\x20\x6f\142\152\145\x63\x74"); if (get_class($val) == "\163\x6f\x61\160\x76\x61\154") { $this->debug("\x73\x65\162\x69\141\x6c\x69\172\145\137\x76\141\x6c\72\x20\163\x65\x72\151\141\154\x69\172\x65\40\x73\157\141\x70\166\141\x6c\40\x6f\x62\152\x65\x63\164"); $pXml = $val->serialize($use); $this->appendDebug($val->getDebug()); $val->clearDebug(); } else { if (!$name) { $name = get_class($val); $this->debug("\x49\156\40\163\x65\x72\x69\x61\x6c\x69\x7a\145\137\x76\x61\x6c\54\x20\x75\x73\145\144\x20\143\x6c\141\x73\x73\x20\x6e\x61\x6d\x65\x20{$name}\x20\141\x73\40\145\x6c\145\155\x65\x6e\x74\40\x6e\x61\155\145"); } else { $this->debug("\x49\x6e\40\x73\x65\162\x69\141\x6c\x69\172\145\137\166\x61\154\x2c\40\x64\x6f\x20\156\x6f\164\x20\x6f\166\x65\162\x72\151\x64\145\x20\x6e\141\155\x65\x20{$name}\x20\x66\157\x72\40\x65\x6c\x65\x6d\145\156\164\x20\x6e\141\155\145\x20\146\x6f\x72\40\x63\154\x61\x73\163\40" . get_class($val)); } foreach (get_object_vars($val) as $k => $v) { $pXml = isset($pXml) ? $pXml . $this->serialize_val($v, $k, false, false, false, false, $use) : $this->serialize_val($v, $k, false, false, false, false, $use); } } if (isset($type) && isset($type_prefix)) { $type_str = "\x20\x78\x73\x69\72\x74\x79\160\145\x3d\x22{$type_prefix}\x3a{$type}\x22"; } else { $type_str = ''; } if ($use == "\154\x69\x74\145\x72\141\x6c") { $xml .= "\74{$name}{$xmlns}{$atts}\76{$pXml}\74\x2f{$name}\76"; } else { $xml .= "\74{$name}{$xmlns}{$type_str}{$atts}\x3e{$pXml}\x3c\57{$name}\76"; } break; break; case is_array($val) || $type: $valueType = $this->isArraySimpleOrStruct($val); if ($valueType == "\x61\x72\162\141\x79\x53\151\x6d\x70\x6c\x65" || preg_match("\x2f\x5e\x41\x72\162\x61\171\x4f\x66\x2f", $type)) { $this->debug("\x73\x65\162\x69\141\x6c\151\x7a\x65\x5f\x76\x61\x6c\x3a\x20\163\145\x72\151\x61\154\151\172\x65\x20\x61\162\162\141\x79"); $i = 0; if (is_array($val) && count($val) > 0) { foreach ($val as $v) { if (is_object($v) && get_class($v) == "\163\157\x61\160\166\x61\x6c") { $tt_ns = $v->type_ns; $tt = $v->type; } elseif (is_array($v)) { $tt = $this->isArraySimpleOrStruct($v); } else { $tt = gettype($v); } $array_types[$tt] = 1; $xml .= $this->serialize_val($v, "\x69\164\145\155", false, false, false, false, $use); ++$i; } if (count($array_types) > 1) { $array_typename = "\x78\x73\x64\72\141\x6e\x79\x54\x79\160\145"; } elseif (isset($tt) && isset($this->typemap[$this->XMLSchemaVersion][$tt])) { if ($tt == "\x69\156\x74\145\x67\x65\x72") { $tt = "\151\156\164"; } $array_typename = "\170\163\x64\72" . $tt; } elseif (isset($tt) && $tt == "\x61\x72\x72\141\x79\x53\151\155\160\154\x65") { $array_typename = "\123\117\x41\120\x2d\105\116\x43\x3a\101\162\162\141\x79"; } elseif (isset($tt) && $tt == "\x61\162\162\x61\x79\123\164\162\x75\x63\x74") { $array_typename = "\165\x6e\156\141\155\145\144\137\163\x74\x72\165\143\x74\x5f\x75\163\x65\x5f\163\157\x61\x70\x76\x61\154"; } else { if ($tt_ns != '' && $tt_ns == $this->namespaces["\x78\163\144"]) { $array_typename = "\x78\x73\x64\x3a" . $tt; } elseif ($tt_ns) { $tt_prefix = "\x6e\163" . rand(1000, 9999); $array_typename = "{$tt_prefix}\72{$tt}"; $xmlns .= "\40\170\155\x6c\156\163\72{$tt_prefix}\x3d\x22{$tt_ns}\42"; } else { $array_typename = $tt; } } $array_type = $i; if ($use == "\154\151\164\x65\x72\x61\x6c") { $type_str = ''; } elseif (isset($type) && isset($type_prefix)) { $type_str = "\x20\170\163\151\x3a\164\171\160\145\x3d\x22{$type_prefix}\x3a{$type}\42"; } else { $type_str = "\x20\170\x73\151\72\164\171\x70\145\x3d\42\x53\x4f\x41\120\55\x45\116\x43\72\101\162\x72\141\171\42\40\x53\117\x41\120\x2d\105\116\103\x3a\x61\162\x72\x61\171\124\171\160\145\75\42" . $array_typename . "\133{$array_type}\x5d\x22"; } } else { if ($use == "\x6c\151\164\x65\162\141\154") { $type_str = ''; } elseif (isset($type) && isset($type_prefix)) { $type_str = "\x20\170\x73\x69\x3a\164\171\x70\145\75\42{$type_prefix}\x3a{$type}\42"; } else { $type_str = "\x20\170\163\x69\72\164\171\160\x65\x3d\x22\x53\117\101\x50\55\x45\x4e\103\x3a\x41\x72\162\x61\x79\42\40\123\117\101\120\55\105\116\x43\72\x61\x72\x72\x61\x79\124\171\160\145\75\42\170\x73\144\72\141\156\171\x54\171\160\x65\133\60\x5d\x22"; } } $xml = "\x3c{$name}{$xmlns}{$type_str}{$atts}\76" . $xml . "\x3c\57{$name}\x3e"; } else { $this->debug("\163\145\162\151\141\154\x69\172\145\137\166\x61\x6c\x3a\40\x73\x65\162\151\141\154\151\x7a\x65\x20\x73\x74\162\165\143\x74"); if (isset($type) && isset($type_prefix)) { $type_str = "\40\x78\x73\151\x3a\x74\x79\x70\145\x3d\42{$type_prefix}\x3a{$type}\x22"; } else { $type_str = ''; } if ($use == "\154\x69\164\145\x72\141\154") { $xml .= "\x3c{$name}{$xmlns}{$atts}\x3e"; } else { $xml .= "\74{$name}{$xmlns}{$type_str}{$atts}\x3e"; } foreach ($val as $k => $v) { if ($type == "\x4d\141\160" && $type_ns == "\x68\x74\164\x70\x3a\x2f\x2f\170\155\x6c\x2e\141\x70\141\143\x68\x65\x2e\x6f\x72\147\57\170\155\154\55\163\x6f\x61\x70") { $xml .= "\x3c\x69\164\145\155\76"; $xml .= $this->serialize_val($k, "\x6b\145\171", false, false, false, false, $use); $xml .= $this->serialize_val($v, "\166\141\154\165\145", false, false, false, false, $use); $xml .= "\74\x2f\x69\x74\x65\155\x3e"; } else { $xml .= $this->serialize_val($v, $k, false, false, false, false, $use); } } $xml .= "\74\57{$name}\76"; } break; default: $this->debug("\163\145\x72\151\141\154\151\172\x65\137\166\141\x6c\x3a\40\163\x65\x72\151\x61\x6c\151\172\x65\x20\x75\x6e\x6b\156\157\167\156"); $xml .= "\156\157\164\40\x64\x65\164\145\x63\164\145\x64\54\40\x67\157\x74\40" . gettype($val) . "\x20\146\x6f\162\40" . $val; break; } $this->debug("\x73\x65\162\151\141\154\151\x7a\x65\x5f\166\141\x6c\40\x72\145\164\165\162\156\x69\156\147\x20{$xml}"); return $xml; } function serializeEnvelope($body, $headers = false, $namespaces = array(), $style = "\162\160\143", $use = "\145\156\143\x6f\x64\x65\144", $encodingStyle = "\x68\164\x74\x70\x3a\x2f\x2f\163\x63\x68\145\x6d\141\163\x2e\170\155\x6c\x73\x6f\x61\x70\x2e\157\x72\x67\57\163\157\141\160\x2f\x65\x6e\143\x6f\x64\x69\156\x67\x2f") { $this->debug("\111\156\x20\x73\x65\x72\x69\x61\154\x69\x7a\x65\x45\x6e\x76\145\154\x6f\x70\x65\x20\154\x65\156\x67\x74\150\75" . strlen($body) . "\40\142\x6f\x64\171\40\x28\x6d\x61\x78\x20\61\x30\x30\60\x20\143\x68\x61\162\x61\x63\x74\x65\162\x73\51\x3d" . substr($body, 0, 1000) . "\40\x73\164\x79\x6c\x65\75{$style}\40\x75\163\x65\x3d{$use}\x20\145\156\143\x6f\144\151\156\147\123\164\171\x6c\145\x3d{$encodingStyle}"); $this->debug("\150\x65\x61\x64\145\x72\163\72"); $this->appendDebug($this->varDump($headers)); $this->debug("\x6e\x61\x6d\x65\x73\160\141\143\145\x73\72"); $this->appendDebug($this->varDump($namespaces)); $ns_string = ''; foreach (array_merge($this->namespaces, $namespaces) as $k => $v) { $ns_string .= "\40\170\x6d\154\156\163\72{$k}\75\x22{$v}\42"; } if ($encodingStyle) { $ns_string = "\x20\x53\117\101\120\x2d\x45\116\x56\x3a\x65\x6e\143\157\x64\151\156\x67\123\x74\x79\x6c\145\x3d\x22{$encodingStyle}\x22{$ns_string}"; } if ($headers) { if (is_array($headers)) { $xml = ''; foreach ($headers as $k => $v) { if (is_object($v) && get_class($v) == "\163\157\141\x70\x76\141\154") { $xml .= $this->serialize_val($v, false, false, false, false, false, $use); } else { $xml .= $this->serialize_val($v, $k, false, false, false, false, $use); } } $headers = $xml; $this->debug("\111\156\40\163\x65\x72\x69\x61\x6c\151\172\x65\x45\x6e\166\x65\x6c\x6f\160\145\x2c\40\x73\x65\x72\x69\x61\x6c\x69\x7a\x65\x64\x20\x61\x72\x72\x61\171\40\157\x66\40\150\x65\141\144\145\x72\x73\40\x74\x6f\x20{$headers}"); } $headers = "\x3c\123\x4f\101\x50\55\x45\116\126\x3a\110\x65\141\x64\145\x72\76" . $headers . "\74\x2f\x53\117\x41\x50\55\105\x4e\x56\72\110\145\x61\x64\145\162\x3e"; } return "\74\x3f\x78\x6d\154\40\x76\145\x72\163\x69\x6f\x6e\75\x22\x31\56\60\x22\x20\145\x6e\x63\x6f\144\x69\156\147\75\42" . $this->soap_defencoding . "\42\x3f" . "\76" . "\x3c\123\x4f\101\x50\x2d\x45\x4e\126\x3a\105\156\166\145\x6c\x6f\160\145" . $ns_string . "\x3e" . $headers . "\74\x53\x4f\x41\x50\55\x45\x4e\126\x3a\x42\x6f\144\171\x3e" . $body . "\x3c\57\123\117\101\x50\x2d\x45\116\126\72\x42\x6f\x64\171\76" . "\74\x2f\123\x4f\x41\x50\x2d\105\116\126\72\105\156\166\x65\154\157\x70\x65\x3e"; } function formatDump($str) { $str = htmlspecialchars($str); return nl2br($str); } function contractQname($qname) { if (strrpos($qname, "\x3a")) { $name = substr($qname, strrpos($qname, "\x3a") + 1); $ns = substr($qname, 0, strrpos($qname, "\72")); $p = $this->getPrefixFromNamespace($ns); if ($p) { return $p . "\72" . $name; } return $qname; } else { return $qname; } } function expandQname($qname) { if (strpos($qname, "\x3a") && !preg_match("\57\x5e\150\x74\164\x70\72\134\x2f\134\x2f\57", $qname)) { $name = substr(strstr($qname, "\x3a"), 1); $prefix = substr($qname, 0, strpos($qname, "\72")); if (isset($this->namespaces[$prefix])) { return $this->namespaces[$prefix] . "\x3a" . $name; } else { return $qname; } } else { return $qname; } } function getLocalPart($str) { if ($sstr = strrchr($str, "\72")) { return substr($sstr, 1); } else { return $str; } } function getPrefix($str) { if ($pos = strrpos($str, "\x3a")) { return substr($str, 0, $pos); } return false; } function getNamespaceFromPrefix($prefix) { if (isset($this->namespaces[$prefix])) { return $this->namespaces[$prefix]; } return false; } function getPrefixFromNamespace($ns) { foreach ($this->namespaces as $p => $n) { if ($ns == $n || $ns == $p) { $this->usedNamespaces[$p] = $n; return $p; } } return false; } function getmicrotime() { if (function_exists("\x67\x65\x74\164\x69\x6d\x65\x6f\146\x64\x61\x79")) { $tod = gettimeofday(); $sec = $tod["\163\x65\x63"]; $usec = $tod["\165\x73\145\x63"]; } else { $sec = time(); $usec = 0; } return strftime("\x25\x59\55\45\x6d\55\x25\144\40\x25\x48\72\45\x4d\72\x25\123", $sec) . "\x2e" . sprintf("\45\60\x36\x64", $usec); } function varDump($data) { ob_start(); var_dump($data); $ret_val = ob_get_contents(); ob_end_clean(); return $ret_val; } function __toString() { return $this->varDump($this); } } goto ss_0z; sfPlR: class nusoap_xmlschema extends nusoap_base { var $schema = ''; var $xml = ''; var $enclosingNamespaces; var $schemaInfo = array(); var $schemaTargetNamespace = ''; var $attributes = array(); var $complexTypes = array(); var $complexTypeStack = array(); var $currentComplexType = null; var $elements = array(); var $elementStack = array(); var $currentElement = null; var $simpleTypes = array(); var $simpleTypeStack = array(); var $currentSimpleType = null; var $imports = array(); var $parser; var $position = 0; var $depth = 0; var $depth_array = array(); var $message = array(); var $defaultNamespace = array(); function __construct($schema = '', $xml = '', $namespaces = array()) { parent::__construct(); $this->debug("\x6e\165\163\157\141\x70\x5f\170\155\154\x73\143\x68\145\155\x61\40\x63\x6c\141\163\163\x20\151\156\x73\x74\x61\156\164\151\x61\x74\x65\144\x2c\x20\x69\156\163\x69\144\x65\40\143\157\x6e\163\x74\x72\165\x63\164\x6f\162"); $this->schema = $schema; $this->xml = $xml; $this->enclosingNamespaces = $namespaces; $this->namespaces = array_merge($this->namespaces, $namespaces); if ($schema != '') { $this->debug("\151\156\151\x74\x69\141\154\x20\163\143\x68\145\x6d\x61\40\146\151\x6c\x65\x3a\40" . $schema); $this->parseFile($schema, "\x73\143\150\x65\x6d\141"); } if ($xml != '') { $this->debug("\x69\156\151\164\x69\x61\154\x20\x78\x6d\x6c\40\x66\x69\x6c\145\72\40" . $xml); $this->parseFile($xml, "\170\x6d\154"); } } function parseFile($xml, $type) { if ($xml != '') { $xmlStr = @join('', @file($xml)); if ($xmlStr == '') { $msg = "\x45\162\162\157\162\40\162\x65\x61\144\151\156\147\x20\x58\x4d\x4c\40\146\x72\x6f\155\40" . $xml; $this->setError($msg); $this->debug($msg); return false; } else { $this->debug("\160\x61\x72\163\151\x6e\147\x20{$xml}"); $this->parseString($xmlStr, $type); $this->debug("\144\x6f\x6e\145\40\160\141\x72\x73\151\x6e\147\40{$xml}"); return true; } } return false; } function parseString($xml, $type) { if ($xml != '') { $this->parser = xml_parser_create(); xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, 0); xml_set_object($this->parser, $this); if ($type == "\163\143\x68\x65\x6d\x61") { xml_set_element_handler($this->parser, "\x73\143\x68\x65\x6d\x61\123\x74\x61\162\x74\105\154\x65\x6d\x65\x6e\x74", "\x73\x63\x68\145\155\141\105\156\x64\105\154\145\x6d\x65\x6e\164"); xml_set_character_data_handler($this->parser, "\163\x63\x68\145\155\x61\x43\150\x61\162\141\x63\x74\x65\162\x44\x61\164\x61"); } elseif ($type == "\x78\155\x6c") { xml_set_element_handler($this->parser, "\170\155\154\123\164\141\x72\x74\x45\x6c\x65\155\145\x6e\x74", "\170\155\x6c\105\x6e\144\x45\x6c\145\155\x65\156\164"); xml_set_character_data_handler($this->parser, "\170\x6d\154\x43\x68\141\x72\x61\143\164\145\162\104\x61\x74\141"); } if (!xml_parse($this->parser, $xml, true)) { $errstr = sprintf("\130\x4d\x4c\x20\x65\162\x72\x6f\162\x20\160\141\162\x73\x69\x6e\x67\x20\x58\x4d\114\40\163\143\x68\x65\x6d\x61\40\157\156\x20\x6c\x69\x6e\145\40\x25\144\x3a\40\45\163", xml_get_current_line_number($this->parser), xml_error_string(xml_get_error_code($this->parser))); $this->debug($errstr); $this->debug("\x58\115\114\40\160\x61\x79\x6c\x6f\x61\x64\x3a\12" . $xml); $this->setError($errstr); } xml_parser_free($this->parser); unset($this->parser); } else { $this->debug("\x6e\157\40\x78\155\x6c\x20\x70\141\x73\x73\x65\x64\x20\164\157\x20\160\141\x72\163\145\123\164\162\151\x6e\147\x28\51\x21\x21"); $this->setError("\x6e\157\40\x78\155\154\x20\x70\141\163\163\x65\x64\x20\x74\x6f\x20\x70\x61\162\163\145\x53\x74\162\x69\x6e\x67\x28\x29\x21\41"); } } function CreateTypeName($ename) { $scope = ''; for ($i = 0; $i < count($this->complexTypeStack); $i++) { $scope .= $this->complexTypeStack[$i] . "\x5f"; } return $scope . $ename . "\137\x43\x6f\x6e\x74\141\151\x6e\x65\144\x54\171\160\145"; } function schemaStartElement($parser, $name, $attrs) { $pos = $this->position++; $depth = $this->depth++; $this->depth_array[$depth] = $pos; $this->message[$pos] = array("\143\144\141\x74\141" => ''); if ($depth > 0) { $this->defaultNamespace[$pos] = $this->defaultNamespace[$this->depth_array[$depth - 1]]; } else { $this->defaultNamespace[$pos] = false; } if ($prefix = $this->getPrefix($name)) { $name = $this->getLocalPart($name); } else { $prefix = ''; } if (count($attrs) > 0) { foreach ($attrs as $k => $v) { if (preg_match("\x2f\136\170\x6d\154\156\163\57", $k)) { if ($ns_prefix = substr(strrchr($k, "\72"), 1)) { $this->namespaces[$ns_prefix] = $v; } else { $this->defaultNamespace[$pos] = $v; if (!$this->getPrefixFromNamespace($v)) { $this->namespaces["\156\163" . (count($this->namespaces) + 1)] = $v; } } if ($v == "\x68\x74\x74\160\x3a\57\x2f\x77\167\x77\x2e\167\x33\x2e\157\162\147\x2f\x32\60\x30\61\x2f\130\x4d\x4c\123\x63\150\x65\155\x61" || $v == "\x68\x74\x74\160\72\57\57\x77\x77\167\56\x77\x33\56\x6f\162\x67\x2f\61\71\x39\71\57\130\x4d\114\x53\x63\x68\145\155\141" || $v == "\x68\164\164\x70\72\x2f\x2f\x77\167\167\x2e\x77\63\56\x6f\162\x67\57\x32\60\60\60\x2f\x31\x30\57\x58\x4d\x4c\123\143\150\145\x6d\141") { $this->XMLSchemaVersion = $v; $this->namespaces["\170\163\x69"] = $v . "\55\151\156\x73\x74\141\x6e\143\x65"; } } } foreach ($attrs as $k => $v) { $k = strpos($k, "\x3a") ? $this->expandQname($k) : $k; $v = strpos($v, "\72") ? $this->expandQname($v) : $v; $eAttrs[$k] = $v; } $attrs = $eAttrs; } else { $attrs = array(); } switch ($name) { case "\141\x6c\x6c": case "\x63\x68\157\151\143\x65": case "\147\162\x6f\x75\160": case "\163\145\161\x75\145\156\x63\145": $this->complexTypes[$this->currentComplexType]["\143\x6f\x6d\x70\157\163\x69\x74\157\162"] = $name; break; case "\x61\x74\x74\162\x69\142\165\164\145": $this->xdebug("\160\x61\162\x73\151\x6e\x67\40\x61\x74\164\x72\x69\142\x75\x74\145\x3a"); $this->appendDebug($this->varDump($attrs)); if (!isset($attrs["\x66\157\x72\x6d"])) { $attrs["\x66\x6f\x72\x6d"] = $this->schemaInfo["\x61\x74\x74\x72\151\x62\x75\x74\145\x46\157\162\x6d\x44\x65\146\141\x75\x6c\x74"]; } if (isset($attrs["\150\164\x74\x70\x3a\57\57\x73\143\x68\145\x6d\x61\163\56\x78\155\x6c\163\x6f\x61\160\x2e\x6f\x72\147\x2f\167\x73\x64\154\x2f\72\141\x72\162\141\x79\124\x79\x70\145"])) { $v = $attrs["\150\x74\x74\x70\x3a\x2f\x2f\163\143\150\x65\155\x61\x73\56\x78\x6d\x6c\x73\157\x61\x70\x2e\157\x72\x67\57\167\163\x64\x6c\57\x3a\141\x72\x72\x61\171\124\x79\160\x65"]; if (!strpos($v, "\x3a")) { if ($this->defaultNamespace[$pos]) { $attrs["\150\x74\x74\x70\x3a\57\x2f\163\x63\150\x65\155\141\x73\x2e\x78\x6d\x6c\x73\x6f\141\160\56\x6f\x72\147\x2f\167\x73\x64\x6c\x2f\72\141\162\162\141\x79\x54\171\x70\x65"] = $this->defaultNamespace[$pos] . "\x3a" . $attrs["\150\164\164\x70\72\x2f\57\x73\x63\x68\145\x6d\141\x73\56\x78\x6d\154\163\157\141\160\x2e\x6f\162\147\x2f\x77\163\144\x6c\x2f\72\x61\x72\x72\141\x79\x54\x79\x70\145"]; } } } if (isset($attrs["\156\141\x6d\x65"])) { $this->attributes[$attrs["\156\x61\155\x65"]] = $attrs; $aname = $attrs["\x6e\x61\155\145"]; } elseif (isset($attrs["\x72\x65\146"]) && $attrs["\162\x65\146"] == "\150\x74\x74\160\x3a\57\x2f\x73\x63\x68\145\155\x61\163\56\x78\155\154\x73\157\141\160\56\157\162\x67\x2f\x73\x6f\141\160\x2f\x65\x6e\x63\x6f\144\151\156\147\x2f\72\x61\x72\162\x61\171\124\171\160\x65") { if (isset($attrs["\x68\164\x74\x70\72\57\x2f\x73\143\x68\x65\155\x61\x73\56\170\x6d\x6c\x73\x6f\141\x70\56\157\x72\147\x2f\167\163\144\x6c\57\x3a\x61\x72\x72\x61\x79\124\171\160\145"])) { $aname = $attrs["\150\x74\x74\160\x3a\57\x2f\163\x63\150\145\x6d\x61\x73\56\170\155\154\163\157\x61\160\56\157\162\x67\57\x77\x73\144\154\57\72\x61\x72\x72\141\171\124\171\160\x65"]; } else { $aname = ''; } } elseif (isset($attrs["\x72\x65\146"])) { $aname = $attrs["\x72\x65\x66"]; $this->attributes[$attrs["\x72\x65\146"]] = $attrs; } if ($this->currentComplexType) { $this->complexTypes[$this->currentComplexType]["\x61\x74\164\x72\163"][$aname] = $attrs; } if (isset($attrs["\x68\x74\x74\160\72\57\57\x73\x63\x68\145\x6d\141\163\56\170\x6d\x6c\163\x6f\141\160\x2e\x6f\162\x67\x2f\x77\163\x64\154\57\x3a\141\x72\162\141\171\124\171\160\145"]) || $this->getLocalPart($aname) == "\141\162\162\141\x79\124\171\x70\x65") { $this->complexTypes[$this->currentComplexType]["\160\150\160\x54\171\160\145"] = "\141\162\162\141\x79"; $prefix = $this->getPrefix($aname); if (isset($attrs["\150\164\x74\x70\x3a\57\x2f\163\143\150\x65\x6d\x61\x73\x2e\170\x6d\154\163\157\141\160\x2e\157\162\x67\x2f\167\x73\x64\154\57\72\141\162\162\141\x79\x54\171\x70\145"])) { $v = $attrs["\150\164\x74\x70\x3a\57\x2f\x73\143\150\145\x6d\x61\163\x2e\x78\x6d\154\163\x6f\141\x70\x2e\x6f\162\147\x2f\x77\163\x64\154\x2f\72\141\x72\162\141\x79\x54\x79\160\x65"]; } else { $v = ''; } if (strpos($v, "\133\54\x5d")) { $this->complexTypes[$this->currentComplexType]["\155\165\154\164\151\144\x69\155\x65\x6e\163\151\157\x6e\141\154"] = true; } $v = substr($v, 0, strpos($v, "\133")); if (!strpos($v, "\72") && isset($this->typemap[$this->XMLSchemaVersion][$v])) { $v = $this->XMLSchemaVersion . "\72" . $v; } $this->complexTypes[$this->currentComplexType]["\x61\x72\162\141\171\124\x79\160\145"] = $v; } break; case "\x63\157\x6d\160\154\x65\x78\103\x6f\156\x74\145\x6e\x74": $this->xdebug("\144\x6f\40\x6e\157\164\150\x69\156\x67\x20\146\157\162\x20\145\154\x65\155\145\x6e\164\x20{$name}"); break; case "\143\x6f\155\160\x6c\145\x78\124\171\160\x65": array_push($this->complexTypeStack, $this->currentComplexType); if (isset($attrs["\156\141\155\145"])) { $this->xdebug("\160\162\x6f\x63\x65\163\x73\151\156\147\40\x6e\141\155\x65\144\40\143\157\155\160\x6c\x65\170\x54\171\160\145\40" . $attrs["\156\x61\155\145"]); $this->currentComplexType = $attrs["\x6e\141\155\145"]; $this->complexTypes[$this->currentComplexType] = $attrs; $this->complexTypes[$this->currentComplexType]["\164\x79\160\x65\x43\154\x61\x73\163"] = "\x63\x6f\x6d\x70\x6c\x65\x78\x54\171\x70\x65"; if (isset($attrs["\142\x61\x73\x65"]) && preg_match("\x2f\x3a\x41\162\162\x61\x79\x24\57", $attrs["\x62\x61\163\x65"])) { $this->xdebug("\x63\157\x6d\x70\154\x65\170\124\171\x70\145\40\x69\x73\40\x75\x6e\x75\x73\x75\141\154\40\141\x72\x72\141\x79"); $this->complexTypes[$this->currentComplexType]["\160\x68\160\x54\x79\x70\145"] = "\x61\162\162\141\x79"; } else { $this->complexTypes[$this->currentComplexType]["\x70\150\160\124\171\x70\145"] = "\163\x74\162\165\143\x74"; } } else { $name = $this->CreateTypeName($this->currentElement); $this->xdebug("\160\x72\157\x63\x65\163\163\151\x6e\147\40\165\156\x6e\141\155\145\x64\x20\x63\x6f\x6d\x70\x6c\145\x78\x54\x79\160\145\40\146\157\162\x20\x65\x6c\145\155\145\x6e\x74\40" . $this->currentElement . "\40\x6e\141\x6d\x65\x64\40" . $name); $this->currentComplexType = $name; $this->complexTypes[$this->currentComplexType] = $attrs; $this->complexTypes[$this->currentComplexType]["\164\171\160\145\x43\x6c\141\x73\x73"] = "\x63\x6f\155\x70\154\145\x78\x54\171\160\145"; if (isset($attrs["\x62\141\x73\x65"]) && preg_match("\57\x3a\101\162\162\141\x79\44\57", $attrs["\x62\141\x73\145"])) { $this->xdebug("\x63\157\155\x70\154\x65\x78\124\171\160\x65\40\151\x73\40\165\x6e\x75\163\165\141\x6c\40\x61\x72\x72\x61\x79"); $this->complexTypes[$this->currentComplexType]["\x70\x68\160\124\x79\x70\x65"] = "\x61\x72\x72\x61\x79"; } else { $this->complexTypes[$this->currentComplexType]["\x70\150\x70\124\x79\160\145"] = "\x73\x74\162\x75\x63\164"; } } $this->complexTypes[$this->currentComplexType]["\163\x69\x6d\x70\x6c\145\x43\157\156\x74\145\x6e\x74"] = "\x66\x61\154\163\145"; break; case "\145\x6c\x65\155\145\156\164": array_push($this->elementStack, $this->currentElement); if (!isset($attrs["\x66\157\x72\x6d"])) { if ($this->currentComplexType) { $attrs["\x66\157\162\155"] = $this->schemaInfo["\145\x6c\x65\x6d\x65\x6e\x74\106\x6f\x72\155\x44\x65\x66\x61\165\154\x74"]; } else { $attrs["\x66\x6f\162\x6d"] = "\161\165\x61\154\x69\146\x69\x65\x64"; } } if (isset($attrs["\x74\x79\160\x65"])) { $this->xdebug("\160\x72\x6f\x63\145\163\x73\x69\156\147\40\x74\171\160\145\144\x20\x65\x6c\145\x6d\145\156\x74\x20" . $attrs["\x6e\x61\x6d\x65"] . "\x20\157\146\40\164\x79\x70\x65\x20" . $attrs["\x74\171\160\145"]); if (!$this->getPrefix($attrs["\x74\x79\160\x65"])) { if ($this->defaultNamespace[$pos]) { $attrs["\164\171\160\x65"] = $this->defaultNamespace[$pos] . "\72" . $attrs["\x74\171\160\145"]; $this->xdebug("\165\x73\145\144\40\144\145\146\x61\165\x6c\x74\40\x6e\x61\x6d\145\163\160\141\x63\x65\40\x74\157\x20\155\x61\x6b\145\40\x74\171\x70\145\40" . $attrs["\x74\x79\x70\145"]); } } if ($this->currentComplexType && $this->complexTypes[$this->currentComplexType]["\160\150\x70\x54\171\160\145"] == "\x61\162\x72\x61\x79") { $this->xdebug("\141\162\x72\141\171\124\x79\x70\x65\40\146\157\162\40\165\156\165\163\x75\141\154\40\x61\162\x72\141\x79\40\151\x73\40" . $attrs["\164\x79\x70\145"]); $this->complexTypes[$this->currentComplexType]["\141\x72\162\x61\171\124\x79\x70\x65"] = $attrs["\x74\171\x70\x65"]; } $this->currentElement = $attrs["\x6e\141\x6d\x65"]; $ename = $attrs["\x6e\141\155\145"]; } elseif (isset($attrs["\162\145\146"])) { $this->xdebug("\160\x72\x6f\143\145\163\163\x69\156\x67\40\x65\x6c\x65\x6d\145\156\x74\x20\141\x73\x20\x72\x65\x66\40\x74\157\40" . $attrs["\x72\x65\146"]); $this->currentElement = "\x72\x65\x66\x20\164\157\40" . $attrs["\162\145\146"]; $ename = $this->getLocalPart($attrs["\x72\x65\x66"]); } else { $type = $this->CreateTypeName($this->currentComplexType . "\137" . $attrs["\x6e\x61\155\145"]); $this->xdebug("\160\x72\157\x63\145\163\x73\x69\x6e\147\x20\x75\156\164\171\x70\145\144\40\x65\154\145\155\x65\x6e\164\x20" . $attrs["\156\x61\155\145"] . "\40\x74\171\x70\145\40" . $type); $this->currentElement = $attrs["\156\141\x6d\145"]; $attrs["\x74\x79\x70\145"] = $this->schemaTargetNamespace . "\x3a" . $type; $ename = $attrs["\156\x61\155\145"]; } if (isset($ename) && $this->currentComplexType) { $this->xdebug("\141\x64\x64\40\x65\x6c\x65\155\145\156\164\40{$ename}\x20\x74\157\x20\x63\x6f\x6d\160\x6c\x65\170\x54\171\160\x65\x20{$this->currentComplexType}"); $this->complexTypes[$this->currentComplexType]["\x65\x6c\145\x6d\145\x6e\164\163"][$ename] = $attrs; } elseif (!isset($attrs["\162\x65\146"])) { $this->xdebug("\x61\x64\144\x20\x65\x6c\145\x6d\145\x6e\164\40{$ename}\x20\x74\157\x20\x65\154\x65\155\145\156\x74\163\40\x61\x72\x72\x61\171"); $this->elements[$attrs["\156\141\155\x65"]] = $attrs; $this->elements[$attrs["\x6e\141\x6d\x65"]]["\164\x79\160\x65\x43\154\x61\x73\x73"] = "\145\x6c\145\x6d\145\156\x74"; } break; case "\145\156\165\155\145\162\141\x74\x69\157\x6e": $this->xdebug("\x65\x6e\x75\x6d\x65\162\x61\164\x69\x6f\x6e\40" . $attrs["\166\x61\154\165\x65"]); if ($this->currentSimpleType) { $this->simpleTypes[$this->currentSimpleType]["\145\156\x75\155\x65\x72\x61\164\x69\157\156"][] = $attrs["\166\141\154\x75\145"]; } elseif ($this->currentComplexType) { $this->complexTypes[$this->currentComplexType]["\145\156\165\x6d\x65\162\x61\x74\x69\x6f\156"][] = $attrs["\166\x61\x6c\165\145"]; } break; case "\x65\x78\164\x65\x6e\x73\151\157\156": $this->xdebug("\145\x78\x74\x65\x6e\x73\x69\x6f\x6e\40" . $attrs["\x62\141\163\145"]); if ($this->currentComplexType) { $ns = $this->getPrefix($attrs["\142\141\x73\145"]); if ($ns == '') { $this->complexTypes[$this->currentComplexType]["\145\x78\164\145\x6e\163\x69\x6f\156\102\141\163\145"] = $this->schemaTargetNamespace . "\72" . $attrs["\142\141\163\145"]; } else { $this->complexTypes[$this->currentComplexType]["\145\170\x74\145\x6e\163\151\157\156\102\x61\163\145"] = $attrs["\x62\141\163\x65"]; } } else { $this->xdebug("\x6e\x6f\x20\x63\165\x72\x72\145\x6e\164\x20\143\x6f\x6d\160\x6c\x65\170\x54\171\x70\x65\x20\x74\157\40\x73\x65\164\x20\x65\170\164\x65\x6e\x73\x69\x6f\156\x42\141\x73\x65"); } break; case "\151\155\x70\157\162\x74": if (isset($attrs["\x73\143\x68\x65\155\141\114\157\x63\141\x74\151\x6f\x6e"])) { $this->xdebug("\151\x6d\160\157\x72\164\x20\x6e\141\155\x65\163\x70\x61\x63\145\40" . $attrs["\x6e\x61\155\x65\x73\x70\x61\x63\145"] . "\40\x66\162\157\155\40" . $attrs["\x73\143\150\x65\x6d\x61\x4c\157\x63\x61\x74\x69\x6f\156"]); $this->imports[$attrs["\x6e\141\155\x65\163\x70\x61\143\x65"]][] = array("\x6c\157\143\141\x74\151\157\156" => $attrs["\163\x63\x68\145\155\x61\114\157\x63\x61\164\151\x6f\x6e"], "\x6c\x6f\141\144\x65\144" => false); } else { $this->xdebug("\151\155\160\157\x72\164\40\x6e\141\x6d\x65\163\160\141\x63\x65\x20" . $attrs["\x6e\141\155\x65\163\160\141\x63\145"]); $this->imports[$attrs["\x6e\x61\x6d\145\x73\160\x61\143\145"]][] = array("\154\x6f\143\x61\x74\x69\x6f\156" => '', "\x6c\x6f\141\144\145\x64" => true); if (!$this->getPrefixFromNamespace($attrs["\x6e\x61\155\x65\x73\160\141\x63\145"])) { $this->namespaces["\x6e\x73" . (count($this->namespaces) + 1)] = $attrs["\156\x61\x6d\x65\163\x70\141\143\145"]; } } break; case "\x69\x6e\143\x6c\x75\x64\145": if (isset($attrs["\x73\x63\150\145\x6d\x61\114\157\x63\141\x74\151\x6f\156"])) { $this->xdebug("\x69\156\143\x6c\x75\144\x65\40\x69\x6e\x74\x6f\x20\x6e\x61\155\145\163\x70\x61\x63\145\x20" . $this->schemaTargetNamespace . "\x20\146\x72\157\x6d\40" . $attrs["\163\x63\150\145\x6d\141\114\157\x63\x61\164\151\x6f\156"]); $this->imports[$this->schemaTargetNamespace][] = array("\154\x6f\x63\141\x74\151\x6f\x6e" => $attrs["\x73\x63\x68\145\x6d\141\114\157\x63\x61\164\x69\157\x6e"], "\154\x6f\141\144\x65\x64" => false); } else { $this->xdebug("\x69\147\x6e\x6f\162\151\156\x67\40\151\x6e\166\141\x6c\151\x64\40\x58\115\x4c\x20\x53\x63\150\x65\x6d\141\40\143\157\x6e\x73\x74\x72\165\143\164\72\40\x69\x6e\143\154\165\144\x65\x20\x77\x69\x74\x68\x6f\x75\x74\x20\163\143\x68\x65\x6d\x61\x4c\x6f\143\141\164\151\x6f\156\40\x61\x74\164\162\x69\x62\x75\x74\145"); } break; case "\x6c\x69\x73\164": $this->xdebug("\144\x6f\x20\x6e\x6f\164\x68\151\x6e\x67\40\146\157\x72\x20\145\154\x65\155\x65\x6e\164\40{$name}"); break; case "\162\x65\163\x74\x72\x69\x63\x74\151\x6f\x6e": $this->xdebug("\162\x65\163\x74\162\x69\143\x74\x69\x6f\x6e\x20" . $attrs["\142\141\163\145"]); if ($this->currentSimpleType) { $this->simpleTypes[$this->currentSimpleType]["\164\x79\x70\145"] = $attrs["\142\x61\x73\x65"]; } elseif ($this->currentComplexType) { $this->complexTypes[$this->currentComplexType]["\x72\x65\163\x74\162\x69\x63\x74\x69\x6f\156\x42\x61\x73\x65"] = $attrs["\142\x61\x73\x65"]; if (strstr($attrs["\x62\141\x73\145"], "\x3a") == "\72\x41\162\162\x61\x79") { $this->complexTypes[$this->currentComplexType]["\x70\150\160\124\171\160\x65"] = "\x61\x72\x72\x61\171"; } } break; case "\163\x63\x68\145\155\141": $this->schemaInfo = $attrs; $this->schemaInfo["\x73\x63\150\145\x6d\x61\x56\x65\162\x73\151\x6f\x6e"] = $this->getNamespaceFromPrefix($prefix); if (isset($attrs["\x74\x61\162\147\145\x74\x4e\141\155\x65\163\x70\141\143\145"])) { $this->schemaTargetNamespace = $attrs["\x74\x61\x72\147\145\x74\116\141\x6d\x65\163\x70\x61\x63\145"]; } if (!isset($attrs["\145\x6c\145\155\145\156\164\x46\157\162\x6d\x44\145\146\x61\x75\x6c\x74"])) { $this->schemaInfo["\x65\x6c\145\x6d\145\156\164\x46\157\x72\155\x44\145\146\141\x75\154\x74"] = "\165\x6e\161\x75\141\154\x69\x66\x69\x65\144"; } if (!isset($attrs["\x61\x74\164\x72\151\x62\165\164\145\x46\157\162\x6d\x44\145\x66\141\x75\154\x74"])) { $this->schemaInfo["\x61\164\164\162\x69\x62\x75\164\145\106\x6f\x72\x6d\104\x65\x66\141\165\154\164"] = "\x75\x6e\161\x75\x61\154\151\x66\151\145\x64"; } break; case "\x73\151\155\x70\x6c\145\x43\157\x6e\x74\x65\x6e\x74": if ($this->currentComplexType) { $this->complexTypes[$this->currentComplexType]["\x73\x69\x6d\160\154\x65\103\157\156\x74\x65\x6e\x74"] = "\164\x72\165\145"; } else { $this->xdebug("\x64\x6f\40\x6e\x6f\164\x68\151\x6e\x67\x20\146\x6f\162\40\145\x6c\145\155\145\x6e\x74\x20{$name}\x20\x62\145\143\141\x75\163\145\40\x74\150\145\x72\x65\40\x69\163\40\156\x6f\x20\143\165\162\162\x65\156\164\x20\143\x6f\x6d\160\154\x65\170\x54\171\x70\145"); } break; case "\x73\151\x6d\160\x6c\x65\124\x79\160\x65": array_push($this->simpleTypeStack, $this->currentSimpleType); if (isset($attrs["\156\141\155\x65"])) { $this->xdebug("\x70\162\x6f\143\x65\x73\163\151\156\147\40\163\151\x6d\x70\x6c\145\x54\171\x70\145\x20\x66\157\x72\x20\x6e\x61\155\x65\40" . $attrs["\x6e\x61\155\145"]); $this->currentSimpleType = $attrs["\156\141\x6d\145"]; $this->simpleTypes[$attrs["\x6e\141\x6d\145"]] = $attrs; $this->simpleTypes[$attrs["\156\x61\x6d\x65"]]["\x74\x79\x70\145\103\154\141\163\163"] = "\x73\x69\x6d\160\154\x65\124\x79\160\145"; $this->simpleTypes[$attrs["\x6e\x61\155\145"]]["\x70\150\x70\124\x79\x70\145"] = "\163\x63\x61\x6c\x61\162"; } else { $name = $this->CreateTypeName($this->currentComplexType . "\137" . $this->currentElement); $this->xdebug("\x70\162\x6f\143\x65\163\x73\151\156\147\x20\165\x6e\156\x61\155\145\x64\40\x73\151\155\160\154\145\x54\x79\160\x65\x20\x66\x6f\x72\40\x65\x6c\x65\155\145\x6e\x74\x20" . $this->currentElement . "\x20\156\x61\x6d\145\144\40" . $name); $this->currentSimpleType = $name; $this->simpleTypes[$this->currentSimpleType] = $attrs; $this->simpleTypes[$this->currentSimpleType]["\160\150\160\x54\x79\x70\145"] = "\x73\x63\x61\154\141\x72"; } break; case "\165\156\151\157\x6e": $this->xdebug("\x64\x6f\x20\x6e\157\x74\x68\151\156\x67\x20\x66\x6f\x72\x20\x65\154\145\x6d\x65\x6e\164\x20{$name}"); break; default: $this->xdebug("\144\x6f\40\156\x6f\x74\40\x68\x61\x76\145\40\x61\156\x79\x20\154\157\147\x69\x63\40\164\157\x20\x70\x72\157\x63\x65\163\x73\40\145\x6c\x65\x6d\x65\156\x74\40{$name}"); } } function schemaEndElement($parser, $name) { $this->depth--; if (isset($this->depth_array[$this->depth])) { $pos = $this->depth_array[$this->depth]; } if ($prefix = $this->getPrefix($name)) { $name = $this->getLocalPart($name); } else { $prefix = ''; } if ($name == "\143\157\x6d\160\154\145\170\x54\x79\x70\x65") { $this->xdebug("\x64\157\156\145\40\160\162\157\x63\145\163\x73\151\x6e\147\40\143\x6f\x6d\x70\154\145\170\x54\x79\x70\145\40" . ($this->currentComplexType ? $this->currentComplexType : "\x28\165\156\153\x6e\157\x77\x6e\x29")); $this->xdebug($this->varDump($this->complexTypes[$this->currentComplexType])); $this->currentComplexType = array_pop($this->complexTypeStack); } if ($name == "\145\x6c\x65\155\x65\156\x74") { $this->xdebug("\144\157\x6e\x65\x20\x70\162\157\x63\145\x73\163\x69\156\147\40\x65\154\x65\x6d\145\x6e\164\40" . ($this->currentElement ? $this->currentElement : "\x28\165\x6e\153\156\157\167\156\51")); $this->currentElement = array_pop($this->elementStack); } if ($name == "\x73\151\x6d\x70\154\145\x54\171\160\145") { $this->xdebug("\x64\157\x6e\x65\40\160\x72\x6f\143\x65\x73\163\x69\156\147\40\x73\x69\x6d\160\x6c\145\124\x79\x70\x65\x20" . ($this->currentSimpleType ? $this->currentSimpleType : "\50\165\156\153\156\x6f\167\x6e\51")); $this->xdebug($this->varDump($this->simpleTypes[$this->currentSimpleType])); $this->currentSimpleType = array_pop($this->simpleTypeStack); } } function schemaCharacterData($parser, $data) { $pos = $this->depth_array[$this->depth - 1]; $this->message[$pos]["\x63\144\141\x74\141"] .= $data; } function serializeSchema() { $schemaPrefix = $this->getPrefixFromNamespace($this->XMLSchemaVersion); $xml = ''; if (sizeof($this->imports) > 0) { foreach ($this->imports as $ns => $list) { foreach ($list as $ii) { if ($ii["\x6c\157\x63\141\x74\151\x6f\x6e"] != '') { $xml .= "\x20\74{$schemaPrefix}\x3a\151\x6d\x70\x6f\162\164\40\x6c\157\143\141\164\x69\157\156\x3d\x22" . $ii["\154\x6f\x63\x61\164\x69\157\156"] . "\x22\x20\156\141\155\x65\x73\x70\141\x63\145\75\42" . $ns . "\42\x20\x2f\76\xa"; } else { $xml .= "\x20\x3c{$schemaPrefix}\x3a\151\155\x70\157\162\x74\x20\156\x61\155\x65\163\x70\141\143\145\x3d\42" . $ns . "\x22\x20\57\76\xa"; } } } } foreach ($this->complexTypes as $typeName => $attrs) { $contentStr = ''; if (isset($attrs["\x65\x6c\145\155\x65\x6e\x74\x73"]) && count($attrs["\145\154\x65\x6d\x65\156\x74\163"]) > 0) { foreach ($attrs["\145\x6c\x65\x6d\145\x6e\164\x73"] as $element => $eParts) { if (isset($eParts["\162\x65\146"])) { $contentStr .= "\x20\40\40\x3c{$schemaPrefix}\72\145\154\145\155\145\x6e\164\40\162\x65\146\75\42{$element}\x22\57\76\12"; } else { $contentStr .= "\x20\x20\x20\74{$schemaPrefix}\x3a\x65\154\145\155\x65\x6e\164\x20\156\x61\x6d\145\75\x22{$element}\42\40\x74\171\x70\x65\x3d\42" . $this->contractQName($eParts["\164\171\160\x65"]) . "\x22"; foreach ($eParts as $aName => $aValue) { if ($aName != "\156\x61\x6d\145" && $aName != "\164\x79\x70\x65") { $contentStr .= "\x20{$aName}\75\42{$aValue}\x22"; } } $contentStr .= "\57\x3e\12"; } } if (isset($attrs["\x63\x6f\155\x70\157\x73\151\x74\x6f\162"]) && $attrs["\x63\x6f\155\x70\x6f\x73\151\x74\157\162"] != '') { $contentStr = "\x20\x20\74{$schemaPrefix}\72{$attrs["\143\157\155\160\x6f\163\151\164\157\x72"]}\76\12" . $contentStr . "\x20\x20\x3c\x2f{$schemaPrefix}\x3a{$attrs["\143\x6f\155\x70\x6f\x73\151\x74\157\x72"]}\76\xa"; } } if (isset($attrs["\141\x74\164\x72\163"]) && count($attrs["\141\x74\164\162\x73"]) >= 1) { foreach ($attrs["\x61\164\164\x72\163"] as $attr => $aParts) { $contentStr .= "\x20\40\x20\x20\74{$schemaPrefix}\72\x61\164\164\162\151\x62\165\x74\x65"; foreach ($aParts as $a => $v) { if ($a == "\162\x65\x66" || $a == "\164\x79\x70\145") { $contentStr .= "\40{$a}\x3d\x22" . $this->contractQName($v) . "\x22"; } elseif ($a == "\x68\x74\164\x70\x3a\57\57\163\x63\x68\145\155\141\163\56\x78\155\x6c\163\157\141\160\x2e\157\x72\x67\57\167\x73\144\154\x2f\72\x61\162\162\x61\171\124\x79\160\145") { $this->usedNamespaces["\167\x73\x64\x6c"] = $this->namespaces["\x77\163\x64\x6c"]; $contentStr .= "\40\167\163\144\x6c\x3a\x61\162\x72\141\x79\x54\171\x70\x65\x3d\42" . $this->contractQName($v) . "\42"; } else { $contentStr .= "\x20{$a}\75\42{$v}\x22"; } } $contentStr .= "\x2f\76\12"; } } if (isset($attrs["\162\x65\x73\164\162\x69\143\164\x69\157\x6e\102\141\x73\145"]) && $attrs["\162\145\x73\164\162\151\x63\x74\x69\157\x6e\102\x61\163\x65"] != '') { $contentStr = "\x20\x20\40\74{$schemaPrefix}\72\x72\x65\x73\x74\x72\151\143\x74\x69\x6f\156\x20\142\x61\x73\145\x3d\42" . $this->contractQName($attrs["\162\x65\x73\164\162\151\143\164\x69\x6f\x6e\102\x61\x73\145"]) . "\42\76\12" . $contentStr . "\40\40\40\x3c\x2f{$schemaPrefix}\72\162\x65\163\164\162\151\143\x74\151\157\x6e\x3e\xa"; if (isset($attrs["\145\x6c\x65\155\x65\156\x74\x73"]) && count($attrs["\x65\x6c\x65\155\x65\x6e\x74\163"]) > 0 || isset($attrs["\141\x74\164\162\163"]) && count($attrs["\141\x74\164\x72\x73"]) > 0) { $contentStr = "\x20\40\x3c{$schemaPrefix}\x3a\143\x6f\x6d\160\x6c\145\x78\103\157\x6e\x74\145\156\x74\x3e\xa" . $contentStr . "\x20\x20\74\57{$schemaPrefix}\72\143\157\155\x70\154\x65\x78\x43\x6f\x6e\x74\x65\x6e\164\x3e\12"; } } if ($contentStr != '') { $contentStr = "\40\x3c{$schemaPrefix}\x3a\x63\x6f\x6d\160\154\x65\x78\x54\171\160\x65\x20\156\x61\x6d\x65\x3d\x22{$typeName}\x22\x3e\xa" . $contentStr . "\40\74\x2f{$schemaPrefix}\72\x63\157\x6d\x70\x6c\x65\170\x54\171\x70\145\x3e\xa"; } else { $contentStr = "\40\74{$schemaPrefix}\x3a\143\x6f\x6d\160\x6c\145\x78\124\x79\x70\145\x20\156\141\x6d\145\75\x22{$typeName}\x22\x2f\76\xa"; } $xml .= $contentStr; } if (isset($this->simpleTypes) && count($this->simpleTypes) > 0) { foreach ($this->simpleTypes as $typeName => $eParts) { $xml .= "\x20\x3c{$schemaPrefix}\x3a\163\151\155\160\x6c\x65\124\171\160\145\40\x6e\x61\155\x65\75\42{$typeName}\42\76\12\x20\40\74{$schemaPrefix}\72\x72\145\163\x74\162\151\x63\164\151\x6f\x6e\x20\x62\x61\x73\x65\75\42" . $this->contractQName($eParts["\164\171\x70\145"]) . "\42\x3e\xa"; if (isset($eParts["\x65\x6e\165\155\x65\x72\x61\x74\151\x6f\x6e"])) { foreach ($eParts["\x65\x6e\x75\x6d\x65\x72\141\x74\151\157\156"] as $e) { $xml .= "\x20\x20\x3c{$schemaPrefix}\x3a\x65\x6e\165\155\145\x72\x61\164\x69\x6f\156\40\166\141\x6c\x75\145\x3d\42{$e}\x22\57\x3e\xa"; } } $xml .= "\40\40\74\x2f{$schemaPrefix}\72\162\x65\x73\x74\162\x69\x63\164\x69\x6f\156\76\xa\40\74\x2f{$schemaPrefix}\x3a\163\x69\x6d\x70\x6c\145\124\x79\x70\x65\x3e"; } } if (isset($this->elements) && count($this->elements) > 0) { foreach ($this->elements as $element => $eParts) { $xml .= "\x20\x3c{$schemaPrefix}\72\145\x6c\145\155\145\156\x74\x20\x6e\x61\155\x65\x3d\42{$element}\42\x20\x74\171\160\145\x3d\x22" . $this->contractQName($eParts["\164\171\160\145"]) . "\x22\57\76\xa"; } } if (isset($this->attributes) && count($this->attributes) > 0) { foreach ($this->attributes as $attr => $aParts) { $xml .= "\x20\74{$schemaPrefix}\72\x61\164\164\162\x69\142\165\164\x65\40\x6e\141\x6d\145\75\x22{$attr}\x22\x20\164\x79\160\x65\x3d\42" . $this->contractQName($aParts["\x74\x79\160\x65"]) . "\42\12\57\x3e"; } } $attr = ''; foreach ($this->schemaInfo as $k => $v) { if ($k == "\145\x6c\x65\155\x65\x6e\x74\x46\157\162\x6d\104\x65\146\141\165\154\x74" || $k == "\x61\164\164\x72\151\142\165\x74\145\106\157\x72\x6d\x44\145\x66\x61\x75\154\164") { $attr .= "\x20{$k}\x3d\42{$v}\x22"; } } $el = "\x3c{$schemaPrefix}\72\163\x63\x68\145\x6d\x61{$attr}\x20\164\141\x72\147\145\x74\116\x61\155\145\163\160\141\143\145\x3d\42{$this->schemaTargetNamespace}\x22\12"; foreach (array_diff($this->usedNamespaces, $this->enclosingNamespaces) as $nsp => $ns) { $el .= "\40\170\x6d\154\156\x73\72{$nsp}\x3d\42{$ns}\x22"; } $xml = $el . "\76\xa" . $xml . "\74\x2f{$schemaPrefix}\72\x73\x63\x68\x65\x6d\141\x3e\xa"; return $xml; } function xdebug($string) { $this->debug("\x3c" . $this->schemaTargetNamespace . "\76\40" . $string); } function getPHPType($type, $ns) { if (isset($this->typemap[$ns][$type])) { return $this->typemap[$ns][$type]; } elseif (isset($this->complexTypes[$type])) { return $this->complexTypes[$type]["\160\150\160\124\171\160\145"]; } return false; } function getTypeDef($type) { if (substr($type, -1) == "\136") { $is_element = 1; $type = substr($type, 0, -1); } else { $is_element = 0; } if (!$is_element && isset($this->complexTypes[$type])) { $this->xdebug("\x69\156\40\147\x65\x74\124\x79\160\x65\x44\x65\146\54\40\x66\157\165\156\x64\x20\143\157\155\x70\154\x65\x78\x54\x79\160\x65\40{$type}"); return $this->complexTypes[$type]; } elseif (!$is_element && isset($this->simpleTypes[$type])) { $this->xdebug("\151\x6e\40\147\145\164\124\171\160\145\104\x65\x66\x2c\x20\x66\x6f\x75\x6e\x64\40\x73\x69\155\160\154\145\x54\171\x70\145\40{$type}"); if (!isset($this->simpleTypes[$type]["\x70\150\x70\x54\171\160\145"])) { $uqType = substr($this->simpleTypes[$type]["\164\x79\x70\145"], strrpos($this->simpleTypes[$type]["\x74\171\160\145"], "\x3a") + 1); $ns = substr($this->simpleTypes[$type]["\164\x79\160\145"], 0, strrpos($this->simpleTypes[$type]["\164\171\160\145"], "\72")); $etype = $this->getTypeDef($uqType); if ($etype) { $this->xdebug("\x69\156\40\147\x65\164\124\x79\160\x65\104\145\x66\x2c\x20\x66\157\165\156\x64\x20\x74\171\160\x65\x20\x66\157\162\40\x73\x69\x6d\x70\154\145\x54\171\160\x65\40{$type}\x3a"); $this->xdebug($this->varDump($etype)); if (isset($etype["\160\x68\160\124\x79\160\x65"])) { $this->simpleTypes[$type]["\x70\150\160\124\x79\160\145"] = $etype["\160\150\160\x54\171\160\145"]; } if (isset($etype["\x65\154\x65\155\x65\x6e\164\163"])) { $this->simpleTypes[$type]["\x65\154\x65\155\145\x6e\164\163"] = $etype["\x65\x6c\x65\155\x65\x6e\164\x73"]; } } } return $this->simpleTypes[$type]; } elseif (isset($this->elements[$type])) { $this->xdebug("\x69\156\x20\x67\145\x74\x54\x79\x70\145\104\x65\146\x2c\x20\146\x6f\x75\x6e\144\x20\145\154\145\155\x65\156\164\40{$type}"); if (!isset($this->elements[$type]["\160\x68\160\124\x79\x70\x65"])) { $uqType = substr($this->elements[$type]["\x74\171\x70\x65"], strrpos($this->elements[$type]["\x74\171\x70\x65"], "\72") + 1); $ns = substr($this->elements[$type]["\x74\171\160\145"], 0, strrpos($this->elements[$type]["\164\171\x70\145"], "\72")); $etype = $this->getTypeDef($uqType); if ($etype) { $this->xdebug("\151\x6e\x20\147\x65\164\x54\171\x70\145\x44\x65\146\54\40\x66\157\x75\156\144\x20\x74\x79\x70\145\x20\x66\x6f\x72\40\x65\x6c\145\155\x65\x6e\164\x20{$type}\x3a"); $this->xdebug($this->varDump($etype)); if (isset($etype["\x70\150\x70\x54\171\x70\x65"])) { $this->elements[$type]["\160\x68\x70\x54\x79\x70\x65"] = $etype["\160\150\x70\x54\171\x70\145"]; } if (isset($etype["\145\154\x65\x6d\x65\x6e\x74\163"])) { $this->elements[$type]["\x65\154\x65\x6d\x65\x6e\x74\x73"] = $etype["\x65\154\x65\155\x65\156\x74\163"]; } if (isset($etype["\145\x78\164\145\156\x73\x69\157\x6e\x42\141\x73\145"])) { $this->elements[$type]["\145\x78\164\x65\156\163\x69\x6f\156\102\141\163\x65"] = $etype["\145\x78\164\x65\x6e\163\x69\157\x6e\x42\141\163\145"]; } } elseif ($ns == "\x68\164\164\160\72\x2f\x2f\167\167\x77\56\167\63\56\x6f\162\x67\57\62\x30\x30\x31\x2f\130\x4d\114\x53\x63\x68\145\x6d\141") { $this->xdebug("\151\x6e\40\147\145\164\x54\171\160\x65\x44\145\x66\x2c\40\145\x6c\145\x6d\x65\x6e\x74\x20{$type}\x20\151\163\x20\141\156\x20\x58\123\x44\x20\x74\171\x70\x65"); $this->elements[$type]["\x70\x68\x70\124\171\x70\145"] = "\163\x63\x61\154\141\x72"; } } return $this->elements[$type]; } elseif (isset($this->attributes[$type])) { $this->xdebug("\151\x6e\x20\147\145\164\124\x79\160\x65\104\145\x66\x2c\x20\146\157\165\156\x64\x20\141\164\164\x72\x69\142\165\x74\145\x20{$type}"); return $this->attributes[$type]; } elseif (preg_match("\x2f\x5f\x43\x6f\x6e\x74\141\x69\156\x65\144\124\x79\160\145\x24\57", $type)) { $this->xdebug("\x69\x6e\x20\147\145\164\x54\171\x70\x65\104\145\x66\x2c\40\x68\141\166\x65\x20\x61\156\x20\x75\x6e\x74\171\x70\x65\144\x20\x65\154\145\155\x65\x6e\164\x20{$type}"); $typeDef["\164\x79\160\145\x43\x6c\141\x73\163"] = "\163\x69\x6d\x70\154\145\x54\171\160\145"; $typeDef["\160\x68\160\x54\x79\x70\145"] = "\x73\143\x61\x6c\x61\x72"; $typeDef["\x74\171\x70\x65"] = "\150\x74\164\160\x3a\57\57\167\167\167\x2e\167\63\x2e\x6f\x72\x67\x2f\62\x30\60\x31\x2f\x58\x4d\x4c\123\x63\150\x65\155\141\x3a\x73\x74\162\151\x6e\x67"; return $typeDef; } $this->xdebug("\x69\156\x20\147\145\x74\124\171\160\x65\104\145\146\54\x20\x64\151\144\x20\156\x6f\164\x20\x66\151\x6e\x64\40{$type}"); return false; } function serializeTypeDef($type) { $str = ''; if ($typeDef = $this->getTypeDef($type)) { $str .= "\74" . $type; if (is_array($typeDef["\141\x74\164\x72\163"])) { foreach ($typeDef["\141\164\x74\x72\163"] as $attName => $data) { $str .= "\x20{$attName}\x3d\x22\x7b\164\171\160\145\40\x3d\40" . $data["\164\171\160\145"] . "\x7d\x22"; } } $str .= "\40\170\x6d\x6c\156\163\75\x22" . $this->schema["\x74\x61\x72\x67\x65\x74\x4e\141\155\x65\163\x70\141\x63\x65"] . "\42"; if (count($typeDef["\145\x6c\145\x6d\x65\x6e\x74\x73"]) > 0) { $str .= "\76"; foreach ($typeDef["\x65\154\x65\x6d\x65\156\164\163"] as $element => $eData) { $str .= $this->serializeTypeDef($element); } $str .= "\x3c\57{$type}\x3e"; } elseif ($typeDef["\164\171\x70\145\103\154\141\x73\163"] == "\x65\154\x65\155\x65\x6e\164") { $str .= "\76\74\x2f{$type}\x3e"; } else { $str .= "\57\x3e"; } return $str; } return false; } function typeToForm($name, $type) { $buffer = ''; if ($typeDef = $this->getTypeDef($type)) { if ($typeDef["\160\150\x70\x54\171\160\x65"] == "\x73\164\162\x75\x63\164") { $buffer .= "\x3c\164\141\x62\x6c\x65\x3e"; foreach ($typeDef["\x65\x6c\145\155\x65\x6e\164\x73"] as $child => $childDef) { $buffer .= "\12\11\11\x9\x9\11\74\x74\162\76\74\x74\144\40\x61\x6c\151\147\x6e\x3d\x27\x72\x69\147\150\164\47\x3e{$childDef["\156\141\155\145"]}\40\50\x74\x79\160\145\72\40" . $this->getLocalPart($childDef["\x74\171\160\x65"]) . "\x29\x3a\x3c\x2f\164\x64\76\xa\11\11\x9\11\x9\74\x74\144\76\x3c\151\156\x70\x75\x74\40\x74\x79\160\145\75\47\x74\145\x78\164\47\x20\156\141\x6d\145\x3d\47\x70\141\162\x61\x6d\x65\x74\145\x72\x73\133" . $name . "\x5d\133{$childDef["\x6e\141\x6d\145"]}\135\47\76\74\x2f\164\144\76\x3c\57\164\162\x3e"; } $buffer .= "\74\x2f\x74\141\x62\154\x65\76"; } elseif ($typeDef["\x70\150\160\x54\171\160\145"] == "\141\162\162\x61\x79") { $buffer .= "\x3c\x74\141\x62\x6c\145\76"; for ($i = 0; $i < 3; $i++) { $buffer .= "\xa\x9\11\x9\11\11\x3c\x74\162\x3e\x3c\x74\144\40\141\154\151\147\156\x3d\x27\x72\151\x67\x68\x74\x27\x3e\x61\162\162\141\x79\x20\151\x74\145\155\40\x28\x74\171\x70\x65\72\x20{$typeDef["\141\162\x72\141\171\x54\171\x70\x65"]}\51\x3a\x3c\57\x74\x64\x3e\xa\x9\x9\x9\11\x9\74\x74\x64\76\x3c\151\x6e\160\165\x74\40\164\171\160\145\75\x27\164\x65\x78\x74\x27\40\156\x61\155\x65\75\47\x70\141\162\141\155\145\x74\145\162\163\133" . $name . "\135\133\135\47\76\x3c\57\x74\x64\76\74\57\164\162\76"; } $buffer .= "\x3c\x2f\164\141\142\154\145\x3e"; } else { $buffer .= "\x3c\151\x6e\x70\165\164\40\x74\x79\160\x65\75\x27\164\145\170\164\47\x20\x6e\141\x6d\145\x3d\47\160\141\x72\x61\155\145\x74\x65\162\163\133{$name}\135\x27\76"; } } else { $buffer .= "\74\151\x6e\x70\165\x74\x20\164\x79\x70\145\x3d\47\x74\145\170\164\47\40\156\141\155\145\75\47\160\141\x72\141\x6d\x65\164\145\x72\x73\x5b{$name}\x5d\47\76"; } return $buffer; } function addComplexType($name, $typeClass = "\x63\157\155\x70\x6c\145\170\x54\x79\x70\x65", $phpType = "\141\x72\x72\x61\x79", $compositor = '', $restrictionBase = '', $elements = array(), $attrs = array(), $arrayType = '') { $this->complexTypes[$name] = array("\156\141\x6d\x65" => $name, "\x74\171\x70\x65\103\x6c\x61\x73\x73" => $typeClass, "\160\150\160\124\171\x70\x65" => $phpType, "\143\157\155\160\x6f\163\x69\164\x6f\162" => $compositor, "\x72\x65\163\164\x72\151\x63\164\151\x6f\x6e\102\141\163\145" => $restrictionBase, "\x65\x6c\x65\155\x65\x6e\x74\x73" => $elements, "\141\164\164\x72\163" => $attrs, "\x61\162\162\x61\x79\x54\171\160\x65" => $arrayType); $this->xdebug("\x61\144\144\103\157\x6d\x70\154\145\170\x54\x79\x70\x65\x20{$name}\72"); $this->appendDebug($this->varDump($this->complexTypes[$name])); } function addSimpleType($name, $restrictionBase = '', $typeClass = "\x73\151\x6d\160\154\145\124\x79\160\x65", $phpType = "\163\x63\x61\154\141\x72", $enumeration = array()) { $this->simpleTypes[$name] = array("\x6e\x61\x6d\x65" => $name, "\x74\171\160\x65\103\x6c\141\163\163" => $typeClass, "\x70\x68\x70\124\171\x70\x65" => $phpType, "\x74\x79\x70\x65" => $restrictionBase, "\145\x6e\x75\x6d\145\162\141\164\x69\157\156" => $enumeration); $this->xdebug("\x61\144\x64\123\x69\x6d\160\x6c\x65\x54\171\160\x65\40{$name}\72"); $this->appendDebug($this->varDump($this->simpleTypes[$name])); } function addElement($attrs) { if (!$this->getPrefix($attrs["\x74\x79\x70\x65"])) { $attrs["\x74\x79\x70\145"] = $this->schemaTargetNamespace . "\72" . $attrs["\164\171\160\x65"]; } $this->elements[$attrs["\156\141\155\x65"]] = $attrs; $this->elements[$attrs["\156\x61\155\145"]]["\x74\171\160\145\103\x6c\141\x73\163"] = "\145\x6c\145\x6d\145\x6e\x74"; $this->xdebug("\141\144\x64\105\154\x65\155\x65\x6e\164\x20" . $attrs["\x6e\x61\x6d\145"]); $this->appendDebug($this->varDump($this->elements[$attrs["\x6e\141\155\x65"]])); } } goto fNDqX; fNDqX: class XMLSchema extends nusoap_xmlschema { } goto f6CUZ; ymb00: class EndPointClient extends nusoap_base { var $username = ''; var $password = ''; var $authtype = ''; var $certRequest = array(); var $requestHeaders = false; var $responseHeaders = ''; var $responseHeader = null; var $document = ''; var $endpoint; var $forceEndpoint = ''; var $proxyhost = ''; var $proxyport = ''; var $proxyusername = ''; var $proxypassword = ''; var $portName = ''; var $xml_encoding = ''; var $http_encoding = false; var $timeout = 0; var $response_timeout = 30; var $endpointType = ''; var $persistentConnection = false; var $defaultRpcParams = false; var $request = ''; var $response = ''; var $responseData = ''; var $cookies = array(); var $decode_utf8 = true; var $operations = array(); var $curl_options = array(); var $bindingType = ''; var $use_curl = false; var $fault; var $faultcode; var $faultstring; var $faultdetail; function __construct($endpoint, $wsdl = false, $proxyhost = false, $proxyport = false, $proxyusername = false, $proxypassword = false, $timeout = 0, $response_timeout = 30, $portName = '') { parent::__construct(); $this->endpoint = $endpoint; $this->proxyhost = $proxyhost; $this->proxyport = $proxyport; $this->proxyusername = $proxyusername; $this->proxypassword = $proxypassword; $this->timeout = $timeout; $this->response_timeout = $response_timeout; $this->portName = $portName; $this->debug("\143\164\x6f\162\40\167\163\144\x6c\x3d{$wsdl}\x20\x74\x69\x6d\145\x6f\x75\164\75{$timeout}\40\x72\145\163\x70\157\156\163\x65\x5f\x74\x69\x6d\145\x6f\x75\x74\x3d{$response_timeout}"); $this->appendDebug("\145\x6e\144\x70\x6f\151\156\x74\x3d" . $this->varDump($endpoint)); if ($wsdl) { if (is_object($endpoint) && get_class($endpoint) == "\167\x73\x64\154") { $this->wsdl = $endpoint; $this->endpoint = $this->wsdl->wsdl; $this->wsdlFile = $this->endpoint; $this->debug("\145\170\x69\x73\x74\x69\156\147\x20\x77\163\144\x6c\40\151\156\163\164\141\x6e\x63\x65\x20\x63\162\145\141\x74\x65\144\x20\146\162\157\155\x20" . $this->endpoint); $this->checkWSDL(); } else { $this->wsdlFile = $this->endpoint; $this->wsdl = null; $this->debug("\167\x69\x6c\x6c\x20\165\x73\x65\x20\154\141\172\171\40\x65\166\141\x6c\x75\141\x74\x69\x6f\x6e\40\x6f\146\x20\167\163\x64\x6c\x20\146\162\157\155\x20" . $this->endpoint); } $this->endpointType = "\x77\163\x64\x6c"; } else { $this->debug("\x69\x6e\x73\164\x61\x6e\x74\151\x61\164\x65\x20\x53\x4f\x41\x50\x20\167\151\x74\x68\40\145\x6e\x64\x70\157\x69\x6e\164\40\141\x74\40{$endpoint}"); $this->endpointType = "\163\157\141\x70"; } } function call($operation, $params = array(), $namespace = "\x68\164\164\x70\x3a\57\57\164\x65\x6d\x70\x75\x72\151\56\x6f\162\x67", $soapAction = '', $headers = false, $rpcParams = null, $style = "\162\x70\x63", $use = "\145\156\143\x6f\144\145\x64") { $this->operation = $operation; $this->fault = false; $this->setError(''); $this->request = ''; $this->response = ''; $this->responseData = ''; $this->faultstring = ''; $this->faultcode = ''; $this->opData = array(); $this->debug("\x63\x61\x6c\x6c\72\40\157\x70\x65\x72\x61\x74\x69\157\x6e\75{$operation}\x2c\40\156\x61\x6d\145\x73\x70\x61\143\145\75{$namespace}\x2c\40\163\157\141\160\x41\143\x74\x69\157\156\x3d{$soapAction}\54\40\162\x70\143\120\x61\162\x61\155\x73\x3d{$rpcParams}\x2c\x20\x73\x74\x79\154\145\x3d{$style}\54\40\x75\163\x65\75{$use}\x2c\40\145\156\x64\x70\x6f\x69\x6e\x74\124\x79\x70\x65\75{$this->endpointType}"); $this->appendDebug("\160\141\162\x61\x6d\163\75" . $this->varDump($params)); $this->appendDebug("\150\145\x61\x64\145\x72\163\x3d" . $this->varDump($headers)); if ($headers) { $this->requestHeaders = $headers; } if ($this->endpointType == "\167\x73\x64\154" && is_null($this->wsdl)) { $this->loadWSDL(); if ($this->getError()) { return false; } } if ($this->endpointType == "\167\163\144\154" && ($opData = $this->getOperationData($operation))) { $this->opData = $opData; $this->debug("\x66\x6f\x75\156\144\40\x6f\160\145\x72\141\x74\x69\x6f\156"); $this->appendDebug("\157\160\104\x61\164\x61\75" . $this->varDump($opData)); if (isset($opData["\163\x6f\141\160\101\143\164\151\157\156"])) { $soapAction = $opData["\x73\157\141\160\x41\143\164\x69\x6f\x6e"]; } if (!$this->forceEndpoint) { $this->endpoint = $opData["\x65\x6e\x64\x70\157\151\156\164"]; } else { $this->endpoint = $this->forceEndpoint; } $namespace = isset($opData["\151\156\160\165\164"]["\156\141\155\145\x73\x70\141\x63\x65"]) ? $opData["\x69\x6e\x70\165\x74"]["\156\x61\155\x65\x73\160\x61\143\x65"] : $namespace; $style = $opData["\x73\164\171\154\145"]; $use = $opData["\x69\156\160\165\x74"]["\x75\163\145"]; if ($namespace != '' && !isset($this->wsdl->namespaces[$namespace])) { $nsPrefix = "\156\163" . rand(1000, 9999); $this->wsdl->namespaces[$nsPrefix] = $namespace; } $nsPrefix = $this->wsdl->getPrefixFromNamespace($namespace); if (is_string($params)) { $this->debug("\163\145\162\x69\x61\154\x69\x7a\151\x6e\x67\x20\x70\141\x72\141\155\40\163\164\162\151\156\147\40\146\157\x72\40\x57\x53\104\114\40\x6f\160\145\x72\x61\164\151\157\x6e\x20{$operation}"); $payload = $params; } elseif (is_array($params)) { $this->debug("\163\145\162\x69\x61\x6c\x69\x7a\151\x6e\147\40\x70\141\162\x61\x6d\40\141\162\162\x61\x79\40\x66\157\162\40\127\123\x44\x4c\x20\157\160\x65\x72\141\x74\x69\157\x6e\x20{$operation}"); $payload = $this->wsdl->serializeRPCParameters($operation, "\151\156\160\165\164", $params, $this->bindingType); } else { $this->debug("\160\141\162\141\x6d\x73\x20\155\165\x73\x74\40\142\145\40\x61\162\162\141\171\40\x6f\x72\x20\163\164\x72\x69\156\147"); $this->setError("\x70\x61\162\x61\x6d\x73\40\155\165\163\164\40\x62\145\x20\141\x72\162\x61\x79\x20\x6f\x72\40\163\x74\x72\151\x6e\x67"); return false; } $usedNamespaces = $this->wsdl->usedNamespaces; if (isset($opData["\x69\156\160\165\164"]["\145\x6e\143\157\x64\151\156\x67\123\x74\x79\154\x65"])) { $encodingStyle = $opData["\151\156\160\x75\x74"]["\x65\156\143\x6f\144\x69\156\x67\x53\x74\x79\154\x65"]; } else { $encodingStyle = ''; } $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); if ($errstr = $this->wsdl->getError()) { $this->debug("\147\x6f\x74\40\167\163\144\x6c\x20\145\162\162\x6f\162\72\x20" . $errstr); $this->setError("\167\x73\144\154\x20\145\x72\x72\157\x72\x3a\x20" . $errstr); return false; } } elseif ($this->endpointType == "\167\x73\144\154") { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->setError("\157\x70\x65\162\141\x74\x69\157\x6e\40" . $operation . "\x20\156\157\164\x20\x70\162\145\x73\x65\156\164\x20\x69\x6e\40\127\123\x44\x4c\x2e"); $this->debug("\157\x70\x65\x72\x61\164\x69\157\156\40\x27{$operation}\x27\x20\x6e\x6f\x74\40\160\x72\x65\x73\145\x6e\164\x20\x69\156\40\x57\123\104\x4c\56"); return false; } else { $nsPrefix = "\x6e\x73" . rand(1000, 9999); $payload = ''; if (is_string($params)) { $this->debug("\163\x65\x72\x69\141\x6c\x69\172\151\x6e\x67\x20\160\141\162\x61\x6d\x20\163\164\162\151\156\147\40\146\157\x72\40\x6f\160\x65\x72\141\x74\x69\x6f\156\40{$operation}"); $payload = $params; } elseif (is_array($params)) { $this->debug("\163\145\x72\151\x61\154\x69\172\151\x6e\147\40\x70\x61\162\141\x6d\40\141\162\162\x61\171\x20\x66\157\x72\40\157\160\145\162\141\164\151\x6f\x6e\40{$operation}"); foreach ($params as $k => $v) { $payload .= $this->serialize_val($v, $k, false, false, false, false, $use); } } else { $this->debug("\x70\141\162\x61\155\163\40\155\165\163\164\40\x62\145\x20\x61\x72\x72\x61\171\40\x6f\x72\x20\x73\x74\162\151\x6e\147"); $this->setError("\x70\141\162\141\x6d\x73\40\x6d\x75\x73\164\x20\142\145\40\x61\x72\162\141\171\40\157\x72\x20\x73\x74\x72\151\156\147"); return false; } $usedNamespaces = array(); if ($use == "\145\156\143\157\x64\x65\x64") { $encodingStyle = "\150\x74\164\160\72\x2f\57\163\x63\150\x65\x6d\141\x73\56\170\x6d\x6c\x73\x6f\x61\x70\56\157\x72\x67\x2f\163\157\141\x70\57\x65\156\143\x6f\x64\x69\x6e\147\x2f"; } else { $encodingStyle = ''; } } if ($style == "\x72\160\x63") { if ($use == "\x6c\x69\164\145\x72\141\x6c") { $this->debug("\167\162\141\x70\160\x69\x6e\x67\40\122\x50\x43\40\162\x65\161\165\x65\x73\x74\40\167\151\x74\x68\40\x6c\151\164\x65\x72\141\x6c\x20\x6d\145\x74\x68\157\144\40\x65\x6c\x65\155\145\x6e\164"); if ($namespace) { $payload = "\x3c{$nsPrefix}\72{$operation}\x20\x78\x6d\x6c\x6e\163\x3a{$nsPrefix}\x3d\42{$namespace}\x22\x3e" . $payload . "\74\x2f{$nsPrefix}\72{$operation}\76"; } else { $payload = "\74{$operation}\x3e" . $payload . "\74\57{$operation}\76"; } } else { $this->debug("\167\162\x61\160\x70\x69\156\x67\x20\122\120\103\40\162\145\x71\x75\x65\x73\164\x20\167\x69\x74\x68\x20\145\x6e\143\157\x64\145\144\x20\x6d\145\164\x68\157\x64\x20\x65\154\145\155\145\156\x74"); if ($namespace) { $payload = "\74{$nsPrefix}\72{$operation}\x20\170\x6d\154\156\163\72{$nsPrefix}\x3d\42{$namespace}\42\76" . $payload . "\x3c\57{$nsPrefix}\x3a{$operation}\x3e"; } else { $payload = "\x3c{$operation}\x3e" . $payload . "\74\x2f{$operation}\x3e"; } } } $soapmsg = $this->serializeEnvelope($payload, $this->requestHeaders, $usedNamespaces, $style, $use, $encodingStyle); $this->debug("\x65\156\144\160\x6f\151\x6e\x74\75{$this->endpoint}\54\40\x73\x6f\141\160\101\143\x74\x69\x6f\x6e\x3d{$soapAction}\54\x20\156\x61\155\145\163\160\x61\143\145\75{$namespace}\x2c\x20\163\164\171\154\145\x3d{$style}\x2c\x20\x75\x73\145\x3d{$use}\x2c\40\145\x6e\143\157\x64\x69\x6e\x67\x53\164\x79\154\145\75{$encodingStyle}"); $this->debug("\123\117\101\x50\x20\x6d\x65\163\163\x61\x67\145\40\x6c\145\156\x67\x74\150\x3d" . strlen($soapmsg) . "\40\143\157\156\164\x65\x6e\164\163\x20\x28\155\141\x78\40\x31\x30\60\x30\x20\x62\x79\x74\145\163\51\75" . substr($soapmsg, 0, 1000)); $return = $this->send($this->getHTTPBody($soapmsg), $soapAction, $this->timeout, $this->response_timeout); if ($errstr = $this->getError()) { $this->debug("\x45\162\162\x6f\162\72\40" . $errstr); return false; } else { $this->return = $return; $this->debug("\x73\x65\x6e\164\40\x6d\x65\163\x73\x61\x67\x65\40\x73\x75\x63\x63\145\163\x73\x66\165\x6c\x6c\171\x20\141\156\x64\40\147\157\x74\40\x61\50\x6e\x29\40" . gettype($return)); $this->appendDebug("\162\x65\164\x75\x72\156\75" . $this->varDump($return)); if (is_array($return) && isset($return["\x66\141\x75\154\164\x63\157\x64\x65"])) { $this->debug("\147\157\164\40\146\x61\165\x6c\164"); $this->setError($return["\x66\x61\x75\x6c\x74\x63\x6f\144\x65"] . "\72\40" . $return["\146\x61\165\x6c\164\x73\164\162\x69\x6e\147"]); $this->fault = true; foreach ($return as $k => $v) { $this->{$k} = $v; if (is_array($v)) { $this->debug("{$k}\40\75\40" . json_encode($v)); } else { $this->debug("{$k}\40\75\40{$v}\74\142\x72\76"); } } return $return; } elseif ($style == "\x64\x6f\x63\165\155\x65\x6e\x74") { return $return; } else { if (is_array($return)) { if (sizeof($return) > 1) { return $return; } $return = array_shift($return); $this->debug("\162\x65\x74\x75\x72\156\40\163\150\151\146\164\x65\x64\40\166\x61\x6c\x75\x65\72\x20"); $this->appendDebug($this->varDump($return)); return $return; } else { return ''; } } } } function checkWSDL() { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->debug("\143\150\x65\x63\153\127\123\104\x4c"); if ($errstr = $this->wsdl->getError()) { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->debug("\x67\x6f\x74\40\167\163\144\x6c\40\x65\162\x72\x6f\162\72\x20" . $errstr); $this->setError("\x77\163\144\154\x20\x65\162\162\x6f\162\x3a\x20" . $errstr); } elseif ($this->operations = $this->wsdl->getOperations($this->portName, "\x73\x6f\x61\160")) { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->bindingType = "\x73\157\141\x70"; $this->debug("\147\x6f\x74\x20" . count($this->operations) . "\x20\157\160\x65\x72\141\164\151\x6f\156\x73\x20\x66\162\x6f\155\x20\167\163\x64\154\40" . $this->wsdlFile . "\40\146\157\162\x20\142\151\x6e\144\151\156\x67\x20\164\171\160\145\x20" . $this->bindingType); } elseif ($this->operations = $this->wsdl->getOperations($this->portName, "\163\157\x61\160\61\62")) { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->bindingType = "\x73\x6f\x61\160\61\62"; $this->debug("\147\x6f\164\40" . count($this->operations) . "\x20\x6f\x70\145\x72\x61\164\151\x6f\156\x73\40\146\x72\157\x6d\x20\167\163\x64\x6c\x20" . $this->wsdlFile . "\40\146\x6f\162\x20\x62\151\x6e\x64\x69\x6e\147\x20\164\x79\160\145\40" . $this->bindingType); $this->debug("\x2a\52\52\52\52\52\52\x2a\52\52\52\x2a\x2a\52\x2a\x2a\40\127\101\122\116\111\116\x47\72\x20\x53\x4f\101\120\x20\61\x2e\62\x20\x42\111\x4e\104\x49\x4e\107\x20\x2a\x2a\52\52\52\52\x2a\52\52\x2a\52\52\52\52\x2a\x2a\x2a"); } else { $this->appendDebug($this->wsdl->getDebug()); $this->wsdl->clearDebug(); $this->debug("\x67\145\x74\117\x70\145\x72\141\x74\151\x6f\x6e\163\40\162\145\x74\165\x72\156\x65\x64\x20\146\x61\x6c\163\x65"); $this->setError("\156\x6f\x20\x6f\x70\145\x72\x61\x74\151\x6f\156\163\x20\x64\145\146\151\x6e\x65\x64\x20\x69\x6e\40\164\x68\145\x20\x57\x53\104\x4c\x20\x64\x6f\143\165\155\145\156\164\41"); } } function loadWSDL() { $this->debug("\151\x6e\x73\164\141\x6e\x74\x69\141\x74\x69\x6e\147\40\x77\x73\x64\154\40\143\154\141\163\x73\40\x77\x69\164\x68\x20\144\x6f\x63\x3a\40" . $this->wsdlFile); $this->wsdl = new wsdl('', $this->proxyhost, $this->proxyport, $this->proxyusername, $this->proxypassword, $this->timeout, $this->response_timeout, $this->curl_options, $this->use_curl); $this->wsdl->setCredentials($this->username, $this->password, $this->authtype, $this->certRequest); $this->wsdl->fetchWSDL($this->wsdlFile); $this->checkWSDL(); } function getOperationData($operation) { if ($this->endpointType == "\x77\163\144\x6c" && is_null($this->wsdl)) { $this->loadWSDL(); if ($this->getError()) { return false; } } if (isset($this->operations[$operation])) { return $this->operations[$operation]; } $this->debug("\116\157\x20\x64\141\x74\141\40\146\x6f\162\40\x6f\x70\145\x72\x61\x74\151\157\x6e\72\40{$operation}"); } function send($msg, $soapaction = '', $timeout = 0, $response_timeout = 30) { $this->checkCookies(); switch (true) { case preg_match("\57\x5e\150\164\164\x70\x2f", $this->endpoint): $this->debug("\x74\x72\141\156\x73\160\157\x72\164\x69\156\147\40\x76\x69\x61\x20\110\x54\x54\120"); if ($this->persistentConnection == true && is_object($this->persistentConnection)) { $http =& $this->persistentConnection; } else { $http = new soap_transport_http($this->endpoint, $this->curl_options, $this->use_curl); if ($this->persistentConnection) { $http->usePersistentConnection(); } } $http->setContentType($this->getHTTPContentType(), $this->getHTTPContentTypeCharset()); $http->setSOAPAction($soapaction); if ($this->proxyhost && $this->proxyport) { $http->setProxy($this->proxyhost, $this->proxyport, $this->proxyusername, $this->proxypassword); } if ($this->authtype != '') { $http->setCredentials($this->username, $this->password, $this->authtype, array(), $this->certRequest); } if ($this->http_encoding != '') { $http->setEncoding($this->http_encoding); } $this->debug("\163\x65\156\x64\x69\156\147\x20\x6d\145\x73\163\141\147\145\x2c\40\x6c\x65\156\x67\x74\150\x3d" . strlen($msg)); if (preg_match("\57\136\x68\164\164\160\72\57", $this->endpoint)) { $this->responseData = $http->send($msg, $timeout, $response_timeout, $this->cookies); } elseif (preg_match("\x2f\x5e\150\164\164\160\x73\57", $this->endpoint)) { $this->responseData = $http->sendHTTPS($msg, $timeout, $response_timeout, $this->cookies); } else { $this->setError("\156\x6f\x20\x68\x74\164\x70\57\163\40\151\x6e\40\145\156\x64\160\157\x69\156\x74\40\165\x72\154"); } $this->request = $http->outgoing_payload; $this->response = $http->incoming_payload; $this->appendDebug($http->getDebug()); $this->UpdateCookies($http->incoming_cookies); if ($this->persistentConnection) { $http->clearDebug(); if (!is_object($this->persistentConnection)) { $this->persistentConnection = $http; } } if ($err = $http->getError()) { $this->setError("\x48\x54\124\x50\40\x45\x72\x72\x6f\162\72\x20" . $err); return false; } elseif ($this->getError()) { return false; } else { $this->debug("\147\x6f\x74\x20\x72\145\163\160\x6f\x6e\x73\x65\54\x20\154\x65\156\x67\x74\x68\75" . strlen($this->responseData) . "\40\164\x79\x70\145\75" . $http->incoming_headers["\x63\157\x6e\x74\145\156\164\x2d\x74\x79\160\x65"]); return $this->parseResponse($http->incoming_headers, $this->responseData); } break; default: $this->setError("\156\x6f\x20\x74\162\141\156\163\160\x6f\x72\x74\40\146\x6f\165\156\144\x2c\40\157\x72\40\x73\x65\x6c\x65\143\164\145\144\x20\164\x72\141\156\163\x70\x6f\x72\x74\x20\x69\163\40\x6e\x6f\x74\x20\171\145\164\x20\163\x75\x70\x70\157\x72\x74\x65\144\x21"); return false; break; } } function parseResponse($headers, $data) { $this->debug("\105\156\164\x65\x72\151\156\147\x20\x70\x61\162\163\x65\x52\x65\163\x70\x6f\156\x73\x65\x28\51\x20\146\157\x72\x20\x64\x61\x74\x61\x20\157\146\40\154\145\156\x67\164\150\40" . strlen($data) . "\x20\150\x65\141\x64\x65\162\163\72"); $this->appendDebug($this->varDump($headers)); if (!isset($headers["\143\x6f\156\164\x65\156\164\x2d\164\171\160\x65"])) { $this->setError("\122\145\x73\x70\157\x6e\163\145\40\x6e\157\x74\x20\x6f\x66\40\x74\x79\x70\145\40" . $this->contentType . "\40\50\156\157\x20\143\x6f\156\164\145\x6e\164\x2d\164\171\x70\145\40\150\145\x61\x64\145\x72\x29"); return false; } if (!strstr($headers["\143\x6f\x6e\x74\145\x6e\164\x2d\x74\x79\160\x65"], $this->contentType)) { $this->setError("\x52\145\163\x70\x6f\x6e\x73\x65\x20\156\x6f\x74\40\x6f\146\40\x74\171\x70\145\x20" . $this->contentType . "\72\x20" . $headers["\x63\157\156\x74\x65\x6e\x74\x2d\x74\171\160\145"]); return false; } if (strpos($headers["\143\157\156\164\145\x6e\x74\55\x74\171\x70\x65"], "\75")) { $enc = str_replace("\42", '', substr(strstr($headers["\143\x6f\156\164\145\156\164\55\x74\171\160\145"], "\75"), 1)); $this->debug("\107\x6f\164\40\x72\145\x73\160\x6f\x6e\163\x65\x20\x65\156\143\x6f\144\151\156\147\72\40" . $enc); if (preg_match("\x2f\x5e\x28\x49\x53\117\x2d\70\70\65\71\55\61\x7c\x55\x53\x2d\101\123\x43\111\111\174\125\124\106\x2d\70\51\x24\57\151", $enc)) { $this->xml_encoding = strtoupper($enc); } else { $this->xml_encoding = "\125\x53\x2d\x41\123\x43\x49\111"; } } else { $this->xml_encoding = "\x49\x53\117\55\70\70\x35\71\55\61"; } $this->debug("\125\x73\x65\40\x65\156\143\157\144\151\156\x67\72\x20" . $this->xml_encoding . "\40\x77\x68\145\x6e\40\x63\x72\145\141\164\x69\156\x67\x20\156\x75\163\157\141\160\137\x70\141\x72\163\x65\162"); $parser = new nusoap_parser($data, $this->xml_encoding, $this->operations, $this->decode_utf8); $this->appendDebug($parser->getDebug()); if ($errstr = $parser->getError()) { $this->setError($errstr); unset($parser); return false; } else { $this->responseHeaders = $parser->getHeaders(); $this->responseHeader = $parser->get_soapheader(); $return = $parser->get_soapbody(); $this->document = $parser->document; unset($parser); return $return; } } function setCurlOption($option, $value) { $this->debug("\163\x65\x74\103\165\162\x6c\117\160\x74\x69\x6f\x6e\x20\x6f\x70\164\x69\x6f\156\x3d{$option}\54\x20\166\x61\154\165\145\75"); $this->appendDebug($this->varDump($value)); $this->curl_options[$option] = $value; } function setEndpoint($endpoint) { $this->debug("\163\x65\164\x45\x6e\x64\160\x6f\x69\x6e\x74\x28\x22{$endpoint}\42\x29"); $this->forceEndpoint = $endpoint; } function setHeaders($headers) { $this->debug("\163\x65\x74\110\145\141\144\x65\162\163\x20\x68\x65\141\144\x65\x72\163\x3d"); $this->appendDebug($this->varDump($headers)); $this->requestHeaders = $headers; } function getHeaders() { return $this->responseHeaders; } function getHeader() { return $this->responseHeader; } function setHTTPProxy($proxyhost, $proxyport, $proxyusername = '', $proxypassword = '') { $this->proxyhost = $proxyhost; $this->proxyport = $proxyport; $this->proxyusername = $proxyusername; $this->proxypassword = $proxypassword; } function setCredentials($username, $password, $authtype = "\x62\x61\x73\151\x63", $certRequest = array()) { $this->debug("\x73\145\x74\103\x72\145\x64\145\156\x74\x69\x61\x6c\x73\40\x75\163\145\162\156\141\x6d\145\x3d{$username}\40\x61\x75\164\150\164\171\x70\145\75{$authtype}\x20\143\145\162\164\122\145\x71\165\x65\x73\x74\x3d"); $this->appendDebug($this->varDump($certRequest)); $this->username = $username; $this->password = $password; $this->authtype = $authtype; $this->certRequest = $certRequest; } function setHTTPEncoding($enc = "\x67\x7a\x69\x70\x2c\40\144\x65\x66\x6c\x61\164\x65") { $this->debug("\x73\145\x74\110\124\x54\120\105\156\x63\157\144\151\156\x67\50\42{$enc}\42\51"); $this->http_encoding = $enc; } function setUseCURL($use) { $this->debug("\x73\x65\x74\x55\163\x65\x43\x55\122\x4c\50{$use}\x29"); $this->use_curl = $use; } function useHTTPPersistentConnection() { $this->debug("\165\x73\x65\110\x54\x54\x50\x50\145\162\x73\x69\x73\x74\145\156\164\103\157\156\156\x65\143\x74\x69\x6f\156"); $this->persistentConnection = true; } function getDefaultRpcParams() { return $this->defaultRpcParams; } function setDefaultRpcParams($rpcParams) { $this->defaultRpcParams = $rpcParams; } function getProxy() { $r = rand(); $evalStr = $this->_getProxyClassCode($r); if ($this->getError()) { $this->debug("\105\162\162\x6f\x72\40\146\x72\157\x6d\x20\x5f\147\145\164\120\x72\157\170\x79\103\154\141\163\x73\103\x6f\x64\145\54\40\x73\157\x20\162\145\164\165\x72\156\40\156\x75\x6c\154"); return null; } eval($evalStr); eval("\44\x70\162\157\x78\171\40\x3d\40\156\145\167\x20\x6e\x75\x73\x6f\141\x70\137\x70\x72\x6f\x78\x79\137{$r}\x28\x27\x27\x29\73"); $proxy->endpointType = "\167\x73\x64\x6c"; $proxy->wsdlFile = $this->wsdlFile; $proxy->wsdl = $this->wsdl; $proxy->operations = $this->operations; $proxy->defaultRpcParams = $this->defaultRpcParams; $proxy->soap_defencoding = $this->soap_defencoding; $proxy->username = $this->username; $proxy->password = $this->password; $proxy->authtype = $this->authtype; $proxy->certRequest = $this->certRequest; $proxy->requestHeaders = $this->requestHeaders; $proxy->endpoint = $this->endpoint; $proxy->forceEndpoint = $this->forceEndpoint; $proxy->proxyhost = $this->proxyhost; $proxy->proxyport = $this->proxyport; $proxy->proxyusername = $this->proxyusername; $proxy->proxypassword = $this->proxypassword; $proxy->http_encoding = $this->http_encoding; $proxy->timeout = $this->timeout; $proxy->response_timeout = $this->response_timeout; $proxy->persistentConnection =& $this->persistentConnection; $proxy->decode_utf8 = $this->decode_utf8; $proxy->curl_options = $this->curl_options; $proxy->bindingType = $this->bindingType; $proxy->use_curl = $this->use_curl; return $proxy; } function _getProxyClassCode($r) { $this->debug("\x69\x6e\x20\x67\x65\x74\x50\162\157\x78\171\40\x65\x6e\144\x70\x6f\x69\x6e\x74\x54\x79\x70\x65\75{$this->endpointType}"); $this->appendDebug("\167\x73\144\x6c\x3d" . $this->varDump($this->wsdl)); if ($this->endpointType != "\x77\163\144\x6c") { $evalStr = "\x41\40\x70\162\x6f\x78\x79\40\143\141\156\x20\157\156\154\x79\40\142\145\40\x63\x72\x65\x61\x74\x65\144\x20\146\157\x72\40\141\40\x57\123\104\x4c\x20\143\154\151\145\156\x74"; $this->setError($evalStr); $evalStr = "\x65\x63\150\157\x20\42{$evalStr}\42\x3b"; return $evalStr; } if ($this->endpointType == "\x77\x73\144\x6c" && is_null($this->wsdl)) { $this->loadWSDL(); if ($this->getError()) { return "\x65\x63\150\157\x20\x22" . $this->getError() . "\42\x3b"; } } $evalStr = ''; foreach ($this->operations as $operation => $opData) { if ($operation != '') { if (sizeof($opData["\x69\156\x70\165\x74"]["\x70\x61\162\x74\163"]) > 0) { $paramStr = ''; $paramArrayStr = ''; $paramCommentStr = ''; foreach ($opData["\x69\x6e\x70\165\x74"]["\160\141\162\x74\163"] as $name => $type) { $paramStr .= "\x24{$name}\54\40"; $paramArrayStr .= "\x27{$name}\47\x20\x3d\76\x20\44{$name}\54\x20"; $paramCommentStr .= "{$type}\40\44{$name}\54\40"; } $paramStr = substr($paramStr, 0, strlen($paramStr) - 2); $paramArrayStr = substr($paramArrayStr, 0, strlen($paramArrayStr) - 2); $paramCommentStr = substr($paramCommentStr, 0, strlen($paramCommentStr) - 2); } else { $paramStr = ''; $paramArrayStr = ''; $paramCommentStr = "\x76\x6f\151\x64"; } $opData["\x6e\x61\155\145\x73\160\x61\143\145"] = !isset($opData["\x6e\141\155\x65\163\x70\141\143\x65"]) ? "\x68\x74\x74\160\72\57\57\x74\x65\x73\164\x75\x72\151\56\143\157\x6d" : $opData["\156\141\155\145\163\160\x61\x63\x65"]; $evalStr .= "\57\x2f\x20{$paramCommentStr}\12\11\146\165\156\x63\164\x69\x6f\156\40" . str_replace("\x2e", "\x5f\x5f", $operation) . "\x28{$paramStr}\51\x20\x7b\12\x9\11\44\x70\x61\x72\141\155\163\40\x3d\x20\141\162\x72\141\171\x28{$paramArrayStr}\51\73\xa\x9\x9\162\145\164\165\x72\156\x20\44\164\x68\x69\163\55\x3e\143\x61\x6c\154\x28\47{$operation}\47\x2c\x20\44\x70\141\162\x61\x6d\x73\54\x20\x27" . $opData["\x6e\141\x6d\x65\x73\160\x61\143\x65"] . "\x27\x2c\40\47" . (isset($opData["\x73\157\x61\x70\101\143\164\x69\x6f\x6e"]) ? $opData["\x73\157\x61\160\101\x63\164\151\157\x6e"] : '') . "\x27\x29\73\12\x9\x7d\12\x9"; unset($paramStr); unset($paramCommentStr); } } $evalStr = "\143\x6c\x61\x73\x73\40\x6e\x75\163\157\x61\x70\137\160\162\157\170\171\x5f" . $r . "\40\x65\170\164\145\156\x64\163\40\x45\156\144\x50\157\x69\156\164\x43\154\151\x65\x6e\164\40\173\12\x9" . $evalStr . "\xa\175"; return $evalStr; } function getProxyClassCode() { $r = rand(); return $this->_getProxyClassCode($r); } function getHTTPBody($soapmsg) { return $soapmsg; } function getHTTPContentType() { return $this->contentType; } function setHTTPContentType($contentTypeNew = "\x74\x65\170\164\x2f\170\155\x6c") { $this->contentType = $contentTypeNew; } function getHTTPContentTypeCharset() { return $this->soap_defencoding; } function decodeUTF8($bool) { $this->decode_utf8 = $bool; return true; } function setCookie($name, $value) { if (strlen($name) == 0) { return false; } $this->cookies[] = array("\156\x61\x6d\x65" => $name, "\x76\141\x6c\x75\x65" => $value); return true; } function getCookies() { return $this->cookies; } function checkCookies() { if (sizeof($this->cookies) == 0) { return true; } $this->debug("\143\x68\x65\143\x6b\103\x6f\157\x6b\151\145\x3a\x20\x63\150\145\143\x6b\40" . sizeof($this->cookies) . "\40\x63\157\x6f\x6b\151\x65\x73"); $curr_cookies = $this->cookies; $this->cookies = array(); foreach ($curr_cookies as $cookie) { if (!is_array($cookie)) { $this->debug("\122\145\x6d\x6f\166\x65\x20\x63\x6f\157\x6b\x69\145\x20\164\150\x61\164\40\x69\x73\x20\x6e\157\164\x20\141\x6e\x20\141\162\162\x61\x79"); continue; } if (isset($cookie["\x65\170\160\x69\x72\145\163"]) && !empty($cookie["\x65\170\x70\151\x72\145\163"])) { if (strtotime($cookie["\x65\x78\x70\151\x72\x65\x73"]) > time()) { $this->cookies[] = $cookie; } else { $this->debug("\x52\x65\155\x6f\166\x65\40\145\x78\x70\x69\162\x65\144\40\x63\x6f\157\x6b\x69\145\40" . $cookie["\156\x61\155\x65"]); } } else { $this->cookies[] = $cookie; } } $this->debug("\x63\x68\x65\x63\153\103\157\157\x6b\151\145\x3a\x20" . sizeof($this->cookies) . "\40\x63\x6f\x6f\153\151\145\x73\40\154\x65\146\x74\x20\151\x6e\x20\x61\x72\162\141\171"); return true; } function UpdateCookies($cookies) { if (sizeof($this->cookies) == 0) { if (sizeof($cookies) > 0) { $this->debug("\123\x65\164\164\x69\156\147\40\x6e\x65\x77\40\143\x6f\x6f\x6b\x69\145\50\163\51"); $this->cookies = $cookies; } return true; } if (sizeof($cookies) == 0) { return true; } foreach ($cookies as $newCookie) { if (!is_array($newCookie)) { continue; } if (!isset($newCookie["\x6e\141\x6d\145"]) || !isset($newCookie["\166\141\154\x75\x65"])) { continue; } $newName = $newCookie["\x6e\x61\155\145"]; $found = false; for ($i = 0; $i < count($this->cookies); $i++) { $cookie = $this->cookies[$i]; if (!is_array($cookie)) { continue; } if (!isset($cookie["\156\x61\155\145"])) { continue; } if ($newName != $cookie["\x6e\141\x6d\145"]) { continue; } $newDomain = isset($newCookie["\144\157\x6d\141\151\x6e"]) ? $newCookie["\144\157\x6d\x61\151\x6e"] : "\x4e\x4f\104\117\115\101\x49\x4e"; $domain = isset($cookie["\144\x6f\155\141\x69\x6e"]) ? $cookie["\144\157\155\141\x69\156"] : "\116\x4f\x44\x4f\115\x41\x49\x4e"; if ($newDomain != $domain) { continue; } $newPath = isset($newCookie["\x70\141\x74\150"]) ? $newCookie["\x70\141\164\150"] : "\x4e\117\x50\101\x54\110"; $path = isset($cookie["\x70\x61\x74\150"]) ? $cookie["\160\141\164\x68"] : "\116\117\120\101\x54\x48"; if ($newPath != $path) { continue; } $this->cookies[$i] = $newCookie; $found = true; $this->debug("\125\x70\144\141\x74\x65\40\x63\157\x6f\x6b\x69\145\40" . $newName . "\75" . $newCookie["\x76\141\154\x75\145"]); break; } if (!$found) { $this->debug("\x41\144\144\40\143\x6f\157\153\151\x65\x20" . $newName . "\x3d" . $newCookie["\x76\x61\154\x75\145"]); $this->cookies[] = $newCookie; } } return true; } } goto gxvWz; wj8up: class nusoap_fault extends nusoap_base { var $faultcode; var $faultactor; var $faultstring; var $faultdetail; function __construct($faultcode, $faultactor = '', $faultstring = '', $faultdetail = '') { parent::__construct(); $this->faultcode = $faultcode; $this->faultactor = $faultactor; $this->faultstring = $faultstring; $this->faultdetail = $faultdetail; } function serialize() { $ns_string = ''; foreach ($this->namespaces as $k => $v) { $ns_string .= "\12\40\40\x78\155\x6c\156\x73\72{$k}\x3d\42{$v}\42"; } $return_msg = "\74\77\170\x6d\x6c\40\x76\145\162\163\151\157\156\75\x22\x31\x2e\60\42\40\145\156\143\157\144\151\156\147\x3d\x22" . $this->soap_defencoding . "\x22\x3f\x3e" . "\74\123\x4f\x41\x50\55\x45\116\x56\72\105\x6e\166\x65\154\157\160\x65\40\x53\x4f\101\120\55\105\x4e\x56\72\x65\x6e\143\x6f\x64\151\156\x67\123\164\x79\x6c\145\75\42\150\x74\x74\x70\x3a\57\57\163\143\150\x65\x6d\141\163\56\x78\x6d\154\x73\157\x61\x70\x2e\157\162\147\57\163\x6f\141\x70\x2f\x65\156\143\x6f\x64\x69\x6e\x67\57\42" . $ns_string . "\x3e\xa" . "\74\123\x4f\101\x50\55\x45\x4e\126\72\x42\x6f\144\171\76" . "\74\x53\117\101\x50\x2d\x45\x4e\126\x3a\x46\141\x75\154\x74\x3e" . $this->serialize_val($this->faultcode, "\x66\x61\x75\154\x74\143\157\x64\145") . $this->serialize_val($this->faultstring, "\146\141\x75\154\x74\163\164\x72\x69\156\x67") . $this->serialize_val($this->faultactor, "\x66\x61\x75\x6c\x74\x61\x63\x74\x6f\162") . $this->serialize_val($this->faultdetail, "\144\x65\164\x61\151\x6c") . "\x3c\57\123\x4f\101\x50\55\105\116\126\x3a\x46\141\x75\154\x74\76" . "\74\x2f\123\117\101\x50\55\x45\116\126\x3a\x42\x6f\144\171\x3e" . "\74\57\x53\x4f\x41\120\55\x45\x4e\126\x3a\105\x6e\x76\x65\154\x6f\x70\x65\x3e"; return $return_msg; } } goto Wehmf; sxGBs: class nusoap_parser extends nusoap_base { var $xml = ''; var $xml_encoding = ''; var $method = ''; var $root_struct = ''; var $root_struct_name = ''; var $root_struct_namespace = ''; var $root_header = ''; var $document = ''; var $status = ''; var $position = 0; var $depth = 0; var $default_namespace = ''; var $namespaces = array(); var $message = array(); var $parent = ''; var $fault = false; var $fault_code = ''; var $fault_str = ''; var $fault_detail = ''; var $depth_array = array(); var $debug_flag = true; var $soapresponse = null; var $soapheader = null; var $responseHeaders = ''; var $body_position = 0; var $ids = array(); var $multirefs = array(); var $decode_utf8 = true; function __construct($xml, $encoding = "\125\124\x46\x2d\x38", $method = '', $decode_utf8 = true) { parent::__construct(); $this->xml = $xml; $this->xml_encoding = $encoding; $this->method = $method; $this->decode_utf8 = $decode_utf8; if (!empty($xml)) { $pos_xml = strpos($xml, "\74\77\170\x6d\154"); if ($pos_xml !== false) { $xml_decl = substr($xml, $pos_xml, strpos($xml, "\77\76", $pos_xml + 2) - $pos_xml + 1); if (preg_match("\57\x65\156\143\157\x64\x69\156\147\75\133\42\x27\135\50\x5b\x5e\x22\47\135\x2a\x29\133\42\x27\x5d\57", $xml_decl, $res)) { $xml_encoding = $res[1]; if (strtoupper($xml_encoding) != $encoding) { $err = "\103\150\141\x72\x73\145\164\x20\x66\x72\157\155\x20\110\124\124\120\40\x43\157\x6e\x74\x65\156\164\x2d\x54\x79\x70\x65\40\x27" . $encoding . "\x27\x20\144\x6f\145\163\x20\156\x6f\164\x20\x6d\141\x74\x63\150\x20\x65\156\143\x6f\144\151\x6e\x67\x20\x66\162\157\155\40\130\x4d\x4c\40\x64\145\143\154\x61\162\x61\164\151\x6f\x6e\40\47" . $xml_encoding . "\x27"; $this->debug($err); if ($encoding != "\x49\x53\117\55\70\x38\65\x39\x2d\61" || strtoupper($xml_encoding) != "\125\124\106\55\x38") { $this->setError($err); return; } } else { $this->debug("\103\x68\141\x72\x73\145\x74\x20\146\162\x6f\155\x20\110\x54\124\x50\x20\103\157\x6e\x74\145\156\x74\55\x54\171\160\145\x20\155\x61\164\143\150\x65\163\x20\x65\156\143\157\144\x69\156\x67\40\146\162\157\155\x20\130\115\x4c\40\x64\145\143\x6c\x61\162\x61\164\x69\157\156"); } } else { $this->debug("\x4e\157\40\x65\156\x63\157\x64\x69\x6e\x67\40\x73\x70\x65\x63\x69\x66\x69\145\144\40\x69\156\x20\130\115\114\40\144\145\143\x6c\x61\x72\x61\164\x69\x6f\x6e"); } } else { $this->debug("\116\x6f\x20\130\115\114\40\144\145\143\154\x61\162\141\164\151\157\156"); } $this->debug("\x45\156\164\145\x72\x69\156\147\x20\156\165\x73\157\x61\160\x5f\x70\141\x72\163\145\162\50\51\x2c\x20\154\x65\156\x67\x74\x68\x3d" . strlen($xml) . "\54\40\x65\156\x63\x6f\x64\151\156\x67\x3d" . $encoding); $this->parser = xml_parser_create($this->xml_encoding); xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, 0); xml_parser_set_option($this->parser, XML_OPTION_TARGET_ENCODING, $this->xml_encoding); xml_set_object($this->parser, $this); xml_set_element_handler($this->parser, "\x73\164\141\162\x74\x5f\x65\154\x65\x6d\x65\156\164", "\x65\156\144\137\x65\x6c\x65\x6d\145\x6e\x74"); xml_set_character_data_handler($this->parser, "\143\150\141\x72\141\x63\x74\145\162\137\144\x61\x74\141"); $parseErrors = array(); $chunkSize = 4096; for ($pointer = 0; $pointer < strlen($xml) && empty($parseErrors); $pointer += $chunkSize) { $xmlString = substr($xml, $pointer, $chunkSize); if (!xml_parse($this->parser, $xmlString, false)) { $parseErrors["\154\x69\x6e\x65\x4e\165\155\x62\x65\x72"] = xml_get_current_line_number($this->parser); $parseErrors["\145\162\x72\x6f\x72\123\164\162\151\156\147"] = xml_error_string(xml_get_error_code($this->parser)); } } xml_parse($this->parser, '', true); if (!empty($parseErrors)) { $err = sprintf("\x58\x4d\114\x20\145\x72\x72\157\x72\x20\x70\141\162\x73\x69\156\147\x20\123\x4f\x41\120\40\x70\141\x79\154\x6f\141\x64\40\x6f\156\x20\x6c\x69\156\145\40\45\144\72\x20\x25\163", $parseErrors["\154\151\156\x65\116\x75\x6d\142\145\162"], $parseErrors["\x65\162\162\157\162\123\164\162\x69\156\147"]); $this->debug($err); $this->setError($err); } else { $this->debug("\151\156\x20\x6e\165\x73\x6f\141\160\137\x70\x61\162\163\145\x72\x20\x63\x74\157\x72\x2c\x20\x6d\x65\163\x73\x61\147\145\x3a"); $this->appendDebug($this->varDump($this->message)); $this->debug("\160\141\x72\x73\145\x64\40\x73\165\x63\x63\145\163\163\146\165\154\x6c\171\x2c\40\x66\157\x75\156\x64\40\x72\x6f\x6f\164\x20\x73\164\162\165\x63\x74\72\x20" . $this->root_struct . "\x20\157\x66\40\156\x61\x6d\145\x20" . $this->root_struct_name); $this->soapresponse = $this->message[$this->root_struct]["\162\145\163\165\154\x74"]; if ($this->root_header != '' && isset($this->message[$this->root_header]["\162\x65\x73\165\x6c\164"])) { $this->soapheader = $this->message[$this->root_header]["\162\x65\x73\x75\154\x74"]; } if (sizeof($this->multirefs) > 0) { foreach ($this->multirefs as $id => $hrefs) { $this->debug("\162\145\163\157\x6c\x76\x69\156\x67\x20\155\x75\154\x74\151\162\x65\x66\163\x20\x66\x6f\162\40\x69\x64\72\x20" . $id); $idVal = $this->buildVal($this->ids[$id]); if (is_array($idVal) && isset($idVal["\41\151\x64"])) { unset($idVal["\x21\151\144"]); } foreach ($hrefs as $refPos => $ref) { $this->debug("\x72\145\x73\157\x6c\166\x69\x6e\147\40\150\x72\145\146\40\141\164\x20\160\x6f\163\x20" . $refPos); $this->multirefs[$id][$refPos] = $idVal; } } } } xml_parser_free($this->parser); unset($this->parser); } else { $this->debug("\x78\x6d\154\40\167\x61\x73\40\145\x6d\x70\164\x79\54\x20\144\x69\x64\x6e\x27\x74\x20\160\x61\x72\x73\145\x21"); $this->setError("\170\155\154\40\167\141\163\40\145\x6d\x70\164\171\54\x20\144\x69\x64\156\x27\x74\x20\160\x61\162\x73\145\41"); } } function start_element($parser, $name, $attrs) { $pos = $this->position++; $this->message[$pos] = array("\x70\x6f\163" => $pos, "\x63\x68\x69\154\144\162\145\156" => '', "\143\144\141\164\x61" => ''); $this->message[$pos]["\144\x65\x70\x74\x68"] = $this->depth++; if ($pos != 0) { $this->message[$this->parent]["\x63\150\x69\x6c\x64\162\x65\156"] .= "\174" . $pos; } $this->message[$pos]["\160\x61\x72\145\156\x74"] = $this->parent; $this->parent = $pos; $this->depth_array[$this->depth] = $pos; if (strpos($name, "\72")) { $prefix = substr($name, 0, strpos($name, "\72")); $name = substr(strstr($name, "\72"), 1); } if ($name == "\x45\x6e\x76\145\x6c\157\x70\145" && $this->status == '') { $this->status = "\x65\156\166\x65\x6c\157\160\145"; } elseif ($name == "\110\145\141\x64\x65\162" && $this->status == "\145\156\166\145\x6c\x6f\x70\x65") { $this->root_header = $pos; $this->status = "\150\x65\x61\x64\x65\162"; } elseif ($name == "\x42\x6f\144\x79" && $this->status == "\x65\x6e\166\x65\x6c\x6f\x70\145") { $this->status = "\142\157\144\x79"; $this->body_position = $pos; } elseif ($this->status == "\x62\x6f\144\171" && $pos == $this->body_position + 1) { $this->status = "\x6d\x65\164\150\x6f\144"; $this->root_struct_name = $name; $this->root_struct = $pos; $this->message[$pos]["\164\x79\x70\145"] = "\x73\164\x72\x75\x63\x74"; $this->debug("\146\157\165\x6e\144\40\162\157\x6f\x74\40\x73\x74\x72\x75\143\164\40{$this->root_struct_name}\54\40\160\x6f\x73\40{$this->root_struct}"); } $this->message[$pos]["\163\x74\141\x74\165\x73"] = $this->status; $this->message[$pos]["\x6e\x61\x6d\x65"] = htmlspecialchars($name); $this->message[$pos]["\141\x74\x74\162\163"] = $attrs; $attstr = ''; foreach ($attrs as $key => $value) { $key_prefix = $this->getPrefix($key); $key_localpart = $this->getLocalPart($key); if ($key_prefix == "\x78\155\x6c\156\x73") { if (preg_match("\57\x5e\150\164\164\x70\x3a\x5c\x2f\134\57\167\x77\167\56\x77\63\x2e\x6f\x72\147\x5c\x2f\x5b\x30\55\71\135\173\x34\x7d\x5c\57\x58\115\114\123\143\150\145\155\x61\x24\57", $value)) { $this->XMLSchemaVersion = $value; $this->namespaces["\x78\x73\x64"] = $this->XMLSchemaVersion; $this->namespaces["\170\163\x69"] = $this->XMLSchemaVersion . "\x2d\151\x6e\x73\x74\141\156\x63\145"; } $this->namespaces[$key_localpart] = $value; if ($name == $this->root_struct_name) { $this->methodNamespace = $value; } } elseif ($key_localpart == "\x74\171\160\145") { if (isset($this->message[$pos]["\164\x79\160\145"]) && $this->message[$pos]["\x74\171\x70\x65"] == "\x61\162\162\141\x79") { } else { $value_prefix = $this->getPrefix($value); $value_localpart = $this->getLocalPart($value); $this->message[$pos]["\x74\171\x70\x65"] = $value_localpart; $this->message[$pos]["\x74\171\x70\x65\120\x72\x65\x66\x69\x78"] = $value_prefix; if (isset($this->namespaces[$value_prefix])) { $this->message[$pos]["\164\x79\x70\145\x5f\x6e\x61\x6d\145\x73\160\x61\143\x65"] = $this->namespaces[$value_prefix]; } elseif (isset($attrs["\x78\155\x6c\156\x73\72" . $value_prefix])) { $this->message[$pos]["\164\x79\x70\145\x5f\x6e\x61\155\145\163\x70\x61\x63\145"] = $attrs["\170\155\154\x6e\x73\72" . $value_prefix]; } } } elseif ($key_localpart == "\141\162\162\x61\171\124\x79\x70\145") { $this->message[$pos]["\164\x79\160\x65"] = "\x61\162\162\141\x79"; $expr = "\x2f\x28\x5b\x41\55\x5a\x61\55\x7a\x30\55\71\137\x5d\x2b\x29\72\x28\133\101\x2d\x5a\141\x2d\x7a\135\x2b\133\101\x2d\x5a\141\x2d\x7a\x30\x2d\71\x5f\135\x2b\x29\134\133\50\x5b\60\55\71\135\x2b\51\x2c\77\x28\133\x30\55\71\135\x2a\x29\134\x5d\x2f"; if (preg_match($expr, $value, $regs)) { $this->message[$pos]["\x74\171\160\145\x50\162\145\146\x69\170"] = $regs[1]; $this->message[$pos]["\141\162\x72\141\x79\124\x79\x70\x65\x50\162\x65\146\151\x78"] = $regs[1]; if (isset($this->namespaces[$regs[1]])) { $this->message[$pos]["\141\162\162\x61\171\x54\171\160\x65\x4e\x61\x6d\x65\x73\160\141\143\145"] = $this->namespaces[$regs[1]]; } elseif (isset($attrs["\170\155\154\156\163\x3a" . $regs[1]])) { $this->message[$pos]["\141\x72\162\141\x79\124\x79\x70\145\116\x61\x6d\145\x73\x70\141\x63\145"] = $attrs["\x78\155\154\156\x73\72" . $regs[1]]; } $this->message[$pos]["\141\162\x72\x61\x79\124\171\x70\145"] = $regs[2]; $this->message[$pos]["\x61\162\x72\141\x79\x53\151\x7a\x65"] = $regs[3]; $this->message[$pos]["\x61\162\162\x61\x79\x43\157\154\x73"] = $regs[4]; } } elseif ($key_localpart == "\x6e\151\154") { $this->message[$pos]["\x6e\151\154"] = $value == "\x74\x72\165\x65" || $value == "\61"; } elseif ($key != "\150\162\x65\x66" && $key != "\170\155\x6c\x6e\x73" && $key_localpart != "\x65\x6e\x63\x6f\144\x69\156\147\x53\x74\171\154\145" && $key_localpart != "\162\x6f\157\164") { $this->message[$pos]["\170\141\x74\164\162\x73"]["\41" . $key] = $value; } if ($key == "\x78\x6d\154\156\x73") { $this->default_namespace = $value; } if ($key == "\x69\144") { $this->ids[$value] = $pos; } if ($key_localpart == "\162\x6f\x6f\x74" && $value == 1) { $this->status = "\155\x65\x74\150\x6f\x64"; $this->root_struct_name = $name; $this->root_struct = $pos; $this->debug("\x66\157\x75\156\144\x20\x72\x6f\157\164\40\x73\164\162\x75\x63\x74\x20{$this->root_struct_name}\54\40\160\157\163\40{$pos}"); } $attstr .= "\40{$key}\75\42{$value}\x22"; } if (isset($prefix)) { $this->message[$pos]["\x6e\x61\155\x65\x73\x70\x61\143\x65"] = $this->namespaces[$prefix]; $this->default_namespace = $this->namespaces[$prefix]; } else { $this->message[$pos]["\156\141\x6d\x65\163\160\141\143\145"] = $this->default_namespace; } if ($this->status == "\150\x65\141\x64\x65\162") { if ($this->root_header != $pos) { $this->responseHeaders .= "\x3c" . (isset($prefix) ? $prefix . "\72" : '') . "{$name}{$attstr}\76"; } } elseif ($this->root_struct_name != '') { $this->document .= "\74" . (isset($prefix) ? $prefix . "\x3a" : '') . "{$name}{$attstr}\x3e"; } } function end_element($parser, $name) { $pos = $this->depth_array[$this->depth--]; if (strpos($name, "\x3a")) { $prefix = substr($name, 0, strpos($name, "\72")); $name = substr(strstr($name, "\x3a"), 1); } if (isset($this->body_position) && $pos > $this->body_position) { if (isset($this->message[$pos]["\x61\x74\x74\x72\163"]["\150\162\145\x66"])) { $id = substr($this->message[$pos]["\141\x74\x74\162\163"]["\x68\162\145\x66"], 1); $this->multirefs[$id][$pos] = "\160\x6c\x61\x63\x65\x68\x6f\154\144\145\162"; $this->message[$pos]["\x72\145\x73\165\x6c\x74"] =& $this->multirefs[$id][$pos]; } elseif ($this->message[$pos]["\143\150\x69\x6c\144\x72\x65\x6e"] != '') { if (!isset($this->message[$pos]["\x72\145\163\165\154\x74"])) { $this->message[$pos]["\162\145\x73\x75\x6c\164"] = $this->buildVal($pos); } } elseif (isset($this->message[$pos]["\170\x61\164\x74\x72\x73"])) { if (isset($this->message[$pos]["\x6e\x69\154"]) && $this->message[$pos]["\156\151\x6c"]) { $this->message[$pos]["\170\141\164\x74\x72\x73"]["\x21"] = null; } elseif (isset($this->message[$pos]["\x63\144\x61\x74\141"]) && trim($this->message[$pos]["\143\144\141\x74\141"]) != '') { if (isset($this->message[$pos]["\x74\171\x70\x65"])) { $this->message[$pos]["\170\141\x74\164\x72\x73"]["\x21"] = $this->decodeSimple($this->message[$pos]["\143\x64\x61\164\141"], $this->message[$pos]["\164\171\x70\x65"], isset($this->message[$pos]["\164\x79\x70\145\x5f\x6e\141\155\x65\x73\x70\x61\143\x65"]) ? $this->message[$pos]["\164\171\160\145\137\156\x61\x6d\x65\x73\160\x61\x63\x65"] : ''); } else { $parent = $this->message[$pos]["\160\141\162\145\x6e\164"]; if (isset($this->message[$parent]["\x74\171\x70\145"]) && $this->message[$parent]["\164\171\160\145"] == "\141\x72\162\141\x79" && isset($this->message[$parent]["\141\x72\x72\141\171\124\171\160\145"])) { $this->message[$pos]["\170\x61\164\x74\x72\x73"]["\41"] = $this->decodeSimple($this->message[$pos]["\x63\144\x61\164\x61"], $this->message[$parent]["\x61\x72\162\141\x79\124\x79\160\145"], isset($this->message[$parent]["\141\x72\x72\x61\171\124\171\x70\145\116\x61\155\x65\163\x70\141\x63\145"]) ? $this->message[$parent]["\141\x72\162\x61\171\x54\x79\160\145\x4e\141\155\x65\163\x70\x61\x63\x65"] : ''); } else { $this->message[$pos]["\x78\141\x74\x74\x72\x73"]["\41"] = $this->message[$pos]["\x63\x64\141\x74\141"]; } } } $this->message[$pos]["\x72\x65\x73\165\x6c\x74"] = $this->message[$pos]["\170\141\164\164\x72\x73"]; } else { if (isset($this->message[$pos]["\156\x69\x6c"]) && $this->message[$pos]["\156\151\154"]) { $this->message[$pos]["\x78\141\164\164\x72\x73"]["\41"] = null; } elseif (isset($this->message[$pos]["\164\x79\x70\x65"])) { $this->message[$pos]["\162\145\x73\x75\x6c\x74"] = $this->decodeSimple($this->message[$pos]["\x63\144\141\164\x61"], $this->message[$pos]["\164\171\160\x65"], isset($this->message[$pos]["\x74\171\x70\x65\x5f\x6e\141\x6d\x65\x73\160\x61\x63\x65"]) ? $this->message[$pos]["\x74\x79\160\145\x5f\x6e\x61\155\145\x73\x70\141\143\145"] : ''); } else { $parent = $this->message[$pos]["\x70\x61\162\145\x6e\164"]; if (isset($this->message[$parent]["\x74\171\x70\145"]) && $this->message[$parent]["\x74\171\160\x65"] == "\x61\162\x72\141\171" && isset($this->message[$parent]["\141\x72\162\x61\x79\124\171\x70\145"])) { $this->message[$pos]["\162\x65\163\165\x6c\x74"] = $this->decodeSimple($this->message[$pos]["\x63\x64\x61\x74\141"], $this->message[$parent]["\x61\x72\x72\141\171\124\x79\160\x65"], isset($this->message[$parent]["\141\162\162\x61\171\x54\x79\160\145\116\x61\x6d\145\163\x70\141\143\145"]) ? $this->message[$parent]["\141\x72\x72\x61\171\x54\x79\x70\145\x4e\x61\x6d\145\x73\160\141\x63\145"] : ''); } else { $this->message[$pos]["\x72\145\163\x75\154\x74"] = $this->message[$pos]["\143\144\x61\164\x61"]; } } } } if ($this->status == "\x68\145\141\144\145\x72") { if ($this->root_header != $pos) { $this->responseHeaders .= "\x3c\57" . (isset($prefix) ? $prefix . "\72" : '') . "{$name}\76"; } } elseif ($pos >= $this->root_struct) { $this->document .= "\x3c\x2f" . (isset($prefix) ? $prefix . "\x3a" : '') . "{$name}\x3e"; } if ($pos == $this->root_struct) { $this->status = "\142\x6f\x64\x79"; $this->root_struct_namespace = $this->message[$pos]["\x6e\x61\155\x65\x73\x70\141\x63\x65"]; } elseif ($pos == $this->root_header) { $this->status = "\145\156\166\x65\x6c\157\160\x65"; } elseif ($name == "\x42\x6f\144\x79" && $this->status == "\x62\157\144\x79") { $this->status = "\145\156\166\145\x6c\157\x70\145"; } elseif ($name == "\110\x65\141\x64\145\x72" && $this->status == "\150\145\x61\144\x65\x72") { $this->status = "\x65\x6e\166\x65\154\157\160\145"; } elseif ($name == "\105\x6e\166\145\154\157\x70\x65" && $this->status == "\145\x6e\166\145\154\157\160\145") { $this->status = ''; } $this->parent = $this->message[$pos]["\x70\141\x72\x65\156\x74"]; } function character_data($parser, $data) { $pos = $this->depth_array[$this->depth]; if ($this->xml_encoding == "\x55\124\106\x2d\x38") { if ($this->decode_utf8) { $data = utf8_decode($data); } } $this->message[$pos]["\143\144\x61\164\141"] .= $data; if ($this->status == "\150\145\141\144\145\162") { $this->responseHeaders .= $data; } else { $this->document .= $data; } } function get_response() { return $this->soapresponse; } function get_soapbody() { return $this->soapresponse; } function get_soapheader() { return $this->soapheader; } function getHeaders() { return $this->responseHeaders; } function decodeSimple($value, $type, $typens) { if (!isset($type) || $type == "\163\x74\162\x69\x6e\x67" || $type == "\154\157\x6e\x67" || $type == "\x75\x6e\x73\151\x67\156\x65\x64\114\x6f\156\x67") { return (string) $value; } if ($type == "\x69\156\x74" || $type == "\151\156\164\145\x67\x65\162" || $type == "\163\x68\157\x72\x74" || $type == "\142\x79\164\145") { return (int) $value; } if ($type == "\146\x6c\x6f\141\x74" || $type == "\x64\157\x75\142\x6c\145" || $type == "\144\x65\x63\x69\x6d\x61\154") { return (double) $value; } if ($type == "\142\x6f\157\x6c\x65\141\156") { if (strtolower($value) == "\x66\x61\154\x73\x65" || strtolower($value) == "\x66") { return false; } return (bool) $value; } if ($type == "\x62\141\163\145\66\x34" || $type == "\142\x61\x73\x65\66\x34\102\151\x6e\x61\162\x79") { $this->debug("\104\145\143\x6f\x64\145\x20\142\141\163\145\x36\64\x20\166\141\154\165\x65"); return base64_decode($value); } if ($type == "\x6e\157\156\x50\157\163\x69\x74\151\166\145\111\x6e\164\x65\x67\x65\x72" || $type == "\x6e\x65\x67\141\x74\x69\x76\145\x49\156\164\145\147\x65\162" || $type == "\x6e\157\x6e\x4e\x65\x67\141\164\151\166\145\111\156\164\x65\x67\145\x72" || $type == "\160\x6f\x73\x69\164\x69\166\x65\x49\x6e\164\145\147\x65\x72" || $type == "\x75\156\x73\151\x67\156\145\144\111\x6e\x74" || $type == "\165\x6e\163\x69\147\x6e\x65\x64\x53\150\157\x72\164" || $type == "\x75\x6e\x73\151\147\x6e\x65\144\102\x79\164\x65") { return (int) $value; } if ($type == "\141\x72\162\141\x79") { return array(); } return (string) $value; } function buildVal($pos) { if (!isset($this->message[$pos]["\x74\x79\160\x65"])) { $this->message[$pos]["\164\x79\x70\145"] = ''; } $this->debug("\151\156\x20\x62\165\151\x6c\x64\x56\x61\x6c\x28\51\40\x66\157\162\40" . $this->message[$pos]["\x6e\141\155\145"] . "\50\x70\157\163\x20{$pos}\x29\x20\x6f\x66\40\x74\x79\x70\145\40" . $this->message[$pos]["\x74\171\160\145"]); if ($this->message[$pos]["\143\x68\x69\x6c\x64\162\x65\x6e"] != '') { $params = array(); $this->debug("\x69\x6e\x20\142\165\151\154\144\x56\141\x6c\x2c\x20\164\150\x65\x72\x65\40\x61\162\x65\40\143\x68\151\x6c\144\162\145\x6e"); $children = explode("\174", $this->message[$pos]["\143\150\x69\154\144\162\x65\x6e"]); array_shift($children); if (isset($this->message[$pos]["\141\162\x72\141\171\x43\x6f\x6c\x73"]) && $this->message[$pos]["\141\162\162\141\171\x43\x6f\x6c\163"] != '') { $r = 0; $c = 0; foreach ($children as $child_pos) { $this->debug("\151\156\40\x62\165\x69\154\144\x56\141\154\54\40\x67\157\x74\x20\x61\x6e\x20\115\x44\x20\141\x72\x72\141\x79\40\x65\154\x65\x6d\x65\x6e\x74\72\40{$r}\x2c\40{$c}"); $params[$r][] = $this->message[$child_pos]["\x72\145\163\x75\154\x74"]; $c++; if ($c == $this->message[$pos]["\141\162\x72\x61\x79\103\x6f\154\163"]) { $c = 0; $r++; } } } elseif ($this->message[$pos]["\164\x79\x70\145"] == "\x61\x72\x72\x61\x79" || $this->message[$pos]["\164\171\x70\145"] == "\x41\x72\162\141\171") { $this->debug("\151\156\40\142\x75\151\x6c\x64\x56\141\x6c\x2c\40\x61\x64\144\x69\156\x67\40\x61\162\x72\x61\171\x20" . $this->message[$pos]["\156\141\x6d\145"]); foreach ($children as $child_pos) { $params[] =& $this->message[$child_pos]["\x72\x65\163\x75\x6c\164"]; } } elseif ($this->message[$pos]["\164\x79\160\145"] == "\x4d\141\160" && $this->message[$pos]["\164\171\x70\145\137\x6e\141\155\x65\163\160\x61\x63\145"] == "\150\x74\164\x70\x3a\57\57\x78\155\154\x2e\x61\x70\x61\x63\150\x65\56\157\162\x67\57\170\x6d\154\x2d\x73\157\141\x70") { $this->debug("\151\x6e\40\x62\165\151\x6c\x64\126\141\154\54\x20\112\x61\x76\141\40\115\x61\160\40" . $this->message[$pos]["\156\141\155\x65"]); foreach ($children as $child_pos) { $kv = explode("\174", $this->message[$child_pos]["\x63\x68\151\x6c\x64\162\145\156"]); $params[$this->message[$kv[1]]["\162\145\163\x75\154\x74"]] =& $this->message[$kv[2]]["\162\145\x73\x75\154\x74"]; } } else { $this->debug("\151\x6e\40\142\165\x69\154\144\126\x61\x6c\x2c\40\141\x64\144\x69\x6e\147\x20\112\x61\x76\x61\40\126\x65\143\x74\x6f\162\40\x6f\162\x20\147\x65\156\x65\x72\151\x63\40\x63\157\x6d\160\157\x75\156\x64\40\x74\171\160\x65\40" . $this->message[$pos]["\156\141\155\145"]); if ($this->message[$pos]["\164\171\160\145"] == "\x56\x65\143\164\x6f\x72" && $this->message[$pos]["\x74\171\160\x65\x5f\x6e\141\155\x65\163\x70\141\x63\145"] == "\150\x74\x74\x70\72\57\x2f\x78\155\154\x2e\141\x70\141\143\150\145\x2e\x6f\162\x67\x2f\170\155\x6c\x2d\x73\157\x61\x70") { $notstruct = 1; } else { $notstruct = 0; } foreach ($children as $child_pos) { if ($notstruct) { $params[] =& $this->message[$child_pos]["\x72\145\163\165\154\164"]; } else { if (isset($params[$this->message[$child_pos]["\x6e\x61\155\x65"]])) { if (!is_array($params[$this->message[$child_pos]["\156\141\x6d\145"]]) || !isset($params[$this->message[$child_pos]["\x6e\x61\155\145"]][0])) { $params[$this->message[$child_pos]["\x6e\x61\155\145"]] = array($params[$this->message[$child_pos]["\x6e\141\155\x65"]]); } $params[$this->message[$child_pos]["\x6e\141\x6d\145"]][] =& $this->message[$child_pos]["\162\x65\x73\x75\154\x74"]; } else { $params[$this->message[$child_pos]["\156\x61\x6d\x65"]] =& $this->message[$child_pos]["\162\x65\x73\165\x6c\x74"]; } } } } if (isset($this->message[$pos]["\x78\x61\x74\164\162\x73"])) { $this->debug("\x69\156\40\142\165\x69\154\x64\x56\141\154\54\x20\x68\141\156\144\x6c\x69\x6e\147\40\x61\164\x74\x72\x69\x62\x75\164\x65\x73"); foreach ($this->message[$pos]["\170\141\164\164\162\163"] as $n => $v) { $params[$n] = $v; } } if (isset($this->message[$pos]["\143\144\141\x74\x61"]) && trim($this->message[$pos]["\x63\x64\x61\164\141"]) != '') { $this->debug("\x69\x6e\x20\142\165\151\154\x64\126\141\x6c\x2c\x20\x68\141\x6e\144\154\151\156\147\40\163\x69\155\160\154\x65\103\x6f\156\164\x65\156\x74"); if (isset($this->message[$pos]["\164\171\160\x65"])) { $params["\41"] = $this->decodeSimple($this->message[$pos]["\x63\x64\141\164\141"], $this->message[$pos]["\164\171\x70\x65"], isset($this->message[$pos]["\164\x79\x70\145\137\156\x61\155\x65\x73\160\x61\143\145"]) ? $this->message[$pos]["\164\x79\160\x65\137\156\x61\x6d\145\163\x70\141\143\x65"] : ''); } else { $parent = $this->message[$pos]["\160\141\x72\145\156\x74"]; if (isset($this->message[$parent]["\x74\x79\160\x65"]) && $this->message[$parent]["\x74\x79\160\x65"] == "\141\162\x72\x61\171" && isset($this->message[$parent]["\141\162\162\141\171\124\171\160\x65"])) { $params["\41"] = $this->decodeSimple($this->message[$pos]["\x63\144\x61\164\x61"], $this->message[$parent]["\x61\x72\162\x61\171\124\x79\160\x65"], isset($this->message[$parent]["\141\162\162\x61\x79\124\x79\x70\x65\116\141\155\x65\163\160\x61\143\x65"]) ? $this->message[$parent]["\141\x72\x72\141\171\x54\171\160\x65\x4e\x61\155\145\163\160\141\143\x65"] : ''); } else { $params["\x21"] = $this->message[$pos]["\143\x64\141\164\x61"]; } } } $ret = is_array($params) ? $params : array(); $this->debug("\151\x6e\x20\x62\165\x69\x6c\144\126\141\x6c\54\x20\x72\145\x74\x75\x72\156\72"); $this->appendDebug($this->varDump($ret)); return $ret; } else { $this->debug("\x69\x6e\40\142\x75\x69\154\x64\x56\141\154\54\x20\x6e\157\x20\143\x68\x69\x6c\x64\162\145\x6e\54\40\142\165\x69\x6c\x64\151\x6e\x67\40\163\x63\x61\x6c\141\162"); $cdata = isset($this->message[$pos]["\143\x64\x61\x74\141"]) ? $this->message[$pos]["\x63\144\x61\x74\141"] : ''; if (isset($this->message[$pos]["\x74\x79\x70\145"])) { $ret = $this->decodeSimple($cdata, $this->message[$pos]["\164\171\x70\x65"], isset($this->message[$pos]["\x74\171\160\x65\x5f\x6e\x61\x6d\x65\163\160\141\143\145"]) ? $this->message[$pos]["\164\x79\160\145\x5f\x6e\141\155\145\x73\160\141\x63\x65"] : ''); $this->debug("\x69\x6e\x20\x62\165\151\154\144\126\141\154\x2c\x20\x72\145\x74\x75\162\156\x3a\40{$ret}"); return $ret; } $parent = $this->message[$pos]["\x70\x61\162\x65\156\x74"]; if (isset($this->message[$parent]["\164\x79\160\145"]) && $this->message[$parent]["\164\x79\x70\x65"] == "\x61\x72\x72\x61\x79" && isset($this->message[$parent]["\141\162\x72\141\171\x54\171\x70\x65"])) { $ret = $this->decodeSimple($cdata, $this->message[$parent]["\x61\x72\x72\141\171\124\x79\x70\145"], isset($this->message[$parent]["\141\x72\x72\141\x79\124\171\160\145\116\141\155\x65\x73\160\141\143\145"]) ? $this->message[$parent]["\141\162\162\141\171\124\x79\160\x65\x4e\141\155\x65\163\x70\141\143\145"] : ''); $this->debug("\x69\156\40\142\165\x69\154\x64\x56\141\154\x2c\x20\162\x65\164\x75\x72\156\72\40{$ret}"); return $ret; } $ret = $this->message[$pos]["\143\x64\x61\164\141"]; $this->debug("\151\x6e\x20\142\x75\x69\x6c\x64\126\141\x6c\x2c\40\x72\x65\164\x75\x72\x6e\72\40{$ret}"); return $ret; } } } goto FtQQM; Wehmf: class soap_fault extends nusoap_fault { } goto sfPlR; ojYRB: class nusoap_wsdlcache { var $fplock; var $cache_lifetime; var $cache_dir; var $debug_str = ''; function __construct($cache_dir = "\56", $cache_lifetime = 0) { $this->fplock = array(); $this->cache_dir = $cache_dir != '' ? $cache_dir : "\x2e"; $this->cache_lifetime = $cache_lifetime; } function createFilename($wsdl) { return $this->cache_dir . "\x2f\167\x73\x64\154\x63\141\x63\x68\145\55" . md5($wsdl); } function debug($string) { $this->debug_str .= get_class($this) . "\x3a\40{$string}\12"; } function get($wsdl) { $filename = $this->createFilename($wsdl); if ($this->obtainMutex($filename, "\x72")) { if ($this->cache_lifetime > 0) { if (file_exists($filename) && time() - filemtime($filename) > $this->cache_lifetime) { unlink($filename); $this->debug("\x45\x78\x70\151\x72\x65\x64\x20{$wsdl}\x20\50{$filename}\51\40\146\162\157\155\x20\x63\x61\x63\150\145"); $this->releaseMutex($filename); return null; } } if (!file_exists($filename)) { $this->debug("{$wsdl}\40\50{$filename}\x29\40\156\157\x74\40\151\156\40\143\x61\x63\150\x65\40\50\x31\51"); $this->releaseMutex($filename); return null; } $fp = @fopen($filename, "\x72"); if ($fp) { $s = implode('', @file($filename)); fclose($fp); $this->debug("\107\157\164\x20{$wsdl}\40\50{$filename}\x29\40\146\162\x6f\x6d\x20\x63\x61\143\150\145"); } else { $s = null; $this->debug("{$wsdl}\x20\50{$filename}\x29\x20\x6e\x6f\x74\40\151\156\40\x63\x61\143\150\145\x20\50\x32\x29"); } $this->releaseMutex($filename); return !is_null($s) ? unserialize($s) : null; } else { $this->debug("\x55\x6e\141\x62\x6c\x65\x20\x74\157\x20\x6f\142\164\x61\151\x6e\x20\155\x75\x74\x65\x78\x20\146\157\x72\40{$filename}\x20\x69\x6e\40\x67\x65\x74"); } return null; } function obtainMutex($filename, $mode) { if (isset($this->fplock[md5($filename)])) { $this->debug("\114\x6f\x63\153\x20\146\157\162\40{$filename}\40\x61\154\162\145\141\144\171\x20\x65\x78\x69\x73\x74\163"); return false; } $this->fplock[md5($filename)] = fopen($filename . "\56\154\x6f\x63\x6b", "\x77"); if ($mode == "\x72") { return flock($this->fplock[md5($filename)], LOCK_SH); } else { return flock($this->fplock[md5($filename)], LOCK_EX); } } function put($wsdl_instance) { $filename = $this->createFilename($wsdl_instance->wsdl); $s = serialize($wsdl_instance); if ($this->obtainMutex($filename, "\x77")) { $fp = fopen($filename, "\167"); if (!$fp) { $this->debug("\x43\x61\x6e\x6e\x6f\164\x20\x77\162\x69\x74\145\x20{$wsdl_instance->wsdl}\40\50{$filename}\51\40\x69\x6e\40\x63\141\143\x68\145"); $this->releaseMutex($filename); return false; } fputs($fp, $s); fclose($fp); $this->debug("\120\x75\x74\40{$wsdl_instance->wsdl}\40\x28{$filename}\51\x20\x69\156\x20\143\x61\x63\150\145"); $this->releaseMutex($filename); return true; } else { $this->debug("\125\156\x61\x62\x6c\x65\x20\164\x6f\40\157\142\x74\141\x69\x6e\x20\155\x75\164\x65\170\40\x66\x6f\x72\40{$filename}\x20\x69\x6e\x20\160\165\x74"); } return false; } function releaseMutex($filename) { $ret = flock($this->fplock[md5($filename)], LOCK_UN); fclose($this->fplock[md5($filename)]); unset($this->fplock[md5($filename)]); if (!$ret) { $this->debug("\x4e\x6f\x74\x20\141\x62\154\x65\40\x74\x6f\x20\162\x65\154\x65\x61\x73\145\40\x6c\157\143\153\40\146\x6f\x72\x20{$filename}"); } return $ret; } function remove($wsdl) { $filename = $this->createFilename($wsdl); if (!file_exists($filename)) { $this->debug("{$wsdl}\x20\50{$filename}\x29\40\x6e\157\x74\40\x69\x6e\40\x63\141\143\x68\x65\40\164\x6f\x20\x62\145\x20\x72\x65\155\157\166\x65\x64"); return false; } $this->obtainMutex($filename, "\167"); $ret = unlink($filename); $this->debug("\122\145\x6d\157\x76\x65\144\40\50{$ret}\x29\x20{$wsdl}\x20\x28{$filename}\x29\x20\x66\162\x6f\x6d\40\143\x61\x63\150\x65"); $this->releaseMutex($filename); return $ret; } } goto Y7lTK; Y7lTK: class wsdlcache extends nusoap_wsdlcache { }